<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kévin Chalet&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kevinchalet.com/"/>
  <updated>2020-02-18T15:35:44.134Z</updated>
  <id>https://kevinchalet.com/</id>
  
  <author>
    <name>Kévin Chalet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Creating an OpenID Connect server proxy with OpenIddict 3.0&#39;s degraded mode</title>
    <link href="https://kevinchalet.com/2020/02/18/creating-an-openid-connect-server-proxy-with-openiddict-3-0-s-degraded-mode/"/>
    <id>https://kevinchalet.com/2020/02/18/creating-an-openid-connect-server-proxy-with-openiddict-3-0-s-degraded-mode/</id>
    <published>2020-02-18T15:30:00.000Z</published>
    <updated>2020-02-18T15:35:44.134Z</updated>
    
    <content type="html"><![CDATA[<p>As some of you may already know, <a href="https://github.com/openiddict/openiddict-core/issues/736" target="_blank" rel="external">I&#39;ve been working on OpenIddict 3.0 for a few months now</a>. <strong>One of the main goals of this major release is to merge <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server" target="_blank" rel="external">ASOS</a></strong> (a low-level OpenID Connect server middleware for ASP.NET Core) <strong>and OpenIddict</strong> (a higher-level OIDC server library designed for less advanced users) into a unified code base, that would ideally represent the best of both worlds.</p><p><strong>As part of this task, a new feature was added to OpenIddict: the degraded mode</strong> (also known as the <em>ASOS-like</em> or <em>bare</em> mode). Put simply, <strong>this mode allows using OpenIddict&#39;s server without any backing database</strong>. Once enabled, all the features that rely on the OpenIddict application, authorization, scope and token managers (contained in the <code>OpenIddict.Core</code> package) are automatically disabled, which includes things like <code>client_id</code>/<code>client_secret</code> or <code>redirect_uri</code> validation, reference tokens and token revocation support. In other words, this mode allows switching from an &quot;all you can eat&quot; offer to a &quot;pay-to-play&quot; approach.</p><p>A thread, posted on <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers/issues/50" target="_blank" rel="external">one of the aspnet-contrib repositories</a> gave me a perfect opportunity to showcase this particular feature. The question asked by the commenters was simple: how can I use an external authentication provider like Steam (that implements the legacy OpenID 2.0 protocol) with my own API endpoints?</p><p>I<strong>Steam doesn&#39;t issue any access token you could directly use with your API endpoints</strong>. Actually, access tokens are not even a thing in OpenID 2.0, which is a pure authentication protocol that doesn&#39;t offer any authorization capability (unlike OAuth 1.0/2.0 or OpenID Connect).</p><p>So, how do we solve this problem? <strong>The most common approach typically consists in creating your own authorization server</strong> between your frontend application and the remote authentication provider (here, Steam). This way, when the application needs to authenticate a user, the user is redirected to the authorization server, that delegates the actual authentication part to another party. Once authenticated by that party, the user is redirected back to the main authorization server, that issues an access token to the client application.</p><img src="/2020/02/18/creating-an-openid-connect-server-proxy-with-openiddict-3-0-s-degraded-mode/authorization-code-flow.png" alt="authorization-code-flow.png"><p>This a super common scenario, that can be implemented using standard protocols like OpenID Connect and well-known implementations like OpenIddict or IdentityServer. However, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers/issues/50#issuecomment-586734467" target="_blank" rel="external">these options are sometimes considered &quot;overkill&quot; for such simple scenarios</a>. After all, why would you need a fully-fledged OIDC server – with login, registration or consent views – when all you want is to delegate the actual authentication to another server in a totally transparent and almost invisible way?</p><p>Rolling your own protocol is tempting... <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenId.Providers/issues/50#issuecomment-586726240" target="_blank" rel="external">but a very bad idea</a>, as you can&#39;t benefit from all the security measures offered by standard flows like OAuth 2.0/OpenID Connect&#39;s authorization code flow, whose threat model is clearly identified for many years now. <strong>As you may have guessed by now, this is precisely where OpenIddict 3.0&#39;s degraded mode can come in handy</strong>.</p><a id="more"></a><h2 id="Implementing-a-minimalist-OpenID-Connect-server-with-OpenIddict-3-0"><a href="#Implementing-a-minimalist-OpenID-Connect-server-with-OpenIddict-3-0" class="headerlink" title="Implementing a minimalist OpenID Connect server with OpenIddict 3.0"></a>Implementing a minimalist OpenID Connect server with OpenIddict 3.0</h2><h3 id="Add-the-Steam-authentication-integration"><a href="#Add-the-Steam-authentication-integration" class="headerlink" title="Add the Steam authentication integration"></a>Add the Steam authentication integration</h3><p>First, we&#39;ll start by creating an ASP.NET Core 3.1 API application and by adding the aspnet-contrib Steam provider and an instance of the cookies authentication handler (that will be used to store the user identity retrieved from Steam).</p><p>For that, add the following dependency in your .csproj:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenId.Steam"</span> <span class="attr">Version</span>=<span class="string">"3.0.0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><p>Then, update <code>ConfigureServices</code> to register the Steam and cookies authentication handlers:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    services.AddControllers();</div><div class="line"></div><div class="line">    services.AddAuthentication()</div><div class="line">        .AddCookie()</div><div class="line">        .AddSteam(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.SignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;</div><div class="line"></div><div class="line">            <span class="comment">// To get additional claims from Steam's authentication APIs,</span></div><div class="line">            <span class="comment">// register your application and set the application key.</span></div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="comment">// options.ApplicationKey = "application_key";</span></div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>You&#39;ll also need to update <code>Configure</code> to call <code>app.UseAuthentication()</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (env.IsDevelopment())</div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    app.UseHttpsRedirection();</div><div class="line"></div><div class="line">    app.UseRouting();</div><div class="line"></div><div class="line">    app.UseAuthentication();</div><div class="line"></div><div class="line">    app.UseAuthorization();</div><div class="line"></div><div class="line">    app.UseEndpoints(endpoints =&gt;</div><div class="line">    &#123;</div><div class="line">        endpoints.MapControllers();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Add-the-OpenIddict-server-and-JWT-validation-components"><a href="#Add-the-OpenIddict-server-and-JWT-validation-components" class="headerlink" title="Add the OpenIddict server and JWT validation components"></a>Add the OpenIddict server and JWT validation components</h3><p>Now, we&#39;ll need to add the OpenID Connect server part. For that, add the following packages:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.Server.AspNetCore"</span> <span class="attr">Version</span>=<span class="string">"3.0.0-alpha1.20116.71"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.Validation.AspNetCore"</span> <span class="attr">Version</span>=<span class="string">"3.0.0-alpha1.20116.71"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.Validation.ServerIntegration"</span> <span class="attr">Version</span>=<span class="string">"3.0.0-alpha1.20116.71"</span> /&gt;</span></div></pre></td></tr></table></figure><div class="note info"><p>At the time of writing, OpenIddict 3.0&#39;s prelease packages are not yet available on NuGet.org. To use the nightly builds, you need to reference the dedicated OpenIddict MyGet feed: <a href="https://www.myget.org/F/openiddict/api/v3/index.json" target="_blank" rel="external">https://www.myget.org/F/openiddict/api/v3/index.json</a></p></div><p>Next, tweak <code>ConfigureServices</code> to register the OpenIddict ASP.NET Core server and validation services, with only the options we need: the authorization code flow allowed, the authorization and token endpoints active and the degraded mode enabled:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.AddDevelopmentEncryptionCertificate()</div><div class="line">               .AddDevelopmentSigningCertificate();</div><div class="line"></div><div class="line">        options.AllowAuthorizationCodeFlow();</div><div class="line"></div><div class="line">        options.SetAuthorizationEndpointUris(<span class="string">"/connect/authorize"</span>)</div><div class="line">               .SetTokenEndpointUris(<span class="string">"/connect/token"</span>);</div><div class="line"></div><div class="line">        options.EnableDegradedMode();</div><div class="line"></div><div class="line">        options.UseAspNetCore();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .AddValidation(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.UseLocalServer();</div><div class="line">        options.UseAspNetCore();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>At this point, trying to launch the application will result in an exception being thrown:</p><blockquote><p>InvalidOperationException: No custom authorization request validation handler was found. When enabling the degraded mode, a custom <code>IOpenIddictServerHandler&lt;ValidateAuthorizationRequestContext&gt;</code> must be implemented to validate authorization requests (e.g to ensure the client_id and redirect_uri are valid).</p></blockquote><p>This is expected: when using the degraded mode, you must add custom code to validate things that are normally validated for you by OpenIddict, which includes the <code>client_id</code> or <code>redirect_uri</code>, that must be checked to ensure users are not redirected to unsafe/unknown addresses.</p><p>To fix that error, we&#39;ll need to register a handler for the <code>ValidateAuthorizationRequest</code> event. Since we enabled the token endpoint, we&#39;ll also need one to validate token requests.</p><p>There are multiple ways to create and register event handlers in OpenIddict: you can create a dedicated class implementing the generic <code>IOpenIddictServerHandler&lt;TContext&gt;</code> interface – which allows using dependency injection – or you can use inline event handlers.</p><p>To keep things simple, we&#39;ll use inline event handlers (directly defined in <code>ConfigureServices</code>) and static hard-coded checks:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        options.AddEventHandler&lt;ValidateAuthorizationRequestContext&gt;(builder =&gt;</div><div class="line">            builder.UseInlineHandler(context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.Equals(context.ClientId, <span class="string">"console_app"</span>, StringComparison.Ordinal))</div><div class="line">                &#123;</div><div class="line">                    context.Reject(</div><div class="line">                        error: Errors.InvalidClient,</div><div class="line">                        description: <span class="string">"The specified 'client_id' doesn't match a registered application."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">default</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.Equals(context.RedirectUri, <span class="string">"http://localhost:7890/"</span>, StringComparison.Ordinal))</div><div class="line">                &#123;</div><div class="line">                    context.Reject(</div><div class="line">                        error: Errors.InvalidClient,</div><div class="line">                        description: <span class="string">"The specified 'redirect_uri' is not valid for this client application."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">default</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">default</span>;</div><div class="line">            &#125;));</div><div class="line"></div><div class="line">        options.AddEventHandler&lt;ValidateTokenRequestContext&gt;(builder =&gt;</div><div class="line">            builder.UseInlineHandler(context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">string</span>.Equals(context.ClientId, <span class="string">"console_app"</span>, StringComparison.Ordinal))</div><div class="line">                &#123;</div><div class="line">                    context.Reject(</div><div class="line">                        error: Errors.InvalidClient,</div><div class="line">                        description: <span class="string">"The specified 'client_id' doesn't match a registered application."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">default</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// This demo is used by a single public client application.</span></div><div class="line">                <span class="comment">// As such, no client secret validation is performed.</span></div><div class="line"></div><div class="line">                <span class="keyword">return</span> <span class="keyword">default</span>;</div><div class="line">            &#125;));</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p><strong>Final and most interesting part: gluing everything together</strong>, so that OpenIddict can redirect users to Steam and generate an authorization response containing an authorization code that the client application will be able to use to redeem an access token. To implement that, we need to use the <code>HandleAuthorizationRequest</code> event:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">options.AddEventHandler&lt;HandleAuthorizationRequestContext&gt;(builder =&gt;</div><div class="line">    builder.UseInlineHandler(<span class="keyword">async</span> context =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> request = context.Transaction.GetHttpRequest() ??</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"The ASP.NET Core request cannot be retrieved."</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Retrieve the security principal created by the Steam handler and stored in the authentication cookie.</span></div><div class="line">        <span class="comment">// If the principal cannot be retrieved, this indicates that the user is not logged in. In this case,</span></div><div class="line">        <span class="comment">// an authentication challenge is triggered to redirect the user to Steam's authentication endpoint.</span></div><div class="line">        <span class="keyword">var</span> principal = (<span class="keyword">await</span> request.HttpContext.AuthenticateAsync(SteamAuthenticationDefaults.AuthenticationScheme))?.Principal;</div><div class="line">        <span class="keyword">if</span> (principal == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">await</span> request.HttpContext.ChallengeAsync(SteamAuthenticationDefaults.AuthenticationScheme);</div><div class="line">            context.HandleRequest();</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(TokenValidationParameters.DefaultAuthenticationType);</div><div class="line"></div><div class="line">        <span class="comment">// Use the "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier" claim</span></div><div class="line">        <span class="comment">// (added by the Steam handler to store the user identifier) as the OIDC "sub" claim.</span></div><div class="line">        identity.AddClaim(<span class="keyword">new</span> Claim(Claims.Subject, principal.GetClaim(ClaimTypes.NameIdentifier)));</div><div class="line"></div><div class="line">        <span class="comment">// If needed, you can copy more claims from the cookies principal to the bearer principal.</span></div><div class="line">        <span class="comment">// To get more claims from the Steam handler, you'll need to set the application key.</span></div><div class="line"></div><div class="line">        <span class="comment">// Mark all the added claims as being allowed to be persisted in the access token,</span></div><div class="line">        <span class="comment">// so that the API controllers can retrieve them from the ClaimsPrincipal instance.</span></div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> identity.Claims)</div><div class="line">        &#123;</div><div class="line">            claim.SetDestinations(Destinations.AccessToken);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Attach the principal to the authorization context, so that an OpenID Connect response</span></div><div class="line">        <span class="comment">// with an authorization code can be generated by the OpenIddict server services.</span></div><div class="line">        context.Principal = <span class="keyword">new</span> ClaimsPrincipal(identity);</div><div class="line">    &#125;));</div></pre></td></tr></table></figure><div class="note tip"><p>Adding a handler for <code>HandleTokenRequestContext</code> is not necessary: in this case, OpenIddict will automatically reuse the user identity extracted from the authorization code to produce an access token returned as part of the token response.</p></div><h2 id="Creating-a-NET-demo-console"><a href="#Creating-a-NET-demo-console" class="headerlink" title="Creating a .NET demo console"></a>Creating a .NET demo console</h2><p>To test our minimalist OpenID Connect proxy, we&#39;ll now create a separate .NET Core 3.1 console referencing the <code>IdentityModel.OidcClient</code> package:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LangVersion</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">LangVersion</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"IdentityModel.OidcClient"</span> <span class="attr">Version</span>=<span class="string">"4.0.0-preview.1.3"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><p>There are typically <strong>2 ways to handle authorization responses in desktop/mobile applications</strong> (i.e applications that don&#39;t run inside a browser):</p><ul><li><p><strong>Running a local HTTP server</strong>: this works well for desktop applications, but might be hard to implement in certain enterprise environments with strict firewall configurations.</p></li><li><p><strong>Registering an application-specific URI scheme</strong> (e.g: <code>myapp://</code>): this is the best approach... and pretty much the only option on most mobile operating systems, where the first option is not always possible, for security reasons.</p></li></ul><p>Since the first option is easier to implement, it&#39;s the one we will choose for this demo client:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Diagnostics;</div><div class="line"><span class="keyword">using</span> System.Net;</div><div class="line"><span class="keyword">using</span> System.Threading.Tasks;</div><div class="line"><span class="keyword">using</span> IdentityModel.OidcClient;</div><div class="line"><span class="keyword">using</span> <span class="keyword">static</span> IdentityModel.OidcConstants;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">OpenIddictClientDemo</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"Press any key to start the authentication process."</span>);</div><div class="line">            Console.ReadKey();</div><div class="line"></div><div class="line">            <span class="comment">// Create a local web server used to receive the authorization response.</span></div><div class="line">            <span class="keyword">using</span> <span class="keyword">var</span> listener = <span class="keyword">new</span> HttpListener();</div><div class="line">            listener.Prefixes.Add(<span class="string">"http://localhost:7890/"</span>);</div><div class="line">            listener.Start();</div><div class="line"></div><div class="line">            <span class="keyword">var</span> options = <span class="keyword">new</span> OidcClientOptions</div><div class="line">            &#123;</div><div class="line">                Authority = <span class="string">"https://localhost:44322/"</span>,</div><div class="line">                ClientId = <span class="string">"console_app"</span>,</div><div class="line">                LoadProfile = <span class="literal">false</span>,</div><div class="line">                RedirectUri = <span class="string">"http://localhost:7890/"</span>,</div><div class="line">                Scope = StandardScopes.OpenId</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> OidcClient(options);</div><div class="line">            <span class="keyword">var</span> state = <span class="keyword">await</span> client.PrepareLoginAsync();</div><div class="line"></div><div class="line">            <span class="comment">// Launch the system browser to initiate the authentication dance.</span></div><div class="line">            Process.Start(<span class="keyword">new</span> ProcessStartInfo</div><div class="line">            &#123;</div><div class="line">                FileName = state.StartUrl,</div><div class="line">                UseShellExecute = <span class="literal">true</span></div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="comment">// Wait for an authorization response to be posted to the local server.</span></div><div class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">var</span> context = <span class="keyword">await</span> listener.GetContextAsync();</div><div class="line">                context.Response.StatusCode = <span class="number">204</span>;</div><div class="line">                context.Response.Close();</div><div class="line"></div><div class="line">                <span class="keyword">var</span> result = <span class="keyword">await</span> client.ProcessResponseAsync(context.Request.Url.Query, state);</div><div class="line">                <span class="keyword">if</span> (result.IsError)</div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(<span class="string">"An error occurred: &#123;0&#125;"</span>, result.Error);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">else</span></div><div class="line">                &#123;</div><div class="line">                    Console.WriteLine(<span class="string">"\n\nClaims:"</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">foreach</span> (<span class="keyword">var</span> claim <span class="keyword">in</span> result.User.Claims)</div><div class="line">                    &#123;</div><div class="line">                        Console.WriteLine(<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>, claim.Type, claim.Value);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    Console.WriteLine();</div><div class="line">                    Console.WriteLine(<span class="string">"Access token:\n&#123;0&#125;"</span>, result.AccessToken);</div><div class="line"></div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Testing-the-authentication-process"><a href="#Testing-the-authentication-process" class="headerlink" title="Testing the authentication process"></a>Testing the authentication process</h2><p>For that, start the two applications (server and client). Once the client is started, press a key to start the authentication process. When doing so, the default browser will be launched and you&#39;ll be redirected to the authorization server. If you&#39;re not already logged in, you&#39;ll be immediately invited to authenticate using your Steam account:</p><img src="/2020/02/18/creating-an-openid-connect-server-proxy-with-openiddict-3-0-s-degraded-mode/steam.png" alt="steam.png"><p>After logging in, an authorization response will be returned to the client console, that will automatically send a token request to finish the process:</p><img src="/2020/02/18/creating-an-openid-connect-server-proxy-with-openiddict-3-0-s-degraded-mode/console.png" alt="console.png"><p>And voilà, you&#39;re now ready to create your first APIs! To accept the JWT bearer tokens issued by OpenIddict, don&#39;t forget to decorate your controllers/actions with:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[Authorize(AuthenticationSchemes = OpenIddictValidationAspNetCoreDefaults.AuthenticationScheme)]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      In this post, discover how to create a minimalist OIDC server proxy between Steam and your own APIs.
    
    </summary>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Forcing an old .NET application to support TLS 1.2 without recompiling it</title>
    <link href="https://kevinchalet.com/2019/04/11/forcing-an-old-net-application-to-support-tls-1-2-without-recompiling-it/"/>
    <id>https://kevinchalet.com/2019/04/11/forcing-an-old-net-application-to-support-tls-1-2-without-recompiling-it/</id>
    <published>2019-04-11T15:30:00.000Z</published>
    <updated>2019-04-11T15:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>As most servers are moving toward TLS 1.3 and removing TLS 1.0/1.1 support, examples of legacy .NET applications – compiled with an old version of the .NET Framework, like 4.0 or 4.5 – experiencing connectivity issues with TLS 1.2 servers are becoming more and more common, specially since installing a more recent version of the .NET Framework is not sufficient: <strong>it&#39;s the version used for compiling your project that actually matters</strong> when it comes to selecting the supported TLS versions during the TLS handshake.</p><p>To make migration a bit less painful, <a href="https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls" target="_blank" rel="external">Microsoft published a list of transport security best practices</a> that list a few solutions that help avoid handshake errors related to the use of legacy TLS versions that are no longer considered safe.</p><p><strong>One of the proposed solutions is to update your project to target .NET Framework 4.7</strong>: in this case, you&#39;ll have nothing else to do, as .NET 4.7 applications automatically default to whatever the operating system they run on offers and considers safe (which currently includes TLS 1.2 and will later include TLS 1.3).</p><p>Unfortunately, such an option requires re-compiling the application, which is not always feasible. Thankfully, you can also force an existing application to use the system default TLS versions without having to re-compile it (assuming it doesn&#39;t explicitly set the SSL/TLS versions it prefers via <code>ServicePointManager</code>).</p><p>The best practices paper lists a few options, but my favourite one is the one that consists in <strong>simply updating the configuration file associated with the application executable</strong>, as it&#39;s easy to do and doesn&#39;t impact anything else on the machine.</p><p>For that, <strong>locate the configuration file associated to the executable</strong> of the application you want to add TLS 1.2 support to: it&#39;s always named <code>[name of the executable].exe.config</code>. If there&#39;s no such file, create one. Once located or created, <strong>update its content to enable the compatibility switch required to support TLS 1.2</strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">runtime</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">AppContextSwitchOverrides</span> <span class="attr">value</span>=<span class="string">"Switch.System.Net.DontEnableSystemDefaultTlsVersions=false"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">runtime</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><div class="note tip"><p>If you&#39;re still using Windows 7, you&#39;ll also have to tweak the registry to enable TLS 1.2 support, as indicated on <a href="https://docs.microsoft.com/en-us/windows-server/security/tls/tls-registry-settings" target="_blank" rel="external">https://docs.microsoft.com/en-us/windows-server/security/tls/tls-registry-settings</a>.</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As most servers are moving toward TLS 1.3 and removing TLS 1.0/1.1 support, examples of legacy .NET applications – compiled with an old v
    
    </summary>
    
    
      <category term=".net" scheme="https://kevinchalet.com/tags/net/"/>
    
      <category term="tls" scheme="https://kevinchalet.com/tags/tls/"/>
    
      <category term="windows" scheme="https://kevinchalet.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>OpenIddict 1.0 and 2.0 general availability</title>
    <link href="https://kevinchalet.com/2018/11/01/openiddict-1-0-and-2-0-general-availability/"/>
    <id>https://kevinchalet.com/2018/11/01/openiddict-1-0-and-2-0-general-availability/</id>
    <published>2018-11-01T20:00:00.000Z</published>
    <updated>2018-11-01T19:36:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>I&#39;m very happy to announce that <strong>OpenIddict 1.0 and 2.0 final packages were pushed earlier today</strong> to <a href="https://www.nuget.org/profiles/openiddict" target="_blank" rel="external">NuGet.org</a> and are now officially available!</p><h2 id="What-changed-since-RC3"><a href="#What-changed-since-RC3" class="headerlink" title="What changed since RC3?"></a>What changed since RC3?</h2><h3 id="A-security-bug-was-fixed"><a href="#A-security-bug-was-fixed" class="headerlink" title="A security bug was fixed"></a>A security bug was fixed</h3><p>A few days ago, <a href="https://github.com/openiddict/openiddict-core/issues/682" target="_blank" rel="external"><strong>a vulnerability impacting application permissions was publicly reported</strong></a> by <a href="https://github.com/nurhat" target="_blank" rel="external">nurhat</a> on GitHub (many thanks to him!).</p><p>In a nutshell, <strong>scope permissions were not correctly enforced for public clients</strong> using the password flow and custom grant types (confidential clients or clients using the code or client credentials flows were not impacted).</p><p><strong>A fix was immediately added to the nightly builds and is present in the RTM release</strong>.</p><h3 id="Built-in-entity-caches-are-now-included"><a href="#Built-in-entity-caches-are-now-included" class="headerlink" title="Built-in entity caches are now included"></a>Built-in entity caches are now included</h3><p><strong>OpenIddict now comes with built-in entity caching</strong> to avoid having to send multiple requests to retrieve the same entities. Concretely, if your <code>AuthorizationController</code> uses APIs like <code>OpenIddictApplicationManager.FindByClientIdAsync(request.ClientId)</code>, the corresponding application will be directly retrieved from the cache and the resulting operation will be extremely cheap.</p><p>To ensure this feature works with non-thread-safe stores and stores that rely on context-affinity (like Entity Framework 6.x or Entity Framework Core), these built-in caches are scoped so that cached entities are not reused across requests.</p><p>While definitely not recommended, this feature can be disabled via the OpenIddict core options:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        options.DisableEntityCaching();</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><a id="more"></a><h3 id="The-event-model-was-slightly-reworked"><a href="#The-event-model-was-slightly-reworked" class="headerlink" title="The event model was slightly reworked"></a>The event model was slightly reworked</h3><p>Based on feedback, <strong>the event model used by the server and validation handlers was slightly reworked</strong> so that it&#39;s now more explicit whether next handlers are allowed to be invoked by OpenIddict or not.</p><p>Concretely, both <code>IOpenIddictServerEventHandler.HandleAsync()</code> and <code>IOpenIddictValidationEventHandler.HandleAsync()</code> now return an enum value indicating whether the other handlers can be invoked. Here&#39;s an example of the new syntax:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">public class PasswordGrantTypeEventHandler : IOpenIddictServerEventHandler&lt;HandleTokenRequest&gt;</div><div class="line">&#123;</div><div class="line">    public Task&lt;OpenIddictServerEventState&gt; HandleAsync(HandleTokenRequest notification)</div><div class="line">    &#123;</div><div class="line">        var request = notification.Context.Request;</div><div class="line">        if (!request.IsPasswordGrantType())</div><div class="line">        &#123;</div><div class="line">            // Allow other handlers to process the event.</div><div class="line">            return Task.FromResult(OpenIddictServerEventState.Unhandled);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Validate the user credentials.</div><div class="line">        // Note: to mitigate brute force attacks, you SHOULD strongly consider</div><div class="line">        // applying a key derivation function like PBKDF2 to slow down</div><div class="line">        // the password validation process. You SHOULD also consider</div><div class="line">        // using a time-constant comparer to prevent timing attacks.</div><div class="line">        if (request.Username != "alice@wonderland.com" || request.Password != "P@ssw0rd")</div><div class="line">        &#123;</div><div class="line">            notification.Context.Reject(</div><div class="line">                error: OpenIddictConstants.Errors.InvalidGrant,</div><div class="line">                description: "The specified credentials are invalid.");</div><div class="line"></div><div class="line">            // Don't allow other handlers to process the event.</div><div class="line">            return Task.FromResult(OpenIddictServerEventState.Handled);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Create a new ClaimsIdentity holding the user identity.</div><div class="line">        var identity = new ClaimsIdentity(</div><div class="line">            notification.Context.Scheme.Name,</div><div class="line">            OpenIddictConstants.Claims.Name,</div><div class="line">            OpenIddictConstants.Claims.Role);</div><div class="line"></div><div class="line">        // Add a "sub" claim containing the user identifier, and attach</div><div class="line">        // the "access_token" destination to allow OpenIddict to store it</div><div class="line">        // in the access token, so it can be retrieved from your controllers.</div><div class="line">        identity.AddClaim(OpenIddictConstants.Claims.Subject,</div><div class="line">            "71346D62-9BA5-4B6D-9ECA-755574D628D8",</div><div class="line">            OpenIddictConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">        identity.AddClaim(OpenIddictConstants.Claims.Name, "Alice",</div><div class="line">            OpenIddictConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">        // ... add other claims, if necessary.</div><div class="line">        var principal = new ClaimsPrincipal(identity);</div><div class="line"></div><div class="line">        var ticket = new AuthenticationTicket(principal, notification.Context.Scheme.Name);</div><div class="line">        ticket.SetScopes(OpenIddictConstants.Scopes.OfflineAccess);</div><div class="line">        notification.Context.Validate(ticket);</div><div class="line"></div><div class="line">        // Don't allow other handlers to process the event.</div><div class="line">        return Task.FromResult(OpenIddictServerEventState.Handled);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class RefreshTokenGrantTypeEventHandler : IOpenIddictServerEventHandler&lt;HandleTokenRequest&gt;</div><div class="line">&#123;</div><div class="line">    public async Task&lt;OpenIddictServerEventState&gt; HandleAsync(HandleTokenRequest notification)</div><div class="line">    &#123;</div><div class="line">        var request = notification.Context.Request;</div><div class="line">        if (!request.IsRefreshTokenGrantType())</div><div class="line">        &#123;</div><div class="line">            // Allow other handlers to process the event.</div><div class="line">            return OpenIddictServerEventState.Unhandled;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var scheme = notification.Context.Scheme.Name;</div><div class="line">        var principal = (await notification.Context.HttpContext.AuthenticateAsync(scheme))?.Principal;</div><div class="line"></div><div class="line">        var ticket = new AuthenticationTicket(principal, scheme);</div><div class="line">        notification.Context.Validate(ticket);</div><div class="line"></div><div class="line">        // Don't allow other handlers to process the event.</div><div class="line">        return OpenIddictServerEventState.Handled;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">        options.AddEventHandler&lt;PasswordGrantTypeEventHandler&gt;()</div><div class="line">               .AddEventHandler&lt;RefreshTokenGrantTypeEventHandler&gt;();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    .AddValidation();</div></pre></td></tr></table></figure><h2 id="What-package-s-should-I-reference"><a href="#What-package-s-should-I-reference" class="headerlink" title="What package(s) should I reference?"></a>What package(s) should I reference?</h2><p><strong>OpenIddict supports both ASP.NET Core 1.x and 2.x</strong> so if you&#39;re still on the former version, no need to hurry: both versions basically offer the same feature set, with only a few API differences. For clarity, the OpenIddict packages use the <code>1.x</code> pattern for the ASP.NET Core 1.x-compatible version and <code>2.x</code> for ASP.NET Core 2.x.</p><p>Here&#39;s the complete list of packages published as part of this release:</p><table><thead><tr><th style="text-align:center">ASP.NET Core version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">References the OpenIddict abstractions, core, server and validation packages.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.Abstractions</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the common managers/stores interfaces used by OpenIddict.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.Core</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the default managers implementations used by OpenIddict.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.5.1).</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework.Models</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the Entity Framework 6.x models.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore.Models</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the Entity Framework Core models.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.MongoDb</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the MongoDB 2.7.0 stores.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.MongoDb.Models</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the MongoDB 2.7.0 models.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.Mvc</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the OpenIddict/ASP.NET Core MVC integration components.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.Server</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the OpenIddict server services.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.Validation</td><td style="text-align:center"><strong>1.0.0</strong></td><td style="text-align:center">Contains the OpenIddict validation services.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">References the OpenIddict abstractions, core, server and validation packages.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.Abstractions</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the common managers/stores interfaces used by OpenIddict.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.Core</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the default managers implementations used by OpenIddict.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.6.1).</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework.Models</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the Entity Framework 6.x models.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore.Models</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the Entity Framework Core models.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.MongoDb</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the MongoDB 2.7.0 stores.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.MongoDb.Models</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the MongoDB 2.7.0 models.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.Mvc</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the OpenIddict/ASP.NET Core MVC integration components.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.Server</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the OpenIddict server services.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.Validation</td><td style="text-align:center"><strong>2.0.0</strong></td><td style="text-align:center">Contains the OpenIddict validation services.</td></tr></tbody></table><h2 id="Support-lifecycle"><a href="#Support-lifecycle" class="headerlink" title="Support lifecycle"></a>Support lifecycle</h2><p>Both OpenIddict 1.0 and 2.0 will be supported for as long as the ASP.NET Core version they are written for gets updates from Microsoft. You can find their <a href="https://www.microsoft.com/net/platform/support-policy" target="_blank" rel="external">support policy on Microsoft.com</a>.</p><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>While I&#39;ll probably mostly focus on improving OrchardCore&#39;s OpenID module (which is based on OpenIddict) during the next few weeks, OpenIddict itself will also get updates, including NHibernate 5 stores (that will likely be OpenIddict 2.0-only as NHibernate doesn&#39;t offer a <code>netstandard1.x</code> TFM that would be required to work with .NET Core 1.x).</p><p>Depending on the demand, stores for RavenDB or other databases might also be part of the next update. Don&#39;t hesitate to contact me if you&#39;d like to see a particular database supported in the next version.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I&amp;#39;m very happy to announce that &lt;strong&gt;OpenIddict 1.0 and 2.0 final packages were pushed earlier today&lt;/strong&gt; to &lt;a href=&quot;https://www.nuget.org/profiles/openiddict&quot;&gt;NuGet.org&lt;/a&gt; and are now officially available!&lt;/p&gt;&lt;h2 id=&quot;What-changed-since-RC3&quot;&gt;&lt;a href=&quot;#What-changed-since-RC3&quot; class=&quot;headerlink&quot; title=&quot;What changed since RC3?&quot;&gt;&lt;/a&gt;What changed since RC3?&lt;/h2&gt;&lt;h3 id=&quot;A-security-bug-was-fixed&quot;&gt;&lt;a href=&quot;#A-security-bug-was-fixed&quot; class=&quot;headerlink&quot; title=&quot;A security bug was fixed&quot;&gt;&lt;/a&gt;A security bug was fixed&lt;/h3&gt;&lt;p&gt;A few days ago, &lt;a href=&quot;https://github.com/openiddict/openiddict-core/issues/682&quot;&gt;&lt;strong&gt;a vulnerability impacting application permissions was publicly reported&lt;/strong&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/nurhat&quot;&gt;nurhat&lt;/a&gt; on GitHub (many thanks to him!).&lt;/p&gt;&lt;p&gt;In a nutshell, &lt;strong&gt;scope permissions were not correctly enforced for public clients&lt;/strong&gt; using the password flow and custom grant types (confidential clients or clients using the code or client credentials flows were not impacted).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;A fix was immediately added to the nightly builds and is present in the RTM release&lt;/strong&gt;.&lt;/p&gt;&lt;h3 id=&quot;Built-in-entity-caches-are-now-included&quot;&gt;&lt;a href=&quot;#Built-in-entity-caches-are-now-included&quot; class=&quot;headerlink&quot; title=&quot;Built-in entity caches are now included&quot;&gt;&lt;/a&gt;Built-in entity caches are now included&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;OpenIddict now comes with built-in entity caching&lt;/strong&gt; to avoid having to send multiple requests to retrieve the same entities. Concretely, if your &lt;code&gt;AuthorizationController&lt;/code&gt; uses APIs like &lt;code&gt;OpenIddictApplicationManager.FindByClientIdAsync(request.ClientId)&lt;/code&gt;, the corresponding application will be directly retrieved from the cache and the resulting operation will be extremely cheap.&lt;/p&gt;&lt;p&gt;To ensure this feature works with non-thread-safe stores and stores that rely on context-affinity (like Entity Framework 6.x or Entity Framework Core), these built-in caches are scoped so that cached entities are not reused across requests.&lt;/p&gt;&lt;p&gt;While definitely not recommended, this feature can be disabled via the OpenIddict core options:&lt;/p&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;services.AddOpenIddict()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddCore(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.DisableEntityCaching();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Highway to (DLL) Hell</title>
    <link href="https://kevinchalet.com/2018/10/07/highway-to-dll-hell/"/>
    <id>https://kevinchalet.com/2018/10/07/highway-to-dll-hell/</id>
    <published>2018-10-07T13:00:00.000Z</published>
    <updated>2018-10-07T13:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>It&#39;s no secret that <strong>I&#39;ve always been a huge fan of <a href="https://en.wikipedia.org/wiki/Windows_Media_Center" target="_blank" rel="external">Windows Media Center</a></strong>, probably the best digital/personal video recorder out there and definitely one of the most impressive Microsoft applications developed using the .NET Framework.</p><p>As an avid WMC user, I have built 3 <a href="https://en.wikipedia.org/wiki/Home_theater_PC" target="_blank" rel="external">HTPC machines</a> and recorded thousands of TV programs (movies, series, documentaries, etc.). As such, when Microsoft announced in May 2015 that Windows Media Center would no longer be developed (almost 6 year after disbanding the development team!) – and thus would not be part of Windows 10 – <strong>I refused to migrate to Windows 10</strong>, despite Microsoft&#39;s offers encouraging users to upgrade their OS for free.</p><p>The fact Windows Media Center was not available on Windows 10 – even as a paid feature like it was on Windows 8.x – <strong>was a major blocker for many users</strong>. To work around this limitation, <a href="https://forums.mydigitallife.net/threads/discussion-patch-wmc-to-run-on-windows-10-final-possible-alternatives.61061/" target="_blank" rel="external">enthusiasts decided to create an unofficial port of Windows Media Center for Windows 10</a>.</p><p>While unofficial, the port worked just fine. <strong>But over time, Microsoft started to update some of the system components Windows Media Center relied on</strong>, causing annoying bugs. For instance, the introduction of breaking changes in Windows 10 1803 <a href="https://forums.mydigitallife.net/threads/discussion-patch-wmc-to-run-on-windows-10-final-possible-alternatives.61061/page-436#post-1424922" target="_blank" rel="external">made watching a <code>.wtv</code> file (WMC&#39;s TV file format) recorded on Windows 7 completely impossible</a>.</p><p>While investigating, I discovered that the issue was caused by a change in <code>MSVidCtl.dll</code>, the system-wide DLL containing the DirectShow components needed by WMC for all its TV-related features. After replacing the faulty DLL by an older version, WMC was able to play old recordings like a charm.</p><p>This phenomenom, that occurs every time API or functional changes are introduced in a DLL a program depends on, has a name: <a href="https://en.wikipedia.org/wiki/DLL_Hell" target="_blank" rel="external"><strong>DLL Hell</strong></a>.</p><a id="more"></a><h2 id="You-shall-not-replace-system-DLLs"><a href="#You-shall-not-replace-system-DLLs" class="headerlink" title="You shall not replace system DLLs"></a>You shall not replace system DLLs</h2><p>The thing is, <strong>replacing a system-owned DLL is far from ideal</strong>: while it solves the initial problem quite easily, it&#39;s not future-proof as any major Windows update will end up overwriting the replaced DLL. The same thing will happen if the user (or the system on his behalf) runs the <code>sfc.exe</code> utility, that will detect the modification and revert it. It may also cause issues in other applications depending on new APIs that are only part of the newest version of the replaced DLL.</p><p>Since replacing a system DLL was not a good option, <strong>I eventually opted for the other approach: forcing Windows Media Center to load its own version of <code>MSVidCtl.dll</code> instead of the global one</strong> stored in <code>System32</code>.</p><p>Typically, you&#39;d achieve that by simply dropping the DLL in the application&#39;s root folder (in our case, <code>C:\Windows\ehome</code>). This usually works because the DLL loader first looks for the DLL <a href="https://docs.microsoft.com/en-us/windows/desktop/dlls/dynamic-link-library-search-order" target="_blank" rel="external">in the directory the application was loaded from</a>.</p><h2 id="Enter-the-marvelous-world-of-COM"><a href="#Enter-the-marvelous-world-of-COM" class="headerlink" title="Enter the marvelous world of COM"></a>Enter the marvelous world of COM</h2><p><strong>In this case, this didn&#39;t work</strong>: Windows Media Center kept loading the <code>MSVidCtl</code> DLL contained in the <code>System32</code> folder. Why? Because <code>MSVidCtl.dll</code> is actually a very special DLL: it&#39;s a <a href="https://en.wikipedia.org/wiki/Component_Object_Model" target="_blank" rel="external">Component Object Model</a> DLL. Unlike other DLLs, <strong>COM DLLs are almost never loaded via <code>LoadLibrary</code></strong> (at least, not directly): instead, they are assigned a GUID that corresponds to a special entry in the registry that contains the absolute path of the COM DLL. When an application wants to instantiate a COM component, it usually imports <code>Ole32.dll</code> and calls <code>CoCreateInstance</code> with the unique GUID: the COM loader locates the entry in the registry and loads the DLL from the associated path.</p><p>Since the path is absolute, trying to add a <code>MSVidCtl.dll</code> in the <code>ehome</code> folder was completely pointless: the loader would never look for it.</p><h2 id="DLL-redirection-and-side-by-side-assemblies"><a href="#DLL-redirection-and-side-by-side-assemblies" class="headerlink" title="DLL redirection and side-by-side assemblies"></a>DLL redirection and side-by-side assemblies</h2><p>To mitigate this issue, Microsoft offers 2 mechanisms that allow overriding the default search order used by Windows&#39; DLL loader even when the specified path is absolute:</p><ul><li><p><a href="https://docs.microsoft.com/en-us/windows/desktop/dlls/dynamic-link-library-redirection" target="_blank" rel="external">DLL redirection</a>: by creating an empty <code>.local</code> file/folder whose name is the same as the executable (in our case, <code>ehshell.exe.local</code>), one can easily force the OS to load DLLs from the application folder: <strong>it&#39;s dead simple and works flawlessly, even for COM DLLs</strong>. <strong>Unfortunately, it has a major caveat: it doesn&#39;t work when the application has an application manifest</strong> (there&#39;s a registry switch to override that but turning it on would impact the entire system, certainly not a good thing to do).</p></li><li><p><a href="https://en.wikipedia.org/wiki/Side-by-side_assembly" target="_blank" rel="external">Side-by-side assemblies</a>: first introduced in Windows 98 Second Edition, it allows an application to define its dependencies in its application manifest (and explicitly opt for a specific DLL version). DLL dependencies can be either stored in the same directory as the application (in this case, they are known as private assemblies) or in a special shared directory called <code>winsxs</code>. <strong>Starting with Windows XP, it also allows defining registration-free COM components</strong>: unlike classical COM components, they don&#39;t have an entry in the registry and thus are not registered globally. Instead, they are defined in the application manifest: when the COM loader finds an entry in the manifest for the specified GUID, it loads the corresponding DLL and doesn&#39;t apply the default registry loading routine.</p></li></ul><div class="note tip"><p>An application manifest is a special XML file that is either embedded in the executable or provided separately and that defines some core aspects of the application (e.g does it need to be executed with administrator rights?).</p></div><p>In our case, the first option is sadly not applicable: all the Windows Media Center executables come with an embedded manifest used to enable <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/mt846517%28v=vs.85%29.aspx" target="_blank" rel="external">the DPI-aware mode</a>. For instance, here&#39;s the manifest embedded in <code>ehshell.exe</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</div><div class="line"><span class="comment">&lt;!-- Copyright (c) Microsoft Corporation --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span> <span class="attr">xmlns:asmv3</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span> <span class="attr">manifestVersion</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">"Microsoft.Windows.MultiMedia.EhShell"</span> <span class="attr">processorArchitecture</span>=<span class="string">"amd64"</span> <span class="attr">version</span>=<span class="string">"5.1.0.0"</span> <span class="attr">type</span>=<span class="string">"win32"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Windows Media Center Shell<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">asmv3:windowsSettings</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/SMI/2005/WindowsSettings"</span>&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">dpiAware</span>&gt;</span>true<span class="tag">&lt;/<span class="name">dpiAware</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">asmv3:windowsSettings</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Identify the application security requirements. --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">trustInfo</span> <span class="attr">xmlns</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">security</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">requestedPrivileges</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">requestedExecutionLevel</span></span></div><div class="line">          <span class="attr">level</span>=<span class="string">"asInvoker"</span></div><div class="line">          <span class="attr">uiAccess</span>=<span class="string">"false"</span>/&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">requestedPrivileges</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">security</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">trustInfo</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></div></pre></td></tr></table></figure><p>Removing the manifest to make the <code>.local</code> approach work would be very easy, but we&#39;d loose all the benefits of the DPI-aware mode: definitely not an option.</p><h2 id="Defining-registration-free-COM-components"><a href="#Defining-registration-free-COM-components" class="headerlink" title="Defining registration-free COM components"></a>Defining registration-free COM components</h2><p>While powerful, defining registration-free COM components is far from being trivial and is rather error-prone.</p><h3 id="Extracting-the-TypeLib-tables"><a href="#Extracting-the-TypeLib-tables" class="headerlink" title="Extracting the TypeLib tables"></a>Extracting the <code>TypeLib</code> tables</h3><p>First, <a href="https://ingeno.io/2016/09/registration-free-com-component-activation/" target="_blank" rel="external">you need to extract the <code>TypeLib</code> table from the COM DLL you want to use</a>. For convenience, it&#39;s almost always embedded as a binary resource in the COM DLLs themselves. To extract these resources, you can use the popular <a href="http://www.angusj.com/resourcehacker/" target="_blank" rel="external">Resource Hacker</a> tool. In some cases, a single COM DLL might expose multiple <code>TypeLib</code> tables: you&#39;ll have to extract them all and merge them later. <code>MSVidCtl.dll</code> is one of them:</p><img src="/2018/10/07/highway-to-dll-hell/resource-hacker.png" alt="resource-hacker.png"><h3 id="Generating-assembly-manifests"><a href="#Generating-assembly-manifests" class="headerlink" title="Generating assembly manifests"></a>Generating assembly manifests</h3><p>Then, you need to use the Manifest Tool coming with Visual Studio to generate the manifest files from the COM definitions.</p><p>For that, open a VS command prompt and run the following commands:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mt -tlb:TYPELIB1.bin -dll:MSVidCtl.dll -out:Manifest1.manifest</div><div class="line">mt -tlb:TYPELIB2.bin -dll:MSVidCtl.dll -out:Manifest2.manifest</div></pre></td></tr></table></figure><h3 id="Merging-assembly-manifests"><a href="#Merging-assembly-manifests" class="headerlink" title="Merging assembly manifests"></a>Merging assembly manifests</h3><p>In a perfect world, you&#39;d also use <code>mt.exe</code> to merge the 2 manifests into a single one:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mt -manifest:Manifest1.manifest -manifest:Manifest2.manifest -out:Microsoft.Windows.Video.Control.manifest</div></pre></td></tr></table></figure><p>Unfortunately, <strong>the two manifests actually contain multiple elements with the same <code>TypeLib</code> identifier</strong>, making them impossible to merge automatically:</p><blockquote><p>Manifest2.manifest : manifest authoring error c1010001: Values of attribute &quot;tlbid&quot; not equal in different manifest snippets.</p></blockquote><p>To work around this limitation, <strong>I manually merged the two XML files using Notepad++ and wrote a tiny C# script to remove the duplicate entries</strong>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="string">@"[path pointing to the merged XML manifest file]"</span>;</div><div class="line"><span class="keyword">var</span> document = XDocument.Load(path);</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> stub <span class="keyword">in</span> document.Root.Elements(XName.Get(<span class="string">"comInterfaceExternalProxyStub"</span>, <span class="string">"urn:schemas-microsoft-com:asm.v1"</span>)).ToList())</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> name = stub.Attribute(<span class="string">"name"</span>);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(name?.Value))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> duplicates = document.Root.Elements(XName.Get(<span class="string">"comInterfaceExternalProxyStub"</span>, <span class="string">"urn:schemas-microsoft-com:asm.v1"</span>))</div><div class="line">        .Where(element =&gt; element.Attributes()</div><div class="line">            .Any(attribute =&gt; attribute.Name == <span class="string">"name"</span> &amp;&amp; attribute.Value == name.Value))</div><div class="line">        .ToArray();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (duplicates.Length &gt; <span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        duplicates[<span class="number">0</span>].SetAttributeValue(<span class="string">"tlbid"</span>, <span class="literal">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">1</span>; index &lt; duplicates.Length; index++)</div><div class="line">        &#123;</div><div class="line">            duplicates[index].Remove();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.Save(path);</div></pre></td></tr></table></figure><h3 id="Fixing-the-resulting-manifest"><a href="#Fixing-the-resulting-manifest" class="headerlink" title="Fixing the resulting manifest"></a>Fixing the resulting manifest</h3><p>This is not done yet: <strong>if you try to use the resulting manifest as-is, Windows Media Center will simply crash</strong> as the <code>mt</code> utility misses an important part of the COM definitions: <a href="https://msdn.microsoft.com/en-us/library/ms809971.aspx" target="_blank" rel="external">the threading model of the COM classes</a>.</p><p>The good news is that <strong>this information can be retrived from the registry of a Windows 7 machine</strong> (or on Windows 10 pre-1803). To make that process much easier, I wrote a second tiny script updating the manifest from the data found in the registry:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="string">@"[path pointing to the merged XML manifest file]"</span>;</div><div class="line"><span class="keyword">var</span> document = XDocument.Load(path);</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> file <span class="keyword">in</span> document.Root.Elements(XName.Get(<span class="string">"file"</span>, <span class="string">"urn:schemas-microsoft-com:asm.v1"</span>)))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> component <span class="keyword">in</span> file.Elements(XName.Get(<span class="string">"comClass"</span>, <span class="string">"urn:schemas-microsoft-com:asm.v1"</span>)))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> id = component.Attribute(<span class="string">"clsid"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> root = Registry.ClassesRoot.OpenSubKey(<span class="string">"CLSID"</span>))</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> clsid = root.OpenSubKey(id.Value))</div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> ipc = clsid?.OpenSubKey(<span class="string">"InprocServer32"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> model = ipc?.GetValue(<span class="string">"ThreadingModel"</span>).ToString();</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(model))</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            component.SetAttributeValue(<span class="string">"threadingModel"</span>, model);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">document.Save(path);</div><div class="line"></div></pre></td></tr></table></figure><p>After cleaning the XML manifest a bit, here&#39;s what I ended up with:</p><figure class="highlight xml"><figcaption><span>Microsoft.Windows.Video.Control.manifest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">"urn:schemas-microsoft-com:asm.v1"</span> <span class="attr">manifestVersion</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">"Microsoft.Windows.Video.Control"</span> <span class="attr">version</span>=<span class="string">"1.0.0.0"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">file</span> <span class="attr">name</span>=<span class="string">"MSVidCtl.dll"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;1C15D484-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Analog TV Tuner Device Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;A2E3074E-6C3D-11D3-B653-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control BDA Tuner Device Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;37B0353C-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control File Playback Device Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;011B3619-FE63-4814-8A84-15A194CE9CE3&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MSVidWebDVD Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;FA7C375B-66A7-4280-879D-FD459C84BB02&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MSVidWebDVDAdm Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;37B03543-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Video Renderer(DX7/8) Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;24DC3975-09BF-4231-8655-3EE71F43837D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Video Renderer 9(DX9) Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C45268A2-FA81-4E19-B1E3-72EDBD60AEDA&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Enhanced Video Renderer(DX10) Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;37B03544-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Audio Renderer Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;4A5869CF-929D-4040-AE03-FCAFC5B9CD42&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Stream Buffer Engine Sink Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;9E77AAC4-35E5-42A1-BDC2-8F3FF399847C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Stream Buffer Engine Sink Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;AD8E510D-217F-409B-8076-29C5E73B98E8&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Stream Buffer Engine Playback Device Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;FD351EA1-4173-4AF4-821D-80D4AE979048&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Stream Buffer Engine V2 Playback Device Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;BB530C63-D9DF-4B49-9439-63453962E598&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Encoder"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;5740A302-EF0B-45CE-BF3B-4470A14A8980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control iTV Capture"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;9E797ED0-5253-4243-A9B7-BD06C58F8EF3&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control iTV Playback"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;86151827-E47B-45EE-8421-D10E6E690979&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Closed Captions Analysis"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;7F9CB14D-48E4-43B6-9346-1AEBC39C64D3&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Standard Closed Captioning"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;92ED88BF-879E-448F-B6B6-A385BCEB846D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control CCSI Closed Captioning"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;334125C0-77E5-11D3-B653-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Standard Data Services for Broadcast IP through NDIS stack"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0149EEDF-D08F-4142-8D73-D23903D21E90&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Encoder"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CD6-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Analog Capture to Data Services"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;38F03426-E83B-4E68-B65B-DCAE73304838&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Data Services to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0429EC6E-1144-4BED-B88B-2FB9899A4A3D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for DataServices To XDS"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;3540D440-5B1D-49CB-821A-E84B8CF065A7&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for TV Tuner to XDS"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;B0EDF163-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CCC-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Input Device Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CCD-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Output Device Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CCE-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Video Renderer Device Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CCF-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Audio Renderer Device Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C5702CD0-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Feature Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;2764BCE5-CC39-11D2-B639-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Generic Composition Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;E18AF75A-08AF-11D3-B64A-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Analog Capture to Overlay Mixer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;267DB0B3-55E3-4902-949B-DF8F5CEC0191&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for WebDVD to Overlay Mixer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8D04238E-9FD1-41C6-8DE3-9E1EE309E935&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for WebDVD to Audio Renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;6AD28EE1-5002-4E71-AAF7-BD077907B1A4&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Mpeg2 Decoder to Closed Captioning"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;9F50E8B1-9530-4DDC-825E-1AF81D47AED6&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Analog Capture to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;ABE40035-27C3-4A2F-8153-6624471608AF&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Digital Capture to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;92B94828-1AF7-4E6E-9EBF-770657F77AF5&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for iTV to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;3EF76D68-8661-4843-8B8F-C37163D8C9CE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for CCA to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;A0B9B497-AFBC-45AD-A8A6-9B077C40D4F2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Encoder to Stream Buffer Sink"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;B401C5EB-8457-427F-84EA-A4D2363364B0&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for File Playback to Video Renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;CC23F537-18D4-4ECE-93BD-207A84726979&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for File Playback to Audio Renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;28953661-0231-41DB-8986-21FF4388EE9B&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for TV Tuner to Encoder"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;3C4708DC-B181-46A8-8DA8-4AB0371758CD&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for SBE Source to Video renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;942B7909-A28E-49A1-A207-34EBCBCB4B3B&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for TV Tuner to CCA"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;73D14237-B9DB-4EFA-A6DD-84350421FB2F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Digital Capture to CCA"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;5D8E73F7-4989-4AC8-8A98-39BA0D325302&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Digital Capture to ITV"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;2291478C-5EE3-4BEF-AB5D-B5FF2CF58352&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Stream Buffer Source to ITV"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;9193A8F9-0CBA-400E-AA97-EB4709164576&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for Stream Buffer Source to CC"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;991DA7E5-953F-435B-BE5E-B92A05EDFC42&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Stream Buffer Source to Generic Sink Composition Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C4BF2784-AE00-41BA-9828-9C953BD3C54A&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for CC to Video Renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;D76334CA-D89E-4BAF-86AB-DDB59372AFC2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MS Video Control Custom Composition for CC to Audio Renderer"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;577FAA18-4518-445E-8F70-1473F8CF4BA4&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MSEventBinder Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;CAAFDD83-CEFC-4E3D-BA03-175F17A24F91&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"MSVidStreamBufferRecordingControl"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;CB4276E6-7D5F-4CF1-9727-629C5E6DB6AE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"Automation compliant scalable rectangle Class"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;6E40476F-9C49-4C3E-8BB9-8587958EFF74&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;30997F7D-B3B5-4A1C-983A-1FE8098CB77D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;AC1972F2-138A-4CA3-90DA-AE51112EDA28&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;95F4820B-BB3A-4E2D-BC64-5B817BC2C30E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;1990D634-1A5E-4071-A34A-53AAFFCE9F36&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;7748530B-C08A-47EA-B24C-BE8695FF405F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;87EB890D-03AD-4E9D-9866-376E5EC572ED&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base interface to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;D02AAC50-027E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"SystemTuningSpace Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;5FFDC5E6-B83A-4B55-B6E8-C69E765FE9DB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base tuning space i/f to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;CC829A2F-3365-463F-AF13-81DBB6F3A555&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Channel ID Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;A2E30750-6C3D-11D3-B653-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ATSC Digital Broadcast Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;D9BB4CEE-B87A-47F1-AC92-B08D9C7813FC&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Digital Cable Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8A674B4C-1F63-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Analog Radio Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;F9769A06-7ACA-4E39-9CFB-97BB35F0E77E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Auxiliary Inputs Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8A674B4D-1F63-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Analog TV Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C6B14B32-76AA-4A86-A7AC-5C79AAF58DA7&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;B64016F3-C9A2-4066-96F0-BD9563314726&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB Satellite Tuning Space Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;A1A2B1C4-0E3A-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Component Types Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;823535A0-0318-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ComponentType Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;1BE49F30-0E1B-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"LanguageComponentType Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;418008F3-CF67-4668-9628-10DC52BE1D08&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"MPEG2ComponentType Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;A8DCF3D5-0780-4EF4-8A83-2CFFAACB8ACE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ATSCComponentType Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;809B6661-94C4-49E6-B6EC-3F0F862215AA&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Components Collection Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;59DC47A8-116C-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Component Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;055CB2D7-2969-45CD-914B-76890722F112&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"MPEG2 Component Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;28AB0005-E845-4FFA-AA9B-F4665236141C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Analog Audio Component Class"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;B46E0D38-AB35-4A06-A137-70576B01B39F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base tune request i/f to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;3A9428A7-31A4-45E9-9EFB-E055BF7BB3DB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Channel Tune Request"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0369B4E5-45B6-11D3-B650-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Channel Tune Request"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0369B4E6-45B6-11D3-B650-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ATSC Channel Tune Request"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;26EC0B63-AA90-458A-8DF4-5659F2C8A18A&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Digital Cable Channel Tune Request"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0955AC62-BF2E-4CBA-A2B9-A63F772D46CF&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose mpeg2 request i/f to VB"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;2C63E4EB-4CEA-41B8-919C-E947EA19A77C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Factory for creating IMPEG2TuneRequest"</span> <span class="attr">threadingModel</span>=<span class="string">"Apartment"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0888C883-AC4F-4943-B516-2C38D9B34562&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base locator i/f to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;6E50CC0D-C19B-4BF6-810B-5BD60761F5CC&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"dummy class to expose base digital locator i/f to VB"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;49638B91-48AB-48B7-A47A-7D0E75A08EDE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Analog Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8872FF1B-98FA-4D7A-8D93-C9F1055F85BB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ATSC Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;03C06416-D127-407A-AB4C-FDD279ABBE5D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Digital Cable Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;9CD64701-BDF3-4D14-8E03-F12983D86664&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB-Terrestrial Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;EFE3FA02-45D7-4920-BE96-53FA7F35B0E6&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB-Terrestrial 2 Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;1DF7D126-4050-47F0-A7CF-4C4CA9241333&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB-Satellite Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C531D9FD-9685-4028-8B68-6E1232079F1E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB-Cable Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;6504AFED-A629-455C-A7F1-04964DEA5CC4&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"ISDB-Satellite Locator"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;15D6504A-5494-499C-886C-973C9E53B9F1&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DVB Tune Request"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8A674B49-1F63-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Create property bag backed by registry"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;0B3FFB92-0919-4934-9D5B-619C719D0202&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"DShow Broadcast Event Service Object"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;6438570B-0C08-4A25-9504-8012BB4D50CF&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"BDA ITuner Marshaling utility object"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;E77026B0-B97F-4CBB-B7FB-F4F03AD69F11&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Utility object for Tuning Model Object Xml deserialization or serialization"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;C20447FC-EC60-475E-813F-D2B0A6DECEFE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Extensible Eventing Service object"</span> <span class="attr">threadingModel</span>=<span class="string">"Both"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">comClass</span> <span class="attr">clsid</span>=<span class="string">"&#123;8E8A07DA-71F8-40C1-A929-5E3A868AC2C6&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">description</span>=<span class="string">"Eventing Service object(used for unmarshal)"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">typelib</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">helpdir</span>=<span class="string">""</span> <span class="attr">flags</span>=<span class="string">"HASDISKIMAGE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">typelib</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">helpdir</span>=<span class="string">""</span> <span class="attr">flags</span>=<span class="string">"HASDISKIMAGE"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"_IMSVidCtlEvents"</span> <span class="attr">iid</span>=<span class="string">"&#123;B0EDF164-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020420-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAnalogTuner2"</span> <span class="attr">iid</span>=<span class="string">"&#123;37647BF7-3DDE-4CC8-A4DC-0D534D3D0037&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAnalogTuner"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D47E-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidTuner"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D47D-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVideoInputDevice"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D47F-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidInputDevice"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B0353D-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidDevice"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D47C-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;07DDC146-FC3D-11D2-9D8C-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;061C6E30-E622-11D2-9493-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumGUID"</span> <span class="attr">iid</span>=<span class="string">"&#123;0002E000-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0002E000-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumMoniker"</span> <span class="attr">iid</span>=<span class="string">"&#123;00000102-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00000102-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMoniker"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000000F-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000000F-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IPersistStream"</span> <span class="attr">iid</span>=<span class="string">"&#123;00000109-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00000109-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IPersist"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000010C-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000010C-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IStream"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000000C-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000000C-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ISequentialStream"</span> <span class="attr">iid</span>=<span class="string">"&#123;0C733A30-2A1C-11CE-ADE5-00AA0044773D&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0C733A30-2A1C-11CE-ADE5-00AA0044773D&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IBindCtx"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000000E-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000000E-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IRunningObjectTable"</span> <span class="attr">iid</span>=<span class="string">"&#123;00000010-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00000010-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumString"</span> <span class="attr">iid</span>=<span class="string">"&#123;00000101-0000-0000-C000-000000000046&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00000101-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IComponentTypes"</span> <span class="attr">iid</span>=<span class="string">"&#123;0DC13D4A-0313-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumComponentTypes"</span> <span class="attr">iid</span>=<span class="string">"&#123;8A674B4A-1F63-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;8A674B4A-1F63-11D3-B64C-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IComponentType"</span> <span class="attr">iid</span>=<span class="string">"&#123;6A340DC0-0311-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ILocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;286D7F89-760C-4F89-80C4-66841D2507AA&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IComponents"</span> <span class="attr">iid</span>=<span class="string">"&#123;39A48091-FFFE-4182-A161-3FF802640E26&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumComponents"</span> <span class="attr">iid</span>=<span class="string">"&#123;2A6E2939-2595-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;2A6E2939-2595-11D3-B64C-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IComponent"</span> <span class="attr">iid</span>=<span class="string">"&#123;1A5576FC-0E19-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAnalogTunerEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D486-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidTunerEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D485-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidInputDeviceEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B0353E-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidGraphSegment"</span> <span class="attr">iid</span>=<span class="string">"&#123;238DEC54-ADEB-4005-A349-F772B9AFEBC4&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;238DEC54-ADEB-4005-A349-F772B9AFEBC4&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumFilters"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86893-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86893-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IBaseFilter"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86895-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86895-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMediaFilter"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86899-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86899-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IReferenceClock"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86897-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86897-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumPins"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86892-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86892-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IPin"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A86891-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A86891-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumMediaTypes"</span> <span class="attr">iid</span>=<span class="string">"&#123;89C31040-846B-11CE-97D3-00AA0055595A&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;89C31040-846B-11CE-97D3-00AA0055595A&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IFilterGraph"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A8689F-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A8689F-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidGraphSegmentContainer"</span> <span class="attr">iid</span>=<span class="string">"&#123;3DD2903D-E0AA-11D2-B63A-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;3DD2903D-E0AA-11D2-B63A-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IGraphBuilder"</span> <span class="attr">iid</span>=<span class="string">"&#123;56A868A9-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;56A868A9-0AD4-11CE-B03A-0020AF0BA770&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumMSVidGraphSegment"</span> <span class="attr">iid</span>=<span class="string">"&#123;3DD2903E-E0AA-11D2-B63A-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;3DD2903E-E0AA-11D2-B63A-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFilePlayback2"</span> <span class="attr">iid</span>=<span class="string">"&#123;2F7E44AF-6E52-4660-BC08-D8D542587D72&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFilePlayback"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03539-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidPlayback"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03538-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFilePlaybackEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B0353A-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidPlaybackEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B0353B-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidWebDVD"</span> <span class="attr">iid</span>=<span class="string">"&#123;CF45F88B-AC56-4EE2-A73A-ED04E2885D3C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidRect"</span> <span class="attr">iid</span>=<span class="string">"&#123;7F5000A6-A440-47CA-8ACC-C0E75531A2C2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;7F5000A6-A440-47CA-8ACC-C0E75531A2C2&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidWebDVDEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;B4F7A674-9B83-49CB-A357-C63B871BE958&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidWebDVDAdm"</span> <span class="attr">iid</span>=<span class="string">"&#123;B8BE681A-EB2C-47F0-B415-94D5452F0E05&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVideoRenderer2"</span> <span class="attr">iid</span>=<span class="string">"&#123;6BDD5C1E-2810-4159-94BC-05511AE8549B&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVideoRenderer"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03540-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidOutputDevice"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03546-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IVMRImageCompositor"</span> <span class="attr">iid</span>=<span class="string">"&#123;7A4FB5AF-479F-4074-BB40-CE6722E43C82&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;7A4FB5AF-479F-4074-BB40-CE6722E43C82&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IVMRMixerBitmap"</span> <span class="attr">iid</span>=<span class="string">"&#123;1E673275-0257-40AA-AF20-7C608D4A0428&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;1E673275-0257-40AA-AF20-7C608D4A0428&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IVMRSurfaceAllocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;31CE832E-4484-458B-8CCA-F4D7E3DB0B52&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;31CE832E-4484-458B-8CCA-F4D7E3DB0B52&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IVMRSurfaceAllocatorNotify"</span> <span class="attr">iid</span>=<span class="string">"&#123;AADA05A8-5A4E-4729-AF0B-CEA27AED51E2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;AADA05A8-5A4E-4729-AF0B-CEA27AED51E2&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVideoRendererEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03545-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidOutputDeviceEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;2E6A14E2-571C-11D3-B652-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidDeviceEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D480-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVMR9"</span> <span class="attr">iid</span>=<span class="string">"&#123;D58B0015-EBEF-44BB-BBDD-3F3699D76EA1&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidEVR"</span> <span class="attr">iid</span>=<span class="string">"&#123;15E496AE-82A8-4CF9-A6B6-C561DC60398F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMFVideoPresenter"</span> <span class="attr">iid</span>=<span class="string">"&#123;29AFF080-182A-4A5D-AF3B-448F3A6346CB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;29AFF080-182A-4A5D-AF3B-448F3A6346CB&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMFClockStateSink"</span> <span class="attr">iid</span>=<span class="string">"&#123;F6696E82-74F7-4F3D-A178-8A5E09C3659F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;F6696E82-74F7-4F3D-A178-8A5E09C3659F&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMFVideoMediaType"</span> <span class="attr">iid</span>=<span class="string">"&#123;B99F381F-A8F9-47A2-A5AF-CA3A225A3890&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;B99F381F-A8F9-47A2-A5AF-CA3A225A3890&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMFMediaType"</span> <span class="attr">iid</span>=<span class="string">"&#123;44AE0FA8-EA31-4109-8D2E-4CAE4997C555&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;44AE0FA8-EA31-4109-8D2E-4CAE4997C555&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMFAttributes"</span> <span class="attr">iid</span>=<span class="string">"&#123;2CD2D921-C447-44A7-A13C-4ADABFC247E3&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;2CD2D921-C447-44A7-A13C-4ADABFC247E3&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IStorage"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000000B-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000000B-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumSTATSTG"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000000D-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000000D-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IRecordInfo"</span> <span class="attr">iid</span>=<span class="string">"&#123;0000002F-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;0000002F-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITypeInfo"</span> <span class="attr">iid</span>=<span class="string">"&#123;00020401-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020401-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITypeComp"</span> <span class="attr">iid</span>=<span class="string">"&#123;00020403-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020403-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITypeLib"</span> <span class="attr">iid</span>=<span class="string">"&#123;00020402-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020402-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidEVREvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;349ABB10-883C-4F22-8714-CECAEEE45D62&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAudioRenderer"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B0353F-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAudioRendererEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03541-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidGenericSink2"</span> <span class="attr">iid</span>=<span class="string">"&#123;6B5A28F3-47F1-4092-B168-60CABEC08F1C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidGenericSink"</span> <span class="attr">iid</span>=<span class="string">"&#123;6C29B41D-455B-4C33-963A-0D28E5E555EA&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSink3"</span> <span class="attr">iid</span>=<span class="string">"&#123;4F8721D7-7D59-4D8B-99F5-A77775586BD5&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSink2"</span> <span class="attr">iid</span>=<span class="string">"&#123;2CA9FC63-C131-4E5A-955A-544A47C67146&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSink"</span> <span class="attr">iid</span>=<span class="string">"&#123;159DBB45-CD1B-4DAB-83EA-5CB1F4F21D07&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferRecordingControl"</span> <span class="attr">iid</span>=<span class="string">"&#123;160621AA-BBBC-4326-A824-C395AEBC6E74&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSinkEvent4"</span> <span class="attr">iid</span>=<span class="string">"&#123;1B01DCB0-DAF0-412C-A5D1-590C7F62E2B8&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSinkEvent3"</span> <span class="attr">iid</span>=<span class="string">"&#123;735AD8D5-C259-48E9-81E7-D27953665B23&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSinkEvent2"</span> <span class="attr">iid</span>=<span class="string">"&#123;3D7A5166-72D7-484B-A06F-286187B80CA1&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSinkEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;F798A36B-B05B-4BBE-9703-EAEA7D61CD51&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSource"</span> <span class="attr">iid</span>=<span class="string">"&#123;EB0C8CF9-6950-4772-87B1-47D11CF3A02F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSource2"</span> <span class="attr">iid</span>=<span class="string">"&#123;E4BA9059-B1CE-40D8-B9A0-D4EA4A9989D3&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSourceEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;50CE8A7D-9C28-4DA8-9042-CDFA7116F979&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSourceEvent2"</span> <span class="attr">iid</span>=<span class="string">"&#123;7AEF50CE-8E22-4BA8-BC06-A92A458B4EF2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferSourceEvent3"</span> <span class="attr">iid</span>=<span class="string">"&#123;CEABD6AB-9B90-4570-ADF1-3CE76E00A763&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidStreamBufferV2SourceEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;49C771F9-41B2-4CF7-9F9A-A313A8F6027E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidEncoder"</span> <span class="attr">iid</span>=<span class="string">"&#123;C0020FD4-BEE7-43D9-A495-9F213117103D&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFeature"</span> <span class="attr">iid</span>=<span class="string">"&#123;37B03547-A4C8-11D2-B634-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidClosedCaptioning3"</span> <span class="attr">iid</span>=<span class="string">"&#123;C8638E8A-7625-4C51-9366-2F40A9831FC0&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidClosedCaptioning2"</span> <span class="attr">iid</span>=<span class="string">"&#123;E00CB864-A029-4310-9987-A873F5887D97&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidClosedCaptioning"</span> <span class="attr">iid</span>=<span class="string">"&#123;99652EA1-C1F7-414F-BB7B-1C967DE75983&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidDataServices"</span> <span class="attr">iid</span>=<span class="string">"&#123;334125C1-77E5-11D3-B653-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidXDS"</span> <span class="attr">iid</span>=<span class="string">"&#123;11EBC158-E712-4D1F-8BB3-01ED5274C4CE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidXDSEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;6DB2317D-3B23-41EC-BA4B-701F407EAF3A&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFeatureEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;3DD2903C-E0AA-11D2-B63A-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidCompositionSegment"</span> <span class="attr">iid</span>=<span class="string">"&#123;1C15D483-911D-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;1C15D483-911D-11D2-B632-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IObjectWithSite"</span> <span class="attr">iid</span>=<span class="string">"&#123;FC4801A3-2BA9-11CF-A229-00AA003D7352&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;FC4801A3-2BA9-11CF-A229-00AA003D7352&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidCtl"</span> <span class="attr">iid</span>=<span class="string">"&#123;B0EDF162-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidInputDevices"</span> <span class="attr">iid</span>=<span class="string">"&#123;C5702CD1-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidOutputDevices"</span> <span class="attr">iid</span>=<span class="string">"&#123;C5702CD2-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidVideoRendererDevices"</span> <span class="attr">iid</span>=<span class="string">"&#123;C5702CD3-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidAudioRendererDevices"</span> <span class="attr">iid</span>=<span class="string">"&#123;C5702CD4-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidFeatures"</span> <span class="attr">iid</span>=<span class="string">"&#123;C5702CD5-9B79-11D3-B654-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSEventBinder"</span> <span class="attr">iid</span>=<span class="string">"&#123;C3A9F406-2222-436D-86D5-BA3229279EFB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMSVidDevice2"</span> <span class="attr">iid</span>=<span class="string">"&#123;87BD2783-EBC0-478C-B4A0-E8E7F43AB78E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;B0EDF154-910A-11D2-B632-00C04F79498E&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITuningSpaceContainer"</span> <span class="attr">iid</span>=<span class="string">"&#123;5B692E84-E2F1-11D2-9493-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITuningSpaces"</span> <span class="attr">iid</span>=<span class="string">"&#123;901284E4-33FE-4B69-8D63-634A596F3756&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IEnumTuningSpaces"</span> <span class="attr">iid</span>=<span class="string">"&#123;8B8EB248-FC2B-11D2-9D8C-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;8B8EB248-FC2B-11D2-9D8C-00C04F72D980&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IBDAComparable"</span> <span class="attr">iid</span>=<span class="string">"&#123;B34505E0-2F0E-497B-80BC-D43F3B24ED7F&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;B34505E0-2F0E-497B-80BC-D43F3B24ED7F&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IBDACreateTuneRequestEx"</span> <span class="attr">iid</span>=<span class="string">"&#123;C0A4A1D4-2B3C-491A-BA22-499FBADD4D12&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;C0A4A1D4-2B3C-491A-BA22-499FBADD4D12&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IATSCTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;0369B4E2-45B6-11D3-B650-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAnalogTVTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;2A6E293C-2595-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDigitalCableTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;013F9F9C-B449-4EC7-A6D2-9D4F2FC70AE5&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAnalogRadioTuningSpace2"</span> <span class="attr">iid</span>=<span class="string">"&#123;39DD45DA-2DA8-46BA-8A8A-87E2B73D983A&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAnalogRadioTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;2A6E293B-2595-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAuxInTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;E48244B8-7E17-4F76-A763-5090FF1E2F30&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAuxInTuningSpace2"</span> <span class="attr">iid</span>=<span class="string">"&#123;B10931ED-8BFE-4AB0-9DCE-E469C29A9729&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBTuningSpace2"</span> <span class="attr">iid</span>=<span class="string">"&#123;843188B4-CE62-43DB-966B-8145A094E040&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;ADA0B268-3B19-4E5B-ACC4-49F852BE13BA&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBSTuningSpace"</span> <span class="attr">iid</span>=<span class="string">"&#123;CDF7BE60-D954-42FD-A972-78971958E470&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ILanguageComponentType"</span> <span class="attr">iid</span>=<span class="string">"&#123;B874C8BA-0FA2-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMPEG2ComponentType"</span> <span class="attr">iid</span>=<span class="string">"&#123;2C073D84-B51C-48C9-AA9F-68971E1F6E38&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IATSCComponentType"</span> <span class="attr">iid</span>=<span class="string">"&#123;FC189E4D-7BD4-4125-B3B3-3A76A332CC96&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IComponentsOld"</span> <span class="attr">iid</span>=<span class="string">"&#123;FCD01846-0E19-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMPEG2Component"</span> <span class="attr">iid</span>=<span class="string">"&#123;1493E353-1EB6-473C-802D-8E6B8EC9D2A9&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAnalogAudioComponentType"</span> <span class="attr">iid</span>=<span class="string">"&#123;2CFEB2A8-1787-4A24-A941-C6EAEC39C842&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IChannelIDTuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;156EFF60-86F4-4E28-89FC-109799FD57EE&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IChannelTuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;0369B4E0-45B6-11D3-B650-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IATSCChannelTuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;0369B4E1-45B6-11D3-B650-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDigitalCableTuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;BAD7753B-6B37-4810-AE57-3CE0C4A9E6CB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMPEG2TuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;EB7D987F-8A01-42AD-B8AE-574DEEE44D1A&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMPEG2TuneRequestFactory"</span> <span class="attr">iid</span>=<span class="string">"&#123;14E11ABD-EE37-4893-9EA1-6964DE933E39&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDigitalLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;19B595D8-839A-47F0-96DF-4F194F3C768C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IAnalogLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;34D1F26B-E339-430D-ABCE-738CB48984DC&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IATSCLocator2"</span> <span class="attr">iid</span>=<span class="string">"&#123;612AA885-66CF-4090-BA0A-566F5312E4CA&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IATSCLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;BF8D986F-8C2B-4131-94D7-4D3D9FCC21EF&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDigitalCableLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;48F66A11-171A-419A-9525-BEEECD51584C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBTLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;8664DA16-DDA2-42AC-926A-C18F9127C302&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBTLocator2"</span> <span class="attr">iid</span>=<span class="string">"&#123;448A2EDF-AE95-4B43-A3CC-747843C453D4&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBSLocator2"</span> <span class="attr">iid</span>=<span class="string">"&#123;6044634A-1733-4F99-B982-5FB12AFCE4F0&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBSLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;3D7C353C-0D04-45F1-A742-F97CC1188DC8&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBCLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;6E42F36E-1DD2-43C4-9F78-69D25AE39034&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IISDBSLocator"</span> <span class="attr">iid</span>=<span class="string">"&#123;C9897087-E29C-473F-9E4B-7072123DEA14&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IDVBTuneRequest"</span> <span class="attr">iid</span>=<span class="string">"&#123;0D6F567E-A636-42BB-83BA-CE4C1704AFA2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00020424-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ICreatePropBagOnRegKey"</span> <span class="attr">iid</span>=<span class="string">"&#123;8A674B48-1F63-11D3-B64C-00C04F79498E&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;8A674B48-1F63-11D3-B64C-00C04F79498E&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IBroadcastEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;3B21263F-26E8-489D-AAC4-924F7EFD9511&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;3B21263F-26E8-489D-AAC4-924F7EFD9511&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IRegisterTuner"</span> <span class="attr">iid</span>=<span class="string">"&#123;359B3901-572C-4854-BB49-CDEF66606A25&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;359B3901-572C-4854-BB49-CDEF66606A25&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"ITuner"</span> <span class="attr">iid</span>=<span class="string">"&#123;28C52640-018A-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;28C52640-018A-11D3-9D8E-00C04F72D980&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IPersistTuneXmlUtility"</span> <span class="attr">iid</span>=<span class="string">"&#123;990237AE-AC11-4614-BE8F-DD217A4CB4CB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;990237AE-AC11-4614-BE8F-DD217A4CB4CB&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IPersistTuneXmlUtility2"</span> <span class="attr">iid</span>=<span class="string">"&#123;992E165F-EA24-4B2F-9A1D-009D92120451&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;992E165F-EA24-4B2F-9A1D-009D92120451&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IESEventService"</span> <span class="attr">iid</span>=<span class="string">"&#123;ED89A619-4C06-4B2F-99EB-C7669B13047C&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;ED89A619-4C06-4B2F-99EB-C7669B13047C&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IESEvent"</span> <span class="attr">iid</span>=<span class="string">"&#123;1F0E5357-AF43-44E6-8547-654C645145D2&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;1F0E5357-AF43-44E6-8547-654C645145D2&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IESEvents"</span> <span class="attr">iid</span>=<span class="string">"&#123;ABD414BF-CFE5-4E5E-AF5B-4B4E49C5BFEB&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;ABD414BF-CFE5-4E5E-AF5B-4B4E49C5BFEB&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IESEventFactory"</span> <span class="attr">iid</span>=<span class="string">"&#123;506A09B8-7F86-4E04-AC05-3303BFE8FC49&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;506A09B8-7F86-4E04-AC05-3303BFE8FC49&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMarshal2"</span> <span class="attr">iid</span>=<span class="string">"&#123;000001CF-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;000001CF-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">comInterfaceExternalProxyStub</span> <span class="attr">name</span>=<span class="string">"IMarshal"</span> <span class="attr">iid</span>=<span class="string">"&#123;00000003-0000-0000-C000-000000000046&#125;"</span> <span class="attr">tlbid</span>=<span class="string">"&#123;9B085638-018E-11D3-9D8E-00C04F72D980&#125;"</span> <span class="attr">proxyStubClsid32</span>=<span class="string">"&#123;00000003-0000-0000-C000-000000000046&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Writing-the-application-manifest"><a href="#Writing-the-application-manifest" class="headerlink" title="Writing the application manifest"></a>Writing the application manifest</h3><p>This is the last step: writing the application manifest and importing the assembly manifest we just created.</p><p>For that, I took the original manifest embedded in <code>ehshell.exe</code>, cleaned it up a bit, added the necessary parts and created <code>ehshell.exe.manifest</code> with the resulting XML:</p><figure class="highlight xml"><figcaption><span>ehshell.exe.manifest</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</div><div class="line"><span class="comment">&lt;!-- Copyright (c) Microsoft Corporation --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span> <span class="attr">xmlns:asmv3</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span> <span class="attr">manifestVersion</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">"Microsoft.Windows.MultiMedia.EhShell"</span> <span class="attr">processorArchitecture</span>=<span class="string">"amd64"</span> <span class="attr">version</span>=<span class="string">"5.1.0.0"</span> <span class="attr">type</span>=<span class="string">"win32"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Windows Media Center Shell<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">application</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">asmv3:windowsSettings</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/SMI/2005/WindowsSettings"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">dpiAware</span>&gt;</span>true<span class="tag">&lt;/<span class="name">dpiAware</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">asmv3:windowsSettings</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">trustInfo</span> <span class="attr">xmlns</span>=<span class="string">"urn:schemas-microsoft-com:asm.v3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">security</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">requestedPrivileges</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">requestedExecutionLevel</span> <span class="attr">level</span>=<span class="string">"asInvoker"</span> <span class="attr">uiAccess</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">requestedPrivileges</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">security</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">trustInfo</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependentAssembly</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">"Microsoft.Windows.Video.Control"</span> <span class="attr">version</span>=<span class="string">"1.0.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependentAssembly</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependentAssembly</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">assemblyIdentity</span> <span class="attr">name</span>=<span class="string">"Microsoft.Windows.Video.Tagging"</span> <span class="attr">version</span>=<span class="string">"1.0.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependentAssembly</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></div></pre></td></tr></table></figure><div class="note tip"><p>The <code>Microsoft.Windows.Video.Tagging</code> dependency was generated using the same exact procedure, but using <code>EncDec.dll</code> instead of <code>MSVidCtl.dll</code>. For more information about this system DLL and why it&#39;s important for Windows Media Center, visit <a href="https://www.windowsmediacenter.fr/2018/06/10/windows-10-april-update-comment-resoudre-le-probleme-de-miniatures-thumbnails-sous-windows-media-center/" target="_blank" rel="external">Windows 10 April Update: comment résoudre le problème de miniatures (Thumbnails) sous Windows Media Center</a> (in French).</p></div><p>At this stage, <strong>it&#39;s important to note that external manifest files are NOT loaded if the executable already contains an embedded manifest</strong>. Since I preferred having an external manifest, I used Resource Hacker to remove the embedded manifest from <code>ehshell.exe</code> and the other WMC executables.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><strong>Creating registration-free COM manifests to work around a breaking change in a system DLL is definitely a painful process</strong> (after all, it&#39;s called DLL Hell for a reason!). Fortunately, the result is worth it, as it makes an application safe from future DLL changes introduced in minor or major Windows versions.</p><p>Since I don&#39;t expect anyone to reproduce this painful process to fix their Windows Media Center setup, <strong>I decided to team up with <a href="https://twitter.com/lachape_one" target="_blank" rel="external">Rémi Lachapelle</a> – who ows the <a href="https://www.windowsmediacenter.fr/" target="_blank" rel="external">WindowsMediaCenter.fr blog</a> – to offer an updated installer</strong> that includes the precious manifest and the <code>MSVidCtl</code>/<code>EncDec</code> DLLs needed for Windows Media Center to work properly with recent versions of Windows 10: keep an eye on his blog, it should be there shortly!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It&amp;#39;s no secret that &lt;strong&gt;I&amp;#39;ve always been a huge fan of &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_Media_Center&quot;&gt;Windows Media Center&lt;/a&gt;&lt;/strong&gt;, probably the best digital/personal video recorder out there and definitely one of the most impressive Microsoft applications developed using the .NET Framework.&lt;/p&gt;&lt;p&gt;As an avid WMC user, I have built 3 &lt;a href=&quot;https://en.wikipedia.org/wiki/Home_theater_PC&quot;&gt;HTPC machines&lt;/a&gt; and recorded thousands of TV programs (movies, series, documentaries, etc.). As such, when Microsoft announced in May 2015 that Windows Media Center would no longer be developed (almost 6 year after disbanding the development team!) – and thus would not be part of Windows 10 – &lt;strong&gt;I refused to migrate to Windows 10&lt;/strong&gt;, despite Microsoft&amp;#39;s offers encouraging users to upgrade their OS for free.&lt;/p&gt;&lt;p&gt;The fact Windows Media Center was not available on Windows 10 – even as a paid feature like it was on Windows 8.x – &lt;strong&gt;was a major blocker for many users&lt;/strong&gt;. To work around this limitation, &lt;a href=&quot;https://forums.mydigitallife.net/threads/discussion-patch-wmc-to-run-on-windows-10-final-possible-alternatives.61061/&quot;&gt;enthusiasts decided to create an unofficial port of Windows Media Center for Windows 10&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While unofficial, the port worked just fine. &lt;strong&gt;But over time, Microsoft started to update some of the system components Windows Media Center relied on&lt;/strong&gt;, causing annoying bugs. For instance, the introduction of breaking changes in Windows 10 1803 &lt;a href=&quot;https://forums.mydigitallife.net/threads/discussion-patch-wmc-to-run-on-windows-10-final-possible-alternatives.61061/page-436#post-1424922&quot;&gt;made watching a &lt;code&gt;.wtv&lt;/code&gt; file (WMC&amp;#39;s TV file format) recorded on Windows 7 completely impossible&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;While investigating, I discovered that the issue was caused by a change in &lt;code&gt;MSVidCtl.dll&lt;/code&gt;, the system-wide DLL containing the DirectShow components needed by WMC for all its TV-related features. After replacing the faulty DLL by an older version, WMC was able to play old recordings like a charm.&lt;/p&gt;&lt;p&gt;This phenomenom, that occurs every time API or functional changes are introduced in a DLL a program depends on, has a name: &lt;a href=&quot;https://en.wikipedia.org/wiki/DLL_Hell&quot;&gt;&lt;strong&gt;DLL Hell&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="windows" scheme="https://kevinchalet.com/tags/windows/"/>
    
      <category term="component object model" scheme="https://kevinchalet.com/tags/component-object-model/"/>
    
      <category term="manifest" scheme="https://kevinchalet.com/tags/manifest/"/>
    
      <category term="windows media center" scheme="https://kevinchalet.com/tags/windows-media-center/"/>
    
  </entry>
  
  <entry>
    <title>Session fixation vulnerability in the Auth0 ASP.NET and OWIN SDKs</title>
    <link href="https://kevinchalet.com/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/"/>
    <id>https://kevinchalet.com/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/</id>
    <published>2018-08-08T17:00:00.000Z</published>
    <updated>2018-08-08T16:46:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I received a mail from Auth0 asking me if I was interested in joining them. I had used Auth0 many times in the past but I had never taken the time to look at their OSS SDKs. This mail was a good opportunity to change that.</p><p>When doing so, <strong>I discovered that both their <a href="https://github.com/auth0/auth0-aspnet" target="_blank" rel="external">ASP.NET 4.x</a> and <a href="https://github.com/auth0/auth0-aspnet-owin" target="_blank" rel="external">OWIN/Katana</a> SDKs were unfortunately prone to &quot;session fixation&quot;</strong>, which is a form of cross-site request forgery allowing to force a victim to log in under an attacker&#39;s account.</p><p>Since it&#39;s a quite frequent vulnerability, here&#39;s a quick overview of what causes it and how you can concretly exploit it.</p><div class="note warn"><p>Auth0 was already aware of this issue internally and <a href="https://auth0.com/docs/security/bulletins/cve-2018-15121" target="_blank" rel="external">decided to switch to the official OWIN OpenID Connect middleware developed by Microsoft</a>, which is not prone to this class of attack.</p><p><strong>If you need to migrate, Auth0 has prepared a <a href="https://auth0.com/docs/quickstart/webapp/aspnet-owin/04-migrating" target="_blank" rel="external">migration guide</a></strong> listing the steps required to replace <code>Auth0-ASPNET-Owin</code> by Microsoft&#39;s OpenID Connect middleware.</p></div><h2 id="What-do-session-fixation-attacks-consist-in"><a href="#What-do-session-fixation-attacks-consist-in" class="headerlink" title="What do session fixation attacks consist in?"></a>What do session fixation attacks consist in?</h2><p>The <a href="https://tools.ietf.org/html/rfc6819" target="_blank" rel="external">OAuth2 threat model RFC</a> – a must read for anyone dealing with OAuth2 and OpenID Connect – gives <a href="https://tools.ietf.org/html/rfc6819#sehection-4.4.1.8" target="_blank" rel="external">an excellent definition of this threat and its practical implications</a>:</p><blockquote><p>Cross-site request forgery (CSRF) is a web-based attack whereby HTTP requests are transmitted from a user that the web site trusts or has authenticated (e.g., via HTTP redirects or HTML forms). CSRF attacks on OAuth approvals can allow an attacker to obtain authorization to OAuth protected resources without the consent of the user. This attack works against the redirect URI used in the authorization &quot;code&quot; flow.</p><p>An attacker could authorize an authorization &quot;code&quot; to their own protected resources on an authorization server. He then aborts the redirect flow back to the client on his device and tricks the victim into executing the redirect back to the client. The client receives the redirect, fetches the token(s) from the authorization server, and associates the victim&#39;s client session with the resources accessible using the token.</p><p>Impact: the user accesses resources on behalf of the attacker. The effective impact depends on the type of resource accessed. For example, the user may upload private items to an attacker&#39;s resources. Or, when using OAuth in 3rd-party login scenarios, the user may associate his client account with the attacker&#39;s identity at the external Identity Provider. In this way, the attacker could easily access the victim&#39;s data at the client by logging in from another device with his credentials at the external Identity Provider.</p></blockquote><p>Usually, this (generally underestimated) threat is mitigated by correlating the authorization response with the authorization request: <strong>typically, by generating an unguessable value before redirecting the user to the Identity Provider and validating it before sending the token request</strong>.</p><p>Unfortunately, this kind of check is not made by the Auth0 ASP.NET 4.x and OWIN SDKs, making them vulnerable to this class of attack.</p><a id="more"></a><h2 id="How-can-I-reproduce-the-vulnerability"><a href="#How-can-I-reproduce-the-vulnerability" class="headerlink" title="How can I reproduce the vulnerability?"></a>How can I reproduce the vulnerability?</h2><p>Reproducing the vulnerability is quite easy. For that, I wrote a simple self-hosted OWIN/Katana console application using the vulnerable <code>Auth0-ASPNET-Owin</code> package.</p><div class="note tip"><p>The specific version doesn&#39;t matter much, as a quick look at the git history seems to indicate this vulnerability exists since the very first day: all versions are potentially vulnerable.</p></div><h3 id="Create-a-self-hosted-OWIN-application"><a href="#Create-a-self-hosted-OWIN-application" class="headerlink" title="Create a self-hosted OWIN application"></a>Create a self-hosted OWIN application</h3><figure class="highlight xml"><figcaption><span>packages.config</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">packages</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Auth0-ASPNET-Owin"</span> <span class="attr">version</span>=<span class="string">"2.3.1"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Microsoft.Owin"</span> <span class="attr">version</span>=<span class="string">"3.1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Microsoft.Owin.Host.HttpListener"</span> <span class="attr">version</span>=<span class="string">"3.1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Microsoft.Owin.Hosting"</span> <span class="attr">version</span>=<span class="string">"3.1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Microsoft.Owin.Security"</span> <span class="attr">version</span>=<span class="string">"3.1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Microsoft.Owin.Security.Cookies"</span> <span class="attr">version</span>=<span class="string">"3.1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Newtonsoft.Json"</span> <span class="attr">version</span>=<span class="string">"7.0.1"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"Owin"</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">id</span>=<span class="string">"System.Text.Encodings.Web"</span> <span class="attr">version</span>=<span class="string">"4.5.0"</span> <span class="attr">targetFramework</span>=<span class="string">"net47"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">packages</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>Program.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> Microsoft.Owin.Hosting;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">SessionFixationDemo</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">const</span> <span class="keyword">string</span> address = <span class="string">"http://localhost:[port]/"</span>;</div><div class="line"></div><div class="line">            <span class="keyword">using</span> (WebApp.Start&lt;Startup&gt;(address))</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(<span class="string">$"Server is running on <span class="subst">&#123;address&#125;</span>, press CTRL+C to stop."</span>);</div><div class="line">                Console.ReadLine();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Text.Encodings.Web;</div><div class="line"><span class="keyword">using</span> Auth0.Owin;</div><div class="line"><span class="keyword">using</span> Microsoft.Owin;</div><div class="line"><span class="keyword">using</span> Microsoft.Owin.Security;</div><div class="line"><span class="keyword">using</span> Microsoft.Owin.Security.Cookies;</div><div class="line"><span class="keyword">using</span> Owin;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">SessionFixationDemo</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configuration</span>(<span class="params">IAppBuilder app</span>)</span></div><div class="line">        &#123;</div><div class="line">            app.SetDefaultSignInAsAuthenticationType(CookieAuthenticationDefaults.AuthenticationType);</div><div class="line"></div><div class="line">            app.UseCookieAuthentication(<span class="keyword">new</span> CookieAuthenticationOptions());</div><div class="line"></div><div class="line">            app.UseAuth0Authentication(<span class="keyword">new</span> Auth0AuthenticationOptions</div><div class="line">            &#123;</div><div class="line">                Domain = <span class="string">"[domain]"</span>,</div><div class="line">                ClientId = <span class="string">"[client identifier]"</span>,</div><div class="line">                ClientSecret = <span class="string">"[client secret]"</span></div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            app.Run(<span class="keyword">async</span> context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (context.Request.Path == <span class="keyword">new</span> PathString(<span class="string">"/challenge"</span>))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">var</span> properties = <span class="keyword">new</span> AuthenticationProperties</div><div class="line">                    &#123;</div><div class="line">                        RedirectUri = <span class="string">"/"</span></div><div class="line">                    &#125;;</div><div class="line"></div><div class="line">                    context.Authentication.Challenge(properties, <span class="string">"Auth0"</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.Request.Path == <span class="keyword">new</span> PathString(<span class="string">"/fix-session"</span>))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">var</span> code = context.Request.Query[<span class="string">"attacker_authorization_code"</span>];</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(code))</div><div class="line">                    &#123;</div><div class="line">                        context.Response.StatusCode = <span class="number">400</span>;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    context.Response.ContentType = <span class="string">"text/html"</span>;</div><div class="line">                    <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">$@"&lt;!doctype html&gt;</span></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Session fixation demonstration&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;iframe src=""/signin-auth0?code=<span class="subst">&#123;HtmlEncoder.Default.Encode(code)&#125;</span>""&gt;&lt;/iframe&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;");</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (context.Authentication.User == <span class="literal">null</span> ||</div><div class="line">                   !context.Authentication.User.Identity.IsAuthenticated)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"You're not logged in. "</span>);</div><div class="line">                    <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Visit /challenge to trigger a challenge."</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> name = HtmlEncoder.Default.Encode(context.Authentication.User.Identity.Name);</div><div class="line">                <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">$"You're logged in as <span class="subst">&#123;name&#125;</span>."</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Register-a-new-Auth0-application"><a href="#Register-a-new-Auth0-application" class="headerlink" title="Register a new Auth0 application"></a>Register a new Auth0 application</h3><p>Thanks to Auth0&#39;s user-friendly portal, registering a new Web server application is quite straightforward. When created, don&#39;t forget to register <code>http://localhost:[port]/signin-auth0</code> as a valid <code>redirect_uri</code>:</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/callback-uris.png" alt="callback-uris.png"><h3 id="Create-a-first-account-playing-the-attacker-role"><a href="#Create-a-first-account-playing-the-attacker-role" class="headerlink" title="Create a first account (playing the attacker role)"></a>Create a first account (playing the attacker role)</h3><p>Once the application is correctly registered, start the OWIN application and visit <code>http://localhost:[port]/challenge</code> to start a new authentication flow. Doing that will redirect you to the Auth0 login page:</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/login-page.png" alt="login-page.png"><p>Then, create a new account that will be used as the attacker account and approve the authorization request. Once approved, you should be redirected to the OWIN application and the following message should appear:</p><blockquote><p>You&#39;re logged in as [email address of your first account].</p></blockquote><h3 id="Create-a-second-account-playing-the-victim-role"><a href="#Create-a-second-account-playing-the-victim-role" class="headerlink" title="Create a second account (playing the victim role)"></a>Create a second account (playing the victim role)</h3><p>For that, visit <code>http://localhost:[port]/challenge</code> a second time, create a new Auth0 account and approve the authorization request exactly like you did during the previous step.</p><p>At this point, you should be logged in as the victim:</p><blockquote><p>You&#39;re logged in as [email address of your second account].</p></blockquote><h3 id="In-a-private-browser-window-start-a-new-authentication-flow-using-the-attacker-account"><a href="#In-a-private-browser-window-start-a-new-authentication-flow-using-the-attacker-account" class="headerlink" title="In a private browser window, start a new authentication flow using the attacker account"></a>In a private browser window, start a new authentication flow using the attacker account</h3><p><strong>At this stage, the objective is to retrieve an authorization code associated with the attacker account</strong>. To do that, my preferred option is to use Fiddler and its breakpoints feature, that will allow you to abort the authentication flow before being redirected back to the OWIN application (and ensure the authorization code is not redeemed):</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/fiddler-breakpoints.png" alt="fiddler-breakpoints.png"><p><strong>In a private browser window</strong>, visit <code>http://localhost:[port]/challenge</code>, go back to Fiddler and allow the challenge request to be processed by clicking on <code>Run to completion</code>.</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/fiddler-breakpoint-management.png" alt="fiddler-breakpoint-management.png"><p>After logging in as the attacker, you should be redirected by Auth0 back to the OWIN application with the precious authorization code:</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/fiddler-authorization-response.png" alt="fiddler-authorization-response.png"><p>Extract the authorization code from the query string and abort the request by choosing a fake response in Fiddler&#39;s list before clicking on <code>Run to completion</code>:</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/fiddler-fake-responses.png" alt="fiddler-fake-responses.png"><p>Copy the attacker&#39;s authorization code and close the window.</p><h3 id="Force-the-victim-to-log-in-as-the-attacker"><a href="#Force-the-victim-to-log-in-as-the-attacker" class="headerlink" title="Force the victim to log in as the attacker"></a>Force the victim to log in as the attacker</h3><p>Now, go back to your main browser window and visit <code>http://localhost:[port]/</code> to confirm you&#39;re still logged in using the victim account.</p><p>Then, visit <code>http://localhost:[port]/fix-session?attacker_authorization_code=[code]</code>. This page contains a malicious iframe that directly points to the <code>redirect_uri</code> endpoint of the OWIN application. When visiting this page, <strong>you&#39;ll be immediately logged out of your main account – i.e the victim – and all requests will now be sent using the attacker&#39;s identity</strong>:</p><img src="/2018/08/08/session-fixation-vulnerability-in-the-auth0-asp-net-and-owin-sdks/malicious-iframe.png" alt="malicious-iframe.png"><div class="note tip"><p>In a real world attack, this HTML page would be hosted by an attacker on a different server and would be embedded in a malicious site or directly reached by a victim after clicking on a link. Here, the <code>/fix-session</code> endpoint is only provided for convenience.</p></div><h3 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h3><p><strong>Kudos to Marcin Hoppe and Jerrie Pelser for their promptness in getting back to me</strong>. While Auth0 doesn&#39;t have a real <a href="https://auth0.com/whitehat" target="_blank" rel="external">&quot;bug bounty&quot; program</a> yet – which is frankly unfortunate for a such big player in the Identity sector (specially when vendors like Microsoft or Okta already have proper programs in place) – it&#39;s certainly a good thing to be able to reach them very quickly.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I received a mail from Auth0 asking me if I was interested in joining them. I had used Auth0 many times in the past but I had never taken the time to look at their OSS SDKs. This mail was a good opportunity to change that.&lt;/p&gt;&lt;p&gt;When doing so, &lt;strong&gt;I discovered that both their &lt;a href=&quot;https://github.com/auth0/auth0-aspnet&quot;&gt;ASP.NET 4.x&lt;/a&gt; and &lt;a href=&quot;https://github.com/auth0/auth0-aspnet-owin&quot;&gt;OWIN/Katana&lt;/a&gt; SDKs were unfortunately prone to &amp;quot;session fixation&amp;quot;&lt;/strong&gt;, which is a form of cross-site request forgery allowing to force a victim to log in under an attacker&amp;#39;s account.&lt;/p&gt;&lt;p&gt;Since it&amp;#39;s a quite frequent vulnerability, here&amp;#39;s a quick overview of what causes it and how you can concretly exploit it.&lt;/p&gt;&lt;div class=&quot;note warn&quot;&gt;&lt;p&gt;Auth0 was already aware of this issue internally and &lt;a href=&quot;https://auth0.com/docs/security/bulletins/cve-2018-15121&quot;&gt;decided to switch to the official OWIN OpenID Connect middleware developed by Microsoft&lt;/a&gt;, which is not prone to this class of attack.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If you need to migrate, Auth0 has prepared a &lt;a href=&quot;https://auth0.com/docs/quickstart/webapp/aspnet-owin/04-migrating&quot;&gt;migration guide&lt;/a&gt;&lt;/strong&gt; listing the steps required to replace &lt;code&gt;Auth0-ASPNET-Owin&lt;/code&gt; by Microsoft&amp;#39;s OpenID Connect middleware.&lt;/p&gt;&lt;/div&gt;&lt;h2 id=&quot;What-do-session-fixation-attacks-consist-in&quot;&gt;&lt;a href=&quot;#What-do-session-fixation-attacks-consist-in&quot; class=&quot;headerlink&quot; title=&quot;What do session fixation attacks consist in?&quot;&gt;&lt;/a&gt;What do session fixation attacks consist in?&lt;/h2&gt;&lt;p&gt;The &lt;a href=&quot;https://tools.ietf.org/html/rfc6819&quot;&gt;OAuth2 threat model RFC&lt;/a&gt; – a must read for anyone dealing with OAuth2 and OpenID Connect – gives &lt;a href=&quot;https://tools.ietf.org/html/rfc6819#sehection-4.4.1.8&quot;&gt;an excellent definition of this threat and its practical implications&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Cross-site request forgery (CSRF) is a web-based attack whereby HTTP requests are transmitted from a user that the web site trusts or has authenticated (e.g., via HTTP redirects or HTML forms). CSRF attacks on OAuth approvals can allow an attacker to obtain authorization to OAuth protected resources without the consent of the user. This attack works against the redirect URI used in the authorization &amp;quot;code&amp;quot; flow.&lt;/p&gt;&lt;p&gt;An attacker could authorize an authorization &amp;quot;code&amp;quot; to their own protected resources on an authorization server. He then aborts the redirect flow back to the client on his device and tricks the victim into executing the redirect back to the client. The client receives the redirect, fetches the token(s) from the authorization server, and associates the victim&amp;#39;s client session with the resources accessible using the token.&lt;/p&gt;&lt;p&gt;Impact: the user accesses resources on behalf of the attacker. The effective impact depends on the type of resource accessed. For example, the user may upload private items to an attacker&amp;#39;s resources. Or, when using OAuth in 3rd-party login scenarios, the user may associate his client account with the attacker&amp;#39;s identity at the external Identity Provider. In this way, the attacker could easily access the victim&amp;#39;s data at the client by logging in from another device with his credentials at the external Identity Provider.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Usually, this (generally underestimated) threat is mitigated by correlating the authorization response with the authorization request: &lt;strong&gt;typically, by generating an unguessable value before redirecting the user to the Identity Provider and validating it before sending the token request&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Unfortunately, this kind of check is not made by the Auth0 ASP.NET 4.x and OWIN SDKs, making them vulnerable to this class of attack.&lt;/p&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="vulnerability" scheme="https://kevinchalet.com/tags/vulnerability/"/>
    
      <category term="asp.net" scheme="https://kevinchalet.com/tags/asp-net/"/>
    
      <category term="auth0" scheme="https://kevinchalet.com/tags/auth0/"/>
    
      <category term="owin" scheme="https://kevinchalet.com/tags/owin/"/>
    
  </entry>
  
  <entry>
    <title>Implementing advanced scenarios using the new OpenIddict RC3 events model</title>
    <link href="https://kevinchalet.com/2018/07/02/implementing-advanced-scenarios-using-the-new-openiddict-rc3-events-model/"/>
    <id>https://kevinchalet.com/2018/07/02/implementing-advanced-scenarios-using-the-new-openiddict-rc3-events-model/</id>
    <published>2018-07-02T16:15:00.000Z</published>
    <updated>2018-07-02T16:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Prior to OpenIddict RC3, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/blob/dev/src/AspNet.Security.OpenIdConnect.Server/OpenIdConnectServerProvider.cs" target="_blank" rel="external">the events model used by the OpenID Connect server middleware</a> (i.e the OIDC server framework behind OpenIddict) was deliberately not accessible due to the nature of OpenIddict: being initially designed for non-experts, exposing such a powerful API – <strong>that allows altering the way OpenID Connect requests are processed</strong> – didn&#39;t seem like a good idea at first sight.</p><p>With time, the core audience of OpenIddict has evolved a bit to not only include beginners but also developers who were already familiar with OAuth/OpenID Connect or had used <code>OAuthAuthorizationServerMiddleware</code> or ASOS in the past. For them, the fact OpenIddict didn&#39;t allow them to take control of the request processing pipeline was often a blocker. <strong>With the introduction of OpenIddict RC3, we&#39;re changing that.</strong></p><div class="note info"><p>Using these advanced APIs is not recommended if you&#39;re not familiar with the OAuth/OpenID Connect specifications or with <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="the events model used by the OpenID Connect server middleware">the events model used by the OpenID Connect server middleware</a>. If you&#39;re not sure whether you should use these APIs, don&#39;t hesitate to reach us on Gitter or on GitHub.</p></div><h2 id="Introducing-event-handlers"><a href="#Introducing-event-handlers" class="headerlink" title="Introducing event handlers"></a>Introducing event handlers</h2><p>The events model is structured around <code>IOpenIddictServerEventHandler&lt;TEvent&gt;</code> and <code>IOpenIddictValidationEventHandler&lt;TEvent&gt;</code>. <strong>These 2 interfaces represent handlers that are invoked every time an event of type <code>TEvent</code> is triggered by the OpenIddict server or validation handlers</strong>.</p><p>At the time of writing, <strong>OpenIddict exposes 44 server events</strong> – grouped into the <code>OpenIddictServerEvents</code> static class to make them easier to find – <strong>and 5 validation events</strong>, exposed under <code>OpenIddictValidationEvents</code>.</p><p><strong>Each event represents a specific moment in the request processing pipeline</strong> (e.g the moment the OpenIddict server determines whether the request is an OpenID Connect request it should handle, the moment it extracts it, handles it or returns a response).</p><div class="note tip"><p><strong>Multiple handlers of the same type can be registered</strong>: they will be sequentially invoked in the same order as the one used to register them. As soon as a handler calls a method that indicates the request should no longer be processed (e.g <code>HandleResponse()</code> or <code>SkipHandler()</code>), OpenIddict will stop invoking the handlers and the next ones will be automatically ignored.</p><p>For security reasons, <strong>the custom handlers will be invoked by OpenIddict after its own validation routines</strong>. If a request is rejected by OpenIddict, your own handlers won&#39;t be invoked.</p></div><h2 id="Creating-and-registering-a-custom-event-handler"><a href="#Creating-and-registering-a-custom-event-handler" class="headerlink" title="Creating and registering a custom event handler"></a>Creating and registering a custom event handler</h2><p>Creating an event handler is straightforward: pick the event you need and add a class that implements either <code>IOpenIddictServerEventHandler&lt;TEvent&gt;</code> (for a handler that receives events triggered by the OpenIddict server services) or <code>IOpenIddictValidationEventHandler&lt;TEvent&gt;</code> (for a handler that receives events triggered by the OpenIddict token validation services):</p><p>For instance, to return custom metadata in the discovery document, you&#39;ll need to implement <code>IOpenIddictServerEventHandler&lt;OpenIddictServerEvents.HandleConfigurationRequest&gt;</code>:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class MyEventHandler : IOpenIddictServerEventHandler&lt;OpenIddictServerEvents.HandleConfigurationRequest&gt;</div><div class="line">&#123;</div><div class="line">    public Task HandleAsync(OpenIddictServerEvents.HandleConfigurationRequest notification, CancellationToken cancellationToken)</div><div class="line">    &#123;</div><div class="line">        notification.Context.Metadata["company_name"] = "Contoso";</div><div class="line"></div><div class="line">        return Task.CompletedTask;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>To register it, use <code>options.AddEventHandler&lt;TEvent, THandler&gt;()</code> (by default, the handler is registered as a scoped service):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    services.AddOpenIddict()</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">        .AddCore(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">        .AddServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line"></div><div class="line">            options.AddEventHandler&lt;OpenIddictServerEvents.HandleConfigurationRequest, MyEventHandler&gt;();</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">        .AddValidation();</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>Alternatively, <strong>if your handler can be trivialy implemented and doesn&#39;t use constructor injection, you can register it inline</strong>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    services.AddOpenIddict()</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">        .AddCore(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">        .AddServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line"></div><div class="line">            options.AddEventHandler&lt;OpenIddictServerEvents.HandleConfigurationRequest&gt;(</div><div class="line">                notification =&gt;</div><div class="line">                &#123;</div><div class="line">                    notification.Context.Metadata[<span class="string">"company_name"</span>] = <span class="string">"Contoso"</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">        .AddValidation();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Concrete-examples"><a href="#Concrete-examples" class="headerlink" title="Concrete examples"></a>Concrete examples</h2><h3 id="Tweaking-the-endpoint-detection-logic"><a href="#Tweaking-the-endpoint-detection-logic" class="headerlink" title="Tweaking the endpoint detection logic"></a>Tweaking the endpoint detection logic</h3><p>By default, <strong>OpenIddict uses a path-based endpoint resolution logic to determine whether the incoming request is an OpenID Connect request</strong> it should handle. This is done by comparing the request path to the endpoint paths registered in the OpenIddict server options. In some cases, you&#39;ll probably want to listen on multiple paths at the same time instead of a single one. For that, you can use the <code>OpenIddictServerEvents.MatchEndpoint</code> event:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">options.AddEventHandler&lt;OpenIddictServerEvents.MatchEndpoint&gt;(notification =&gt;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// By default, only requests sent to /connect/token will be treated as valid</span></div><div class="line">    <span class="comment">// token requests by OpenIddict. This custom logic allows requests pointing</span></div><div class="line">    <span class="comment">// to /connect/second-token-endpoint to be treated the same way so that</span></div><div class="line">    <span class="comment">// requests can be sent to one of the two addresses without any distinction.</span></div><div class="line">    <span class="keyword">var</span> request = notification.Context.HttpContext.Request;</div><div class="line">    <span class="keyword">if</span> (request.Path == <span class="string">"/connect/second-token-endpoint"</span>)</div><div class="line">    &#123;</div><div class="line">        notification.Context.MatchTokenEndpoint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="Returning-the-list-of-supported-social-providers-as-part-of-the-discovery-document"><a href="#Returning-the-list-of-supported-social-providers-as-part-of-the-discovery-document" class="headerlink" title="Returning the list of supported social providers as part of the discovery document"></a>Returning the list of supported social providers as part of the discovery document</h3><p>If you need to expose the external providers that are supported by your server application, you can use the <code>HandleConfigurationRequest</code> event:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MyEventHandler : IOpenIddictServerEventHandler&lt;OpenIddictServerEvents.HandleConfigurationRequest&gt;</div><div class="line">&#123;</div><div class="line">    private readonly IAuthenticationSchemeProvider _authenticationSchemeProvider;</div><div class="line"></div><div class="line">    public MyEventHandler(IAuthenticationSchemeProvider authenticationSchemeProvider)</div><div class="line">        =&gt; _authenticationSchemeProvider = authenticationSchemeProvider;</div><div class="line"></div><div class="line">    public async Task HandleAsync(OpenIddictServerEvents.HandleConfigurationRequest notification, CancellationToken cancellationToken)</div><div class="line">        =&gt; notification.Context.Metadata["external_providers_supported"] = new JArray(</div><div class="line">            from provider in await _authenticationSchemeProvider.GetAllSchemesAsync()</div><div class="line">            where !string.IsNullOrEmpty(provider.DisplayName)</div><div class="line">            select provider.Name);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"issuer"</span>: <span class="string">"https://localhost:44344/"</span>,</div><div class="line">    <span class="attr">"token_endpoint"</span>: <span class="string">"https://localhost:44344/connect/token"</span>,</div><div class="line">    <span class="attr">"jwks_uri"</span>: <span class="string">"https://localhost:44344/.well-known/jwks"</span>,</div><div class="line">    <span class="attr">"grant_types_supported"</span>: [</div><div class="line">        <span class="string">"password"</span>,</div><div class="line">        <span class="string">"refresh_token"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"scopes_supported"</span>: [</div><div class="line">        <span class="string">"openid"</span>,</div><div class="line">        <span class="string">"offline_access"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"claims_supported"</span>: [</div><div class="line">        <span class="string">"aud"</span>,</div><div class="line">        <span class="string">"exp"</span>,</div><div class="line">        <span class="string">"iat"</span>,</div><div class="line">        <span class="string">"iss"</span>,</div><div class="line">        <span class="string">"jti"</span>,</div><div class="line">        <span class="string">"sub"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"subject_types_supported"</span>: [</div><div class="line">        <span class="string">"public"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"token_endpoint_auth_methods_supported"</span>: [</div><div class="line">        <span class="string">"client_secret_basic"</span>,</div><div class="line">        <span class="string">"client_secret_post"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"claims_parameter_supported"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"request_parameter_supported"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"request_uri_parameter_supported"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"external_providers_supported"</span>: [</div><div class="line">        <span class="string">"Google"</span>,</div><div class="line">        <span class="string">"Microsoft"</span>,</div><div class="line">        <span class="string">"Facebook"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Implementing-the-token-endpoint-at-the-handler-level-without-having-an-authorization-controller"><a href="#Implementing-the-token-endpoint-at-the-handler-level-without-having-an-authorization-controller" class="headerlink" title="Implementing the token endpoint at the handler level without having an authorization controller"></a>Implementing the token endpoint at the handler level without having an authorization controller</h3><p>With OpenIddict, the &quot;standard&quot; way to process authorization or token requests is to have an authorization controller dedicated to handling these requests. Starting with RC3, <strong>this can also be done directly at the OpenIddict server handler level</strong> (e.g for those who don&#39;t need or don&#39;t want to use ASP.NET Core MVC).</p><p>Here&#39;s how it could be done by writing an <code>OpenIddictServerBuilder</code> extension:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">CustomOpenIddictServerExtensions</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OpenIddictServerBuilder <span class="title">UseCustomTokenEndpoint</span>(<span class="params"></span></span></div><div class="line">        <span class="keyword">this</span> OpenIddictServerBuilder builder)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (builder == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(builder));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.AddEventHandler&lt;OpenIddictServerEvents.HandleTokenRequest&gt;(</div><div class="line">            notification =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">var</span> request = notification.Context.Request;</div><div class="line">                <span class="keyword">if</span> (!request.IsPasswordGrantType())</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Validate the user credentials.</span></div><div class="line"></div><div class="line">                <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider</span></div><div class="line">                <span class="comment">// applying a key derivation function like PBKDF2 to slow down</span></div><div class="line">                <span class="comment">// the password validation process. You SHOULD also consider</span></div><div class="line">                <span class="comment">// using a time-constant comparer to prevent timing attacks.</span></div><div class="line">                <span class="keyword">if</span> (request.Username != <span class="string">"alice@wonderland.com"</span> ||</div><div class="line">                    request.Password != <span class="string">"P@ssw0rd"</span>)</div><div class="line">                &#123;</div><div class="line">                    notification.Context.Reject(</div><div class="line">                        error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                        description: <span class="string">"The specified credentials are invalid."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Create a new ClaimsIdentity holding the user identity.</span></div><div class="line">                <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(</div><div class="line">                    notification.Context.Scheme.Name,</div><div class="line">                    OpenIdConnectConstants.Claims.Name,</div><div class="line">                    OpenIdConnectConstants.Claims.Role);</div><div class="line"></div><div class="line">                <span class="comment">// Add a "sub" claim containing the user identifier, and attach</span></div><div class="line">                <span class="comment">// the "access_token" destination to allow OpenIddict to store it</span></div><div class="line">                <span class="comment">// in the access token, so it can be retrieved from your controllers.</span></div><div class="line">                identity.AddClaim(OpenIdConnectConstants.Claims.Subject,</div><div class="line">                    <span class="string">"71346D62-9BA5-4B6D-9ECA-755574D628D8"</span>,</div><div class="line">                    OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">                identity.AddClaim(OpenIdConnectConstants.Claims.Name, <span class="string">"Alice"</span>,</div><div class="line">                    OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">                <span class="comment">// ... add other claims, if necessary.</span></div><div class="line"></div><div class="line">                <span class="keyword">var</span> principal = <span class="keyword">new</span> ClaimsPrincipal(identity);</div><div class="line">                notification.Context.Validate(principal);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    services.AddOpenIddict()</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">        .AddCore(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">        .AddServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line"></div><div class="line">            options.UseCustomTokenEndpoint();</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">        .AddValidation();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Extracting-access-tokens-from-the-query-string"><a href="#Extracting-access-tokens-from-the-query-string" class="headerlink" title="Extracting access tokens from the query string"></a>Extracting access tokens from the query string</h3><p>In some cases, flowing the access token in the HTTP request headers is not possible (e.g when using WebSockets with JS clients). To work around these limitations, <strong>you can transfer it as a query string parameter</strong> and configure the OpenIddict validation handler to use your extraction logic by adding an event handler for <code>OpenIddictValidationEvents.RetrieveToken</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">&#123;</div><div class="line">    services.AddOpenIddict()</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">        .AddValidation(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// ...</span></div><div class="line"></div><div class="line">            options.AddEventHandler&lt;OpenIddictValidationEvents.RetrieveToken&gt;(</div><div class="line">                notification =&gt;</div><div class="line">                &#123;</div><div class="line">                    notification.Context.Token = notification.Context.Request.Query[<span class="string">"access_token"</span>];</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;);</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      In this post, discover how to leverage the events model introduced in OpenIddict RC3 to implement advanced features.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>OpenIddict RC3 is out</title>
    <link href="https://kevinchalet.com/2018/06/20/openiddict-rc3-is-out/"/>
    <id>https://kevinchalet.com/2018/06/20/openiddict-rc3-is-out/</id>
    <published>2018-06-20T14:00:00.000Z</published>
    <updated>2018-07-04T00:42:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>OpenIddict RC3 is now available on NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc3-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc3-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc3-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc3-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new-in-this-release"><a href="#What-39-s-new-in-this-release" class="headerlink" title="What&#39;s new in this release?"></a>What&#39;s new in this release?</h2><h3 id="The-OpenIddict-services-registration-APIs-have-been-revamped"><a href="#The-OpenIddict-services-registration-APIs-have-been-revamped" class="headerlink" title="The OpenIddict services registration APIs have been revamped"></a>The OpenIddict services registration APIs have been revamped</h3><p>In this release, <strong>we focused on reworking the OpenIddict registration APIs to offer a better user experience</strong>.</p><p>As part of this change, <strong>we split the OpenIddict services into three areas</strong> - <code>Core</code>, <code>Server</code> and <code>Validation</code> - and the <code>IServiceCollection</code> APIs have been updated to reflect that:</p><img src="/2018/06/20/openiddict-rc3-is-out/main-builder.png" alt="main-builder.png"><p>Each specialized builder only exposes the options that are relevant to its specific area:</p><img src="/2018/06/20/openiddict-rc3-is-out/specialized-builders.png" alt="specialized-builders.png"><p>Of course, the calls to <code>AddCore()</code>, <code>AddServer()</code> and <code>AddValidation()</code> can be chained:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the Entity Framework stores and models.</span></div><div class="line">        options.UseEntityFrameworkCore()</div><div class="line">               .UseDbContext&lt;ApplicationDbContext&gt;();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the ASP.NET Core MVC binder used by OpenIddict.</span></div><div class="line">        <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">        <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">        options.UseMvc();</div><div class="line"></div><div class="line">        <span class="comment">// Enable the authorization, logout, token and userinfo endpoints.</span></div><div class="line">        options.EnableAuthorizationEndpoint(<span class="string">"/connect/authorize"</span>)</div><div class="line">               .EnableLogoutEndpoint(<span class="string">"/connect/logout"</span>)</div><div class="line">               .EnableTokenEndpoint(<span class="string">"/connect/token"</span>)</div><div class="line">               .EnableUserinfoEndpoint(<span class="string">"/api/userinfo"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Note: the Mvc.Client sample only uses the code flow and the password flow, but you</span></div><div class="line">        <span class="comment">// can enable the other flows if you need to support implicit or client credentials.</span></div><div class="line">        options.AllowAuthorizationCodeFlow()</div><div class="line">               .AllowPasswordFlow()</div><div class="line">               .AllowRefreshTokenFlow();</div><div class="line"></div><div class="line">        <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">        options.DisableHttpsRequirement();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">    <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">    <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">    <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">    .AddValidation();</div></pre></td></tr></table></figure><p><strong>Introducing these specialized builders was also a great opportunity to revisit how the OpenIddict entities are registered</strong>. In the RC2 bits, this is controlled by the <code>services.AddOpenIddict&lt;...&gt;()</code> method, that determines which entities are used depending on the overload.</p><p>In RC3, the generic <code>services.AddOpenIddict&lt;...&gt;()</code> methods have been removed and replaced by a more explicit pattern:</p><img src="/2018/06/20/openiddict-rc3-is-out/core-builder-entities.png" alt="core-builder-entities.png"><a id="more"></a><hr><h3 id="OpenIddict-now-has-its-own-validation-handler-compatible-with-reference-tokens"><a href="#OpenIddict-now-has-its-own-validation-handler-compatible-with-reference-tokens" class="headerlink" title="OpenIddict now has its own validation handler, compatible with reference tokens"></a>OpenIddict now has its own validation handler, compatible with reference tokens</h3><p>Thanks to <a href="https://github.com/openiddict/openiddict-core/pull/589" target="_blank" rel="external">a great contribution from Chino Chang</a>, OpenIddict now has its dedicated validation handler, based on <a href="https://www.nuget.org/packages/AspNet.Security.OAuth.Validation/" target="_blank" rel="external">the aspnet-contrib handler</a>.</p><p><strong>This handler supports both the default token format (opaque) and reference tokens</strong>. Like the aspnet-contrib handler, you can use it as a standalone handler (i.e without having to register the OpenIddict core or server services):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">services.AddOpenIddict()</div><div class="line">    .AddValidation();</div></pre></td></tr></table></figure><p>Resource servers that use reference tokens will have to configure the core services and register the appropriate stores to be able to use it:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Register the OpenIddict services.</span></div><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the Entity Framework entities and stores.</span></div><div class="line">        options.UseEntityFrameworkCore()</div><div class="line">               .UseDbContext&lt;ApplicationDbContext&gt;();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">    .AddValidation(options =&gt; options.UseReferenceTokens());</div></pre></td></tr></table></figure><p>The aspnet-contrib handler will continue to be fully supported and will still be usable with OpenIddict so existing applications can keep using <code>services.AddAuthentication().AddOAuthValidation()</code> instead of <code>services.AddOpenIddict().AddValidation()</code> for opaque token validation.</p><div class="note tip"><p>Note: <code>OpenIddictValidationHandler</code> lives in the <code>OpenIddict.Validation</code> package, which is referenced by the <code>OpenIddict</code> metapackage. <strong>You don&#39;t have to add a new <code>PackageReference</code> to be able to use it</strong>.</p></div><hr><h3 id="MongoDB-is-now-officially-supported"><a href="#MongoDB-is-now-officially-supported" class="headerlink" title="MongoDB is now officially supported"></a>MongoDB is now officially supported</h3><p><strong>OpenIddict now natively supports MongoDB</strong>, one of the most popular NoSQL/document-oriented databases.</p><p>To configure OpenIddict to use MongoDB, reference the <code>OpenIddict.MongoDb</code> package and call the <code>options.UseMongoDb()</code> extension:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>By default, the MongoDB stores will resolve the <code>IMongoDatabase</code> service from the DI container so you&#39;ll have to register it using the usual ASP.NET Core DI extensions. E.g:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.AddSingleton(<span class="keyword">new</span> MongoClient().GetDatabase(<span class="string">"main-db"</span>));</div></pre></td></tr></table></figure><p>Alternatively, developers who work with multiple MongoDB databases in the same application will be able to explicitly set the one they want to use in the OpenIddict options:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb()</div><div class="line">               .UseDatabase(<span class="keyword">new</span> MongoClient().GetDatabase(<span class="string">"openiddict-db"</span>));</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p>If no database can be resolved, an exception will be automatically thrown at runtime.</p><p>Other helpers are available to allow you to customize the default entities or the collection names:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb()</div><div class="line">               .ReplaceDefaultApplicationEntity&lt;MyApp&gt;()</div><div class="line">               .ReplaceDefaultAuthorizationEntity&lt;MyAuth&gt;()</div><div class="line">               .ReplaceDefaultScopeEntity&lt;MyScope&gt;()</div><div class="line">               .ReplaceDefaultTokenEntity&lt;MyToken&gt;()</div><div class="line">               .SetApplicationsCollectionName(<span class="string">"my-apps"</span>)</div><div class="line">               .SetAuthorizationsCollectionName(<span class="string">"my-auths"</span>)</div><div class="line">               .SetScopesCollectionName(<span class="string">"my-scopes"</span>)</div><div class="line">               .SetTokensCollectionName(<span class="string">"my-tokens"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><hr><h3 id="OpenIddict-no-longer-comes-with-a-default-set-of-entities-and-stores-base-classes"><a href="#OpenIddict-no-longer-comes-with-a-default-set-of-entities-and-stores-base-classes" class="headerlink" title="OpenIddict no longer comes with a default set of entities and stores base classes"></a>OpenIddict no longer comes with a default set of entities and stores base classes</h3><p><strong>In the previous iterations of OpenIddict, an important effort was made to create a shared set of entities</strong> (contained in the <code>OpenIddict.Models</code> package) that could be used not only by the official Entity Framework 6.x and Entity Framework Core stores, but also by third-party/custom stores.</p><p>This pattern had many pros - like avoiding code duplication or having base classes that simplify the development of custom stores (which is why it was also eventually adopted by the ASP.NET team for ASP.NET Core Identity in 2.0).</p><p>Unfortunately, this approach had also a major issue: we had to design the default entities as &quot;lowest common denominators&quot;, so that they could be used by all/most ORMs or document databases. In practice, this meant that things like <code>OpenIddictApplication.RedirectUris</code> or <code>OpenIddictApplication.PostLogoutRedirectUris</code> had to be represented as JSON-serialized <code>strings</code> for SQL-oriented ORMs like EF 6.x and EF Core to work natively.</p><p><strong>In RC3, each stores package will come with its own models</strong> you&#39;ll be able to use exactly like in the previous iterations.</p><div class="note info"><p><strong>Make sure you don&#39;t reference the obsolete <code>OpenIddict.Models</code> or <code>OpenIddict.Stores</code> packages</strong>. The new models are automatically referenced by the stores packages they belong to and you don&#39;t need to add any reference to use them.</p></div><hr><h3 id="Application-permissions-have-been-reworked-to-be-simpler"><a href="#Application-permissions-have-been-reworked-to-be-simpler" class="headerlink" title="Application permissions have been reworked to be simpler"></a>Application permissions have been reworked to be simpler</h3><p>In RC2, we introduced application permissions. <strong>To make the migration from RC1 to RC2 smoother, application permissions were mostly optional</strong> and OpenIddict had a fallback mechanism called &quot;implicit permissions&quot; it used to determine whether an application could perform the requested action. For instance, if no permission was explicitly attached to the application, it was considered fully trusted and was granted all the permissions.</p><p>Similarly, if you granted the &quot;token endpoint&quot; permission to an application but NO &quot;grant type&quot; permission, it was assumed the client application was allowed to use the password or client credentials grants.</p><p><strong>Retrospectively, this logic was too complex and I decided to remove it in RC3.</strong></p><p><strong>Starting with RC3, permissions are no longer optional nor implicit</strong>: if you don&#39;t explicitly grant an application the necessary permissions, it will be blocked by OpenIddict.</p><p>To attach permissions to an application, use <code>OpenIddictApplicationManager</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> descriptor = <span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"mvc"</span>,</div><div class="line">    ClientSecret = <span class="string">"901564A5-E7FE-42CB-B10D-61EF6A8F3654"</span>,</div><div class="line">    DisplayName = <span class="string">"MVC client application"</span>,</div><div class="line">    PostLogoutRedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signout-callback-oidc"</span>) &#125;,</div><div class="line">    RedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signin-oidc"</span>) &#125;,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Authorization,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Logout,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.RefreshToken,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Email,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Profile,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Roles</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(descriptor);</div></pre></td></tr></table></figure><p>If you don&#39;t care about permissions (e.g because you don&#39;t have third-party clients), you can instead disable them:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.IgnoreEndpointPermissions()</div><div class="line">               .IgnoreGrantTypePermissions()</div><div class="line">               .IgnoreScopePermissions();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><hr><h3 id="Scope-validation-and-anonymous-clients-rejection-are-now-enabled-by-default"><a href="#Scope-validation-and-anonymous-clients-rejection-are-now-enabled-by-default" class="headerlink" title="Scope validation and anonymous clients rejection are now enabled by default"></a>Scope validation and anonymous clients rejection are now enabled by default</h3><p>Starting with RC3, <strong>OpenIddict will now enforce scope validation and reject token and revocation requests that don&#39;t specify a <code>client_id</code></strong>. In RC2, these checks were opt-in (enabled via <code>options.EnableScopeValidation()</code> and <code>options.RequireClientIdentification()</code>) ; <strong>in RC3, they are now opt-out</strong>.</p><p>If, after migrating to RC3, you see errors similar to these ones:</p><blockquote><p><strong>invalid_scope</strong> : The specified &#39;scope&#39; parameter is not valid.</p></blockquote><p>Simply add the scopes you want to use to the list of registered scopes:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,</div><div class="line">                               OpenIdConnectConstants.Scopes.Profile,</div><div class="line">                               OpenIddictConstants.Scopes.Roles);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><blockquote><p><strong>invalid_request</strong> : The mandatory &#39;client_id&#39; parameter is missing.</p></blockquote><p>Add an application entry for the client application and send the corresponding <code>client_id</code> as part of the token request:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> descriptor = <span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"postman"</span>,</div><div class="line">    DisplayName = <span class="string">"Postman"</span>,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.Password,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.RefreshToken,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Email,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Profile,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Roles</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(descriptor);</div></pre></td></tr></table></figure><p>If you prefer disabling these checks, you can use <code>options.DisableScopeValidation()</code> and <code>options.AcceptAnonymousClients()</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.AcceptAnonymousClients();</div><div class="line">        options.DisableScopeValidation();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><div class="note tip"><p>Note: if you already use <code>options.EnableScopeValidation()</code> and/or <code>options.RequireClientIdentification()</code> in your code, you can safely remove these calls.</p></div><hr><h3 id="New-exception-messages-have-been-introduced-to-make-debugging-easier"><a href="#New-exception-messages-have-been-introduced-to-make-debugging-easier" class="headerlink" title="New exception messages have been introduced to make debugging easier"></a>New exception messages have been introduced to make debugging easier</h3><p>In this release, <strong>we also made debugging easier by adding custom exception messages instead of relying on the rather cryptic DI-related messages</strong> thrown by ASP.NET Core.</p><p>If you forget to register stores, you&#39;ll now get a much clearer exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : No application store has been registered in the dependency injection container.</p><p>To register the Entity Framework Core stores, reference the <code>OpenIddict.EntityFrameworkCore</code> package and call <code>services.AddOpenIddict().AddCore().UseEntityFrameworkCore()</code>.</p><p>To register a custom store, create an implementation of <code>IOpenIddictApplicationStore</code> and use <code>services.AddOpenIddict().AddCore().AddApplicationStore()</code> to add it to the DI container.</p></blockquote><p>If you use an entity that is not compatible with the underlying store, you&#39;ll also get a better exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : The specified application type is not compatible with the Entity Framework Core stores.</p><p>When enabling the Entity Framework Core stores, make sure you use the built-in <code>OpenIddictApplication</code> entity (from the <code>OpenIddict.EntityFrameworkCore.Models</code> package) or a custom entity that inherits from the generic <code>OpenIddictApplication</code> entity.</p></blockquote><p>Similarly, if you forget to register the core services when enabling the server or validation components, you&#39;ll get an exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : The core services must be registered when enabling the server handler. To register the OpenIddict core services, use <code>services.AddOpenIddict().AddCore()</code>.</p></blockquote><blockquote><p><strong>System.InvalidOperationException</strong> : The core services must be registered when enabling reference tokens support. To register the OpenIddict core services, use <code>services.AddOpenIddict().AddCore()</code>.</p></blockquote><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>OpenIddict RC3 will be the latest release candidate and RTM will be the next step.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenIddict RC3 is now available on NuGet.org:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/1.0.0-rc3-final&quot;&gt;OpenIddict – 1.0.0-rc3-final&lt;/a&gt; (for ASP.NET Core 1.x)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/2.0.0-rc3-final&quot;&gt;OpenIddict – 2.0.0-rc3-final&lt;/a&gt; (for ASP.NET Core 2.x)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;What-39-s-new-in-this-release&quot;&gt;&lt;a href=&quot;#What-39-s-new-in-this-release&quot; class=&quot;headerlink&quot; title=&quot;What&amp;#39;s new in this release?&quot;&gt;&lt;/a&gt;What&amp;#39;s new in this release?&lt;/h2&gt;&lt;h3 id=&quot;The-OpenIddict-services-registration-APIs-have-been-revamped&quot;&gt;&lt;a href=&quot;#The-OpenIddict-services-registration-APIs-have-been-revamped&quot; class=&quot;headerlink&quot; title=&quot;The OpenIddict services registration APIs have been revamped&quot;&gt;&lt;/a&gt;The OpenIddict services registration APIs have been revamped&lt;/h3&gt;&lt;p&gt;In this release, &lt;strong&gt;we focused on reworking the OpenIddict registration APIs to offer a better user experience&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;As part of this change, &lt;strong&gt;we split the OpenIddict services into three areas&lt;/strong&gt; - &lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt; and &lt;code&gt;Validation&lt;/code&gt; - and the &lt;code&gt;IServiceCollection&lt;/code&gt; APIs have been updated to reflect that:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/main-builder.png&quot; alt=&quot;main-builder.png&quot;&gt;&lt;p&gt;Each specialized builder only exposes the options that are relevant to its specific area:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/specialized-builders.png&quot; alt=&quot;specialized-builders.png&quot;&gt;&lt;p&gt;Of course, the calls to &lt;code&gt;AddCore()&lt;/code&gt;, &lt;code&gt;AddServer()&lt;/code&gt; and &lt;code&gt;AddValidation()&lt;/code&gt; can be chained:&lt;/p&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;services.AddOpenIddict()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict core services.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddCore(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Register the Entity Framework stores and models.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.UseEntityFrameworkCore()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .UseDbContext&amp;lt;ApplicationDbContext&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict server handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddServer(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Register the ASP.NET Core MVC binder used by OpenIddict.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Note: if you don&#39;t call this method, you won&#39;t be able to&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.UseMvc();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Enable the authorization, logout, token and userinfo endpoints.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.EnableAuthorizationEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/authorize&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableLogoutEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/logout&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableTokenEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/token&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableUserinfoEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/api/userinfo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Note: the Mvc.Client sample only uses the code flow and the password flow, but you&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// can enable the other flows if you need to support implicit or client credentials.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.AllowAuthorizationCodeFlow()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .AllowPasswordFlow()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .AllowRefreshTokenFlow();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// During development, you can disable the HTTPS requirement.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.DisableHttpsRequirement();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict validation handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Note: the OpenIddict validation handler is only compatible with the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// default token format or with reference tokens and cannot be used with&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddValidation();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Introducing these specialized builders was also a great opportunity to revisit how the OpenIddict entities are registered&lt;/strong&gt;. In the RC2 bits, this is controlled by the &lt;code&gt;services.AddOpenIddict&amp;lt;...&amp;gt;()&lt;/code&gt; method, that determines which entities are used depending on the overload.&lt;/p&gt;&lt;p&gt;In RC3, the generic &lt;code&gt;services.AddOpenIddict&amp;lt;...&amp;gt;()&lt;/code&gt; methods have been removed and replaced by a more explicit pattern:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/core-builder-entities.png&quot; alt=&quot;core-builder-entities.png&quot;&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>The aspnet-contrib OAuth 2.0/OpenID 2.0 social providers are now RTM</title>
    <link href="https://kevinchalet.com/2018/06/18/the-aspnet-contrib-oauth-2-0-openid-2-0-social-providers-are-now-rtm/"/>
    <id>https://kevinchalet.com/2018/06/18/the-aspnet-contrib-oauth-2-0-openid-2-0-social-providers-are-now-rtm/</id>
    <published>2018-06-18T20:00:00.000Z</published>
    <updated>2018-06-18T20:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I&#39;m really pleased to announce that the aspnet-contrib social providers are now RTM.</p><p>I&#39;d like to thank all the contributors – 47 at the time of writing – who helped make that possible, with a special mention to <a href="https://github.com/kinosang" target="_blank" rel="external">Chino Chang</a>, who did a fantastic job by manually porting most of the social providers to the ASP.NET Core 2.0 authentication stack: sir, you rock!</p><p>Each provider comes with 2 versions: one for ASP.NET Core 1.x and one for ASP.NET Core 2.x. You can find the complete list at the end of this post.</p><div class="note tip"><p>Both versions will receive security updates/bug fixes but new providers will be backported to ASP.NET Core 1.x only if there&#39;s enough demand. If you still run an ASP.NET Core 1.x application, let us know!</p></div><h2 id="OAuth-2-0-social-providers"><a href="#OAuth-2-0-social-providers" class="headerlink" title="OAuth 2.0 social providers"></a>OAuth 2.0 social providers</h2><table><thead><tr><th style="text-align:center">Package name</th><th style="text-align:center">Version for ASP.NET Core 1.x</th><th style="text-align:center">Version for ASP.NET Core 2.x</th></tr></thead><tbody><tr><td style="text-align:center">AspNet.Security.OAuth.Amazon</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.ArcGIS</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Asana</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Autodesk</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Automatic</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.BattleNet</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Beam</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Bitbucket</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Buffer</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.CiscoSpark</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.DeviantArt</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Discord</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Dropbox</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.EVEOnline</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Fitbit</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Foursquare</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.GitHub</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Gitter</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.HealthGraph</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Imgur</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Instagram</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.LinkedIn</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.MailChimp</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Myob</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Onshape</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Patreon</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Paypal</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.QQ</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Reddit</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Salesforce</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Slack</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.SoundCloud</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Spotify</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.StackExchange</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Strava</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Twitch</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Untappd</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Vimeo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.VisualStudio</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Vkontakte</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Weibo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Weixin</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.WordPress</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yahoo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yammer</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yandex</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr></tbody></table><h2 id="OpenID-2-0-social-providers"><a href="#OpenID-2-0-social-providers" class="headerlink" title="OpenID 2.0 social providers"></a>OpenID 2.0 social providers</h2><table><thead><tr><th style="text-align:center">Package name</th><th style="text-align:center">Version for ASP.NET Core 1.x</th><th style="text-align:center">Version for ASP.NET Core 2.x</th></tr></thead><tbody><tr><td style="text-align:center">AspNet.Security.OpenId</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OpenId.Steam</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today, I&amp;#39;m really pleased to announce that the aspnet-contrib social providers are now RTM.&lt;/p&gt;&lt;p&gt;I&amp;#39;d like to thank all the contr
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid" scheme="https://kevinchalet.com/tags/openid/"/>
    
  </entry>
  
  <entry>
    <title>OpenIddict RC2 is now on NuGet.org</title>
    <link href="https://kevinchalet.com/2018/02/19/openiddict-rc2-is-now-on-nuget-org/"/>
    <id>https://kevinchalet.com/2018/02/19/openiddict-rc2-is-now-on-nuget-org/</id>
    <published>2018-02-19T18:00:00.000Z</published>
    <updated>2018-02-19T17:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, new OpenIddict packages were pushed to NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc2-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc2-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc2-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc2-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><p>Starting with RC2, <strong>using OpenIddict with third-party client applications</strong> (i.e applications you don&#39;t own and are managed by someone else) <strong>is officially supported</strong>. For that, new features – that were still work in progress in the previous iterations – have been added:</p><ul><li>A new <strong>application permissions feature was added</strong>, which allows controlling and limiting the features a client application can use. For instance, to allow a client application to use only the authorization code flow and the logout endpoint, the following permissions can be granted:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(<span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"mvc"</span>,</div><div class="line">    ClientSecret = <span class="string">"901564A5-E7FE-42CB-B10D-61EF6A8F3654"</span>,</div><div class="line">    DisplayName = <span class="string">"MVC client application"</span>,</div><div class="line">    PostLogoutRedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signout-callback-oidc"</span>) &#125;,</div><div class="line">    RedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signin-oidc"</span>) &#125;,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Authorization,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Logout,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line"></div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>For more information about this feature, you can read <a href="https://openiddict.github.io/openiddict-documentation/features/application-permissions.html" target="_blank" rel="external">the corresponding documentation</a>.</p><ul><li>A new <strong>opt-in scope validation option was added</strong>. When it is enabled, OpenIddict automatically rejects authorization and token requests that specify unregistered scopes. Scopes can be registered statically using <code>options.RegisterScopes([list of authorized scopes])</code> or dynamically, using <code>OpenIddictScopeManager.CreateAsync()</code>:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict(options =&gt;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// Mark the "email" and "profile" scopes as valid scopes.</span></div><div class="line">    options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,</div><div class="line">                           OpenIdConnectConstants.Scopes.Profile);</div><div class="line"></div><div class="line">    <span class="comment">// Enable scope validation, so that authorization and token requests</span></div><div class="line">    <span class="comment">// that specify unregistered scopes are automatically rejected.</span></div><div class="line">    options.EnableScopeValidation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _scopeManager.CreateAsync(<span class="keyword">new</span> OpenIddictScopeDescriptor</div><div class="line">&#123;</div><div class="line">    Description = <span class="string">"Grants access to the reporting API"</span>,</div><div class="line">    DisplayName = <span class="string">"Reporting API"</span>,</div><div class="line">    Name = <span class="string">"reporting"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>The <strong>introspection endpoint was updated to reject access tokens that don&#39;t have any audience</strong> (since OpenIddict can no longer assume all the registered applications are fully trusted). This change requires updating your code to explicitly attach a resource to your tokens.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">    <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">    <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">ticket.SetResources(<span class="string">"reporting"</span>);</div></pre></td></tr></table></figure><a id="more"></a><ul><li>New <code>OpenIddictScopeManager</code> methods have been introduced to allow associating resources (aka API audiences) with specific scopes and retrieving all the resources corresponding to a set of scopes:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _scopeManager.CreateAsync(<span class="keyword">new</span> OpenIddictScopeDescriptor</div><div class="line">&#123;</div><div class="line">    Name = <span class="string">"reporting"</span>,</div><div class="line">    Resources = &#123; <span class="string">"resource-server-1"</span>, <span class="string">"resource-server-2"</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ticket.SetResources(<span class="keyword">await</span> _scopeManager.ListResourcesAsync(scopes));</div></pre></td></tr></table></figure><ul><li>New <code>OpenIddictAuthorizationManager</code> methods have been added to make authorizations easier to create or retrieve:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a new permanent authorization associated with</span></div><div class="line"><span class="comment">// the specified user and containing the granted scopes:</span></div><div class="line"><span class="keyword">var</span> authorization = <span class="keyword">await</span> _authorizationManager.CreateAsync(</div><div class="line">    principal : ticket.Principal,</div><div class="line">    subject   : <span class="keyword">await</span> _userManager.GetUserIdAsync(user),</div><div class="line">    client    : <span class="keyword">await</span> _applicationManager.GetIdAsync(application),</div><div class="line">    type      : OpenIddictConstants.AuthorizationTypes.Permanent,</div><div class="line">    scopes    : ImmutableArray.CreateRange(ticket.GetScopes()),</div><div class="line">    properties: ImmutableDictionary.CreateRange(ticket.Properties.Items));</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Retrieve all the permanent and valid authorizations associated</span></div><div class="line"><span class="comment">// with the user and containing at least the request scopes:</span></div><div class="line"><span class="keyword">var</span> authorizations = <span class="keyword">await</span> _authorizationManager.FindAsync(</div><div class="line">    subject: _userManager.GetUserId(result.Principal),</div><div class="line">    client : <span class="keyword">await</span> _applicationManager.GetIdAsync(application),</div><div class="line">    status : OpenIddictConstants.Statuses.Valid,</div><div class="line">    type   : OpenIddictConstants.AuthorizationTypes.Permanent,</div><div class="line">    scopes : ImmutableArray.CreateRange(request.GetScopes()));</div></pre></td></tr></table></figure><ul><li><code>OpenIddictApplication.RedirectUris</code>, <code>OpenIddictApplication.PostLogoutRedirectUris</code> and <code>OpenIddictAuthorization.Scopes</code> are now serialized as JSON arrays in the database.</li></ul><h2 id="Migrate-to-OpenIddict-RC2"><a href="#Migrate-to-OpenIddict-RC2" class="headerlink" title="Migrate to OpenIddict RC2"></a>Migrate to OpenIddict RC2</h2><p><strong>Before updating your packages, read the <a href="https://openiddict.github.io/openiddict-documentation/guide/migration.html" target="_blank" rel="external">migration guide</a></strong>. It explains how to add an Entity Framework Core migration to update the OpenIddict tables and includes a migration script to convert the <code>RedirectUris</code>, <code>PostLogoutRedirectUris</code> and <code>Scopes</code> columns to the new JSON format.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Earlier today, new OpenIddict packages were pushed to NuGet.org:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/1.0.0-rc2-final&quot;&gt;OpenIddict – 1.0.0-rc2-final&lt;/a&gt; (for ASP.NET Core 1.x)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/2.0.0-rc2-final&quot;&gt;OpenIddict – 2.0.0-rc2-final&lt;/a&gt; (for ASP.NET Core 2.x)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;What-39-s-new&quot;&gt;&lt;a href=&quot;#What-39-s-new&quot; class=&quot;headerlink&quot; title=&quot;What&amp;#39;s new?&quot;&gt;&lt;/a&gt;What&amp;#39;s new?&lt;/h2&gt;&lt;p&gt;Starting with RC2, &lt;strong&gt;using OpenIddict with third-party client applications&lt;/strong&gt; (i.e applications you don&amp;#39;t own and are managed by someone else) &lt;strong&gt;is officially supported&lt;/strong&gt;. For that, new features – that were still work in progress in the previous iterations – have been added:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A new &lt;strong&gt;application permissions feature was added&lt;/strong&gt;, which allows controlling and limiting the features a client application can use. For instance, to allow a client application to use only the authorization code flow and the logout endpoint, the following permissions can be granted:&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; _applicationManager.CreateAsync(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OpenIddictApplicationDescriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ClientId = &lt;span class=&quot;string&quot;&gt;&quot;mvc&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ClientSecret = &lt;span class=&quot;string&quot;&gt;&quot;901564A5-E7FE-42CB-B10D-61EF6A8F3654&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DisplayName = &lt;span class=&quot;string&quot;&gt;&quot;MVC client application&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PostLogoutRedirectUris = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Uri(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:53507/signout-callback-oidc&quot;&lt;/span&gt;) &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    RedirectUris = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Uri(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:53507/signin-oidc&quot;&lt;/span&gt;) &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Permissions =&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Authorization,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Logout,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Token,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;For more information about this feature, you can read &lt;a href=&quot;https://openiddict.github.io/openiddict-documentation/features/application-permissions.html&quot;&gt;the corresponding documentation&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A new &lt;strong&gt;opt-in scope validation option was added&lt;/strong&gt;. When it is enabled, OpenIddict automatically rejects authorization and token requests that specify unregistered scopes. Scopes can be registered statically using &lt;code&gt;options.RegisterScopes([list of authorized scopes])&lt;/code&gt; or dynamically, using &lt;code&gt;OpenIddictScopeManager.CreateAsync()&lt;/code&gt;:&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;services.AddOpenIddict(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Mark the &quot;email&quot; and &quot;profile&quot; scopes as valid scopes.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                           OpenIdConnectConstants.Scopes.Profile);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Enable scope validation, so that authorization and token requests&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// that specify unregistered scopes are automatically rejected.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options.EnableScopeValidation();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; _scopeManager.CreateAsync(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OpenIddictScopeDescriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Description = &lt;span class=&quot;string&quot;&gt;&quot;Grants access to the reporting API&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DisplayName = &lt;span class=&quot;string&quot;&gt;&quot;Reporting API&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Name = &lt;span class=&quot;string&quot;&gt;&quot;reporting&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;The &lt;strong&gt;introspection endpoint was updated to reject access tokens that don&amp;#39;t have any audience&lt;/strong&gt; (since OpenIddict can no longer assume all the registered applications are fully trusted). This change requires updating your code to explicitly attach a resource to your tokens.&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ticket = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AuthenticationTicket(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClaimsPrincipal(identity),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AuthenticationProperties(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    OpenIdConnectServerDefaults.AuthenticationScheme);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ticket.SetResources(&lt;span class=&quot;string&quot;&gt;&quot;reporting&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Why you should never use Html.Raw in your Razor views</title>
    <link href="https://kevinchalet.com/2018/01/09/why-you-should-never-use-html-raw-in-your-razor-views/"/>
    <id>https://kevinchalet.com/2018/01/09/why-you-should-never-use-html-raw-in-your-razor-views/</id>
    <published>2018-01-09T18:30:00.000Z</published>
    <updated>2019-02-10T13:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, <strong>Microsoft released two security advisories for vulnerabilities I discovered in the ASP.NET Core 2.0 VS2017 templates</strong> and reported late October:</p><ul><li><p><a href="https://github.com/aspnet/Announcements/issues/284" target="_blank" rel="external"><strong>CVE-2018-0785</strong> - ASP.NET Core Templates enable Cross Site Request Forgery</a>: a CSRF vulnerability in <code>ManageController.GenerateRecoveryCodes()</code> allows re-generating the recovery codes associated with a victim&#39;s account, which may result in a definitive account lockout (aka per-user denial of service).</p></li><li><p><a href="https://github.com/aspnet/Announcements/issues/285" target="_blank" rel="external"><strong>CVE-2018-0784</strong> - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability</a>.</p></li></ul><p>While the first one is a very classic case of cross-site request forgery (CSRF), the second one is a bit more interesting as it relies on a specificity of ASP.NET Core MVC to be exploited.</p><h2 id="Where-was-the-vulnerability-located"><a href="#Where-was-the-vulnerability-located" class="headerlink" title="Where was the vulnerability located?"></a>Where was the vulnerability located?</h2><p>When you create a new project based on the ASP.NET Core 2.0 templates offered by Visual Studio 2017 and opt for individual authentication (that uses ASP.NET Core Identity under the hood), a new <code>ManageController</code> and a bunch of views are automatically added to the resulting solution.</p><p>One of the actions exposed by this controller, <code>EnableAuthenticator</code>, allows you to generate a shared secret you can use in your favorite TOTP-based application (like Microsoft or Google Authenticator) to enable 2-factor authentication:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[HttpGet]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">EnableAuthenticator</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">await</span> _userManager.GetUserAsync(User);</div><div class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="string">$"Unable to load user with ID '<span class="subst">&#123;_userManager.GetUserId(User)&#125;</span>'."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> unformattedKey = <span class="keyword">await</span> _userManager.GetAuthenticatorKeyAsync(user);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(unformattedKey))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> _userManager.ResetAuthenticatorKeyAsync(user);</div><div class="line">        unformattedKey = <span class="keyword">await</span> _userManager.GetAuthenticatorKeyAsync(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> model = <span class="keyword">new</span> EnableAuthenticatorViewModel</div><div class="line">    &#123;</div><div class="line">        SharedKey = FormatKey(unformattedKey),</div><div class="line">        AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> View(model);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>For that, a random value is generated server-side by Identity, stored in the database and used to build a special <code>otpauth://totp</code> URI which is <strong>rendered in the Razor view as an HTML attribute</strong> (that can be optionally read by a JS library to generate a QR code image client-side):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>@Model.SharedKey<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">"@Html.Raw(Model.AuthenticatorUri)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>xuht bbzd 3juv 4kt6 glpb l5tc jbc6 yjsn<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">"otpauth://totp/myappname:alice@bob.com?secret=XUHTBBZD3JUV4KT6GLPBL5TCJBC6YJSN&amp;issuer=myappname&amp;digits=6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="What-does-the-vulnerability-consist-in"><a href="#What-does-the-vulnerability-consist-in" class="headerlink" title="What does the vulnerability consist in?"></a>What does the vulnerability consist in?</h2><p>As you can see, <strong>the view uses <code>Html.Raw</code> to render the generated authenticator URI</strong>, which is confirmed by the fact the <code>&amp;</code> character is not properly HTML-encoded (it should be rendered in the HTML document as <code>&amp;amp;</code> since it&#39;s a special character).</p><p><strong>Innocently, you might think it&#39;s not a big deal since <code>AuthenticatorUri</code> is generated server-side</strong> (and thus can&#39;t be directly set by an attacker).</p><p><strong>Unfortunately, that&#39;s not exact</strong>: while it&#39;s true that adding an <code>AuthenticatorUri</code> paramater will have initially no effect on the GET <code>EnableAuthenticator</code> action (since the value will be always overridden when setting <code>EnableAuthenticatorViewModel.AuthenticatorUri</code> before returning the view), <strong>the query string value will be used if the form is re-displayed</strong>.</p><p><strong>Yet, that&#39;s exactly what the POST action does if the model state is not valid</strong> (e.g because the 2FA confirmation code was not correctly typed by the user or was invalid, which may happen if the date/time differ between the server and the device that generated the 2FA code):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[HttpPost]</div><div class="line">[ValidateAntiForgeryToken]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">EnableAuthenticator</span>(<span class="params">EnableAuthenticatorViewModel model</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!ModelState.IsValid)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> View(model);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">await</span> _userManager.GetUserAsync(User);</div><div class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="string">$"Unable to load user with ID '<span class="subst">&#123;_userManager.GetUserId(User)&#125;</span>'."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Strip spaces and hypens</span></div><div class="line">    <span class="keyword">var</span> verificationCode = model.Code.Replace(<span class="string">" "</span>, <span class="keyword">string</span>.Empty).Replace(<span class="string">"-"</span>, <span class="keyword">string</span>.Empty);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> is2faTokenValid = <span class="keyword">await</span> _userManager.VerifyTwoFactorTokenAsync(</div><div class="line">        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!is2faTokenValid)</div><div class="line">    &#123;</div><div class="line">        ModelState.AddModelError(<span class="string">"model.Code"</span>, <span class="string">"Verification code is invalid."</span>);</div><div class="line">        <span class="keyword">return</span> View(model);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">await</span> _userManager.SetTwoFactorEnabledAsync(user, <span class="literal">true</span>);</div><div class="line">    _logger.LogInformation(<span class="string">"User with ID &#123;UserId&#125; has enabled 2FA with an authenticator app."</span>, user.Id);</div><div class="line">    <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(GenerateRecoveryCodes));</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note tip"><p>This feature – which is part of ASP.NET Core MVC&#39;s model binding/validation stack – is extremely useful since it&#39;s what allows the users of your websites to avoid re-typing all the values of an invalid form when it&#39;s re-displayed.</p></div><p><strong>The bad news is that using this specificity alongside <code>Html.Raw</code> can result in a XSS vulnerability being exploitable</strong> since an attacker can craft a special URL containing a malicious JavaScript payload that will be executed by the victim&#39;s browser if he or she sends an invalid 2FA confirmation code.</p><p>For instance, if a victim visits <code>https://localhost:44370/Manage/EnableAuthenticator?AuthenticatorUri=%22%3E%3C/div%3E%00%00%00%00%00%00%00%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</code> (which uses a special pattern to bypass Chrome 61&#39;s XSS auditor feature) and enters an invalid code, the following HTML source will be rendered:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>       <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"XSS"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="How-can-I-fix-the-vulnerability"><a href="#How-can-I-fix-the-vulnerability" class="headerlink" title="How can I fix the vulnerability?"></a>How can I fix the vulnerability?</h2><p>Detailed instructions are listed <a href="https://github.com/aspnet/Announcements/issues/285" target="_blank" rel="external">on Microsoft&#39;s announcement</a>.</p><h2 id="So-what-39-s-wrong-with-Html-Raw"><a href="#So-what-39-s-wrong-with-Html-Raw" class="headerlink" title="So, what&#39;s wrong with Html.Raw?"></a>So, what&#39;s wrong with <code>Html.Raw</code>?</h2><p>In some cases, disabling HTML encoding is just unavoidable, for instance if the content is already encoded: not doing that would result in double-encoding.</p><p>So, why shouldn&#39;t you use <code>Html.Raw</code> in your views? It&#39;s actually all about intent: <code>Html.Raw</code> encourages developers to &quot;disable&quot; HTML encoding at the wrong layer (i.e in the view rather than in the controller itself) by declaring already-encoded HTML properties as simple <code>string</code> properties in their view model rather than as <code>HtmlString</code> properties.</p><p>Using this type instead of <code>Html.Raw</code> has two big advantages, that would have helped avoid this vulnerability in the first place:</p><ul><li><p>By marking your view model properties as <code>HtmlString</code>, you force the developer in charge of maintaining the controller code to manually create a <code>HtmlString</code> instance from an existing string: <code>new HtmlString(existingEncodedString)</code>. Technically, the result is exactly the same, but it&#39;s now clear by looking at either your view model or your controller code that a property is not a simple <code>string</code>, but something hightly susceptible of containing HTML payloads you should treat with extreme care.</p></li><li><p><code>HtmlString</code> is not bindable: a form model containing a <code>HtmlString</code> will never be populated with user input. In this specific case, exploiting the bug wouldn&#39;t have been possible with <code>HtmlString</code>.</p></li></ul><p>Please, do yourself a favor: stop using <code>Html.Raw</code>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Earlier today, &lt;strong&gt;Microsoft released two security advisories for vulnerabilities I discovered in the ASP.NET Core 2.0 VS2017 templat
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="razor" scheme="https://kevinchalet.com/tags/razor/"/>
    
      <category term="vulnerability" scheme="https://kevinchalet.com/tags/vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>The new ASOS and OpenIddict packages are now on NuGet.org</title>
    <link href="https://kevinchalet.com/2017/10/20/the-new-asos-and-openiddict-packages-are-now-on-nuget-org/"/>
    <id>https://kevinchalet.com/2017/10/20/the-new-asos-and-openiddict-packages-are-now-on-nuget-org/</id>
    <published>2017-10-20T21:00:00.000Z</published>
    <updated>2017-10-20T20:41:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today&#39;s the day: new ASOS and OpenIddict packages (compatible with ASP.NET Core 1.0 and 2.0) have just been pushed to NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/1.0.2" target="_blank" rel="external">AspNet.Security.OpenIdConnect.Server – 1.0.2</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/2.0.0-rc1-final" target="_blank" rel="external">AspNet.Security.OpenIdConnect.Server – 2.0.0-rc1-final</a> (for ASP.NET Core 2.x)</li><li><a href="https://www.nuget.org/packages/Owin.Security.OpenIdConnect.Server/1.0.2" target="_blank" rel="external">Owin.Security.OpenIdConnect.Server – 1.0.2</a> (for OWIN/Katana 3.x)</li><li><a href="https://www.nuget.org/packages/Owin.Security.OpenIdConnect.Server/2.0.0-rc1-final" target="_blank" rel="external">Owin.Security.OpenIdConnect.Server – 2.0.0-rc1-final</a> (for OWIN/Katana 4.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc1-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc1-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc1-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc1-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><h3 id="In-AspNet-Security-OpenIdConnect-Server-and-Owin-Security-OpenIdConnect-Server-1-0-2"><a href="#In-AspNet-Security-OpenIdConnect-Server-and-Owin-Security-OpenIdConnect-Server-1-0-2" class="headerlink" title="In AspNet.Security.OpenIdConnect.Server and Owin.Security.OpenIdConnect.Server 1.0.2"></a>In AspNet.Security.OpenIdConnect.Server and Owin.Security.OpenIdConnect.Server 1.0.2</h3><ul><li>Calling <code>context.HandleResponse()</code> from the <code>SerializeAuthorizationCode</code>, <code>SerializeAccessToken</code>, <code>SerializeIdentityToken</code> and <code>SerializeRefreshToken</code> events no longer throws an exception if the authentication ticket is not explicitly set (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/c734c6f09952f89906398fd6d0e0d7c311084e31" target="_blank" rel="external">c734c6f</a>).</li><li>An invalid exception message mentioning OpenIddict was reworded (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/cd83912b47239ab7a47b6e8b4c312044890e9e84" target="_blank" rel="external">cd83912</a>).</li><li>The authorization code/access token/identity token/refresh token deserialization methods are no longer called twice for introspection and revocation requests that specify a <code>token_type_hint</code> that doesn&#39;t match the actual token type (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/c561a3418daefda64f7bd27ae5d9b2f0dce03e27" target="_blank" rel="external">c561a34</a>).</li><li>A standard-compliant <code>Expires</code> HTTP header is now returned by the non-interactive ASOS endpoints (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/5af1d44f933a1c81f1e159ac2cb7ee949e863d15" target="_blank" rel="external">5af1d44</a>).</li><li>New constants have been added to <code>OpenIdConnectConstants</code> (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/0980fb8836daeb02edeea9efd53dc75965c678e5" target="_blank" rel="external">0980fb8</a>) (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/461ecd44c6b1398a43f9ce7462718941476dbcf1" target="_blank" rel="external">461ecd4</a>).</li><li>New events allowing to control the sign-in, sign-out and challenge operations have been introduced (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/d95810b28167409b8b9e60059568341fef113eb8" target="_blank" rel="external">d95810b</a>) (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/3801427b4a69a927b7ec56156e92b66caba92eee" target="_blank" rel="external">3801427</a>).</li></ul><h3 id="In-AspNet-Security-OpenIdConnect-Server-2-0-0-rc1-final"><a href="#In-AspNet-Security-OpenIdConnect-Server-2-0-0-rc1-final" class="headerlink" title="In AspNet.Security.OpenIdConnect.Server 2.0.0-rc1-final"></a>In AspNet.Security.OpenIdConnect.Server 2.0.0-rc1-final</h3><h4 id="OpenIdConnectServerProvider-can-now-be-resolved-from-the-DI-container"><a href="#OpenIdConnectServerProvider-can-now-be-resolved-from-the-DI-container" class="headerlink" title="OpenIdConnectServerProvider can now be resolved from the DI container"></a><code>OpenIdConnectServerProvider</code> can now be resolved from the DI container</h4><p>Good news: <code>OpenIdConnectServerProvider</code> can now be used with dependency injection thanks to a huge refactoring of the ASP.NET Core 2.0 authentication stack, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/275" target="_blank" rel="external">that now implements the options-based pattern I recommended</a>.</p><p>To use constructor-injected dependencies in your provider, you can ask ASOS to resolve the provider instance at request-time by setting the new <code>OpenIdConnectServerOptions.ProviderType</code> option (which is a wrapper around <code>AuthenticationSchemeOptions.EventsType</code>):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationProvider</span> : <span class="title">OpenIdConnectServerProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ApplicationContext _database;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationProvider</span>(<span class="params">ApplicationContext database</span>)</span></div><div class="line">    &#123;</div><div class="line">        _database = database;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register your custom provider in the DI container.</span></div><div class="line">        services.AddScoped&lt;AuthorizationProvider&gt;();</div><div class="line"></div><div class="line">        services.AddAuthentication()</div><div class="line">            .AddOpenIdConnectServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// ...</span></div><div class="line"></div><div class="line">                <span class="comment">// Ask ASOS to resolve the provider instance corresponding</span></div><div class="line">                <span class="comment">// to the specified type when an OIDC request is received.</span></div><div class="line">                options.ProviderType = <span class="keyword">typeof</span>(AuthorizationProvider);</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note info"><p>Such feature requires built-in support in the authentication stack and thus, is unfortunately not available in the OWIN/Katana version of ASOS 2.x.</p></div><h3 id="In-Owin-Security-OpenIdConnect-Server-2-0-0-rc1-final"><a href="#In-Owin-Security-OpenIdConnect-Server-2-0-0-rc1-final" class="headerlink" title="In Owin.Security.OpenIdConnect.Server 2.0.0-rc1-final"></a>In Owin.Security.OpenIdConnect.Server 2.0.0-rc1-final</h3><p><strong>The OWIN/Katana version of ASOS 2.x now requires targeting the <code>Microsoft.Owin</code> <code>4.0.0-alpha1</code> packages</strong>, which are natively compatible with IdentityModel 5.2.0-preview1 (unlike the previous iteration).</p><h3 id="In-OpenIddict-1-0-0-rc1-final-and-2-0-0-rc1-final"><a href="#In-OpenIddict-1-0-0-rc1-final-and-2-0-0-rc1-final" class="headerlink" title="In OpenIddict 1.0.0-rc1-final and 2.0.0-rc1-final"></a>In OpenIddict 1.0.0-rc1-final and 2.0.0-rc1-final</h3><p>OpenIddict 1.0.0-rc1-final/2.0.0-rc1-final is the first public version of OpenIddict. To learn more about the changes added since the first betas, don&#39;t hesitate to take a look at <a href="https://github.com/openiddict/openiddict-core/issues?q=milestone%3A2.0.0-rc1" target="_blank" rel="external">the GitHub repository</a>.</p><a id="more"></a><h2 id="What-package-s-should-I-reference"><a href="#What-package-s-should-I-reference" class="headerlink" title="What package(s) should I reference?"></a>What package(s) should I reference?</h2><p>Depending on <strong>whether your application targets OWIN/Katana 1.x/2.x or ASP.NET Core 1.x/2.x, you&#39;ll need to reference different versions</strong> of the ASOS/OpenIddict packages as the authentication stack has been completely revamped in ASP.NET Core 2.0. For more information about these changes, read the <a href="https://github.com/aspnet/Announcements/issues/262" target="_blank" rel="external">Auth 2.0 Changes / Migration announcement on GitHub</a>.</p><h3 id="Your-application-uses-the-low-level-OpenID-Connect-server-handler-aka-ASOS"><a href="#Your-application-uses-the-low-level-OpenID-Connect-server-handler-aka-ASOS" class="headerlink" title="Your application uses the low-level OpenID Connect server handler (aka ASOS)"></a>Your application uses the low-level OpenID Connect server handler (aka ASOS)</h3><h4 id="Your-application-is-an-ASP-NET-Core-1-x-2-x-project"><a href="#Your-application-is-an-ASP-NET-Core-1-x-2-x-project" class="headerlink" title="Your application is an ASP.NET Core 1.x/2.x project"></a>Your application is an ASP.NET Core 1.x/2.x project</h4><table><thead><tr><th style="text-align:center">ASP.NET Core version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">AspNet.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>1.0.2</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">AspNet.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr></tbody></table><h4 id="Your-application-is-an-OWIN-Katana-legacy-ASP-NET-project"><a href="#Your-application-is-an-OWIN-Katana-legacy-ASP-NET-project" class="headerlink" title="Your application is an OWIN/Katana (legacy ASP.NET) project"></a>Your application is an OWIN/Katana (legacy ASP.NET) project</h4><table><thead><tr><th style="text-align:center">OWIN/Katana version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>3.x</strong></td><td style="text-align:center">Owin.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>1.0.2</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>4.x</strong></td><td style="text-align:center">Owin.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr></tbody></table><h3 id="Your-application-uses-OpenIddict"><a href="#Your-application-uses-OpenIddict" class="headerlink" title="Your application uses OpenIddict"></a>Your application uses OpenIddict</h3><table><thead><tr><th style="text-align:center">ASP.NET Core version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server component that is needed to handle OAuth2 and OIDC requests.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.5.1).</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server component that is needed to handle OAuth2 and OIDC requests.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.6.1).</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr></tbody></table><div class="note tip"><p>When using OpenIddict, the appropriate ASOS version will be automatically chosen by NuGet: <strong>you don&#39;t need to explicitly reference</strong> the <code>AspNet.Security.OpenIdConnect.Server</code> package.</p></div>]]></content>
    
    <summary type="html">
    
      In this post, discover what&#39;s new in the latest ASOS and OpenIddict packages.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Using Azure Key Vault with ASOS and OpenIddict</title>
    <link href="https://kevinchalet.com/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/"/>
    <id>https://kevinchalet.com/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/</id>
    <published>2017-08-15T15:00:00.000Z</published>
    <updated>2017-08-15T14:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last week, I received an email from someone who was asking me whether <strong>ASOS or OpenIddict could be used with Azure Key Vault</strong> (Microsoft&#39;s cloud-based Hardware Security Module offer). Since it&#39;s quite a recurring question, I thought it was worth writing a blog post to demonstrate how to do that.</p><p>So, good news: <strong>this is definitely possible</strong>! And thanks to <a href="https://github.com/onovotny/RSAKeyVaultProvider" target="_blank" rel="external">a new project</a> released recently by <a href="https://github.com/onovotny" target="_blank" rel="external">Oren Novotny</a>, this has never been so easy.</p><h2 id="What-is-a-Hardware-Security-Module"><a href="#What-is-a-Hardware-Security-Module" class="headerlink" title="What is a Hardware Security Module?"></a>What is a Hardware Security Module?</h2><p>A HSM is a <strong>hardened device</strong> – generally a PCI board or a standalone appliance – that is exclusively <strong>dedicated to cryptographic operations</strong> (data encryption/decryption, data signing/verification, key management, etc.). Though HSMs are complex systems, the main idea is actually simple: <strong>key material should never leave the HSM&#39;s secure enclave</strong>, which is protected against physical or digital intrusions.</p><p>As such, when a service requires encrypting or signing data (e.g a JWT access token in our case), it has to ask the Hardware Security Module to execute the cryptographic operation on its behalf.</p><h2 id="Use-Azure-Key-Vault-to-sign-the-JWT-tokens-issued-by-ASOS-OpenIddict"><a href="#Use-Azure-Key-Vault-to-sign-the-JWT-tokens-issued-by-ASOS-OpenIddict" class="headerlink" title="Use Azure Key Vault to sign the JWT tokens issued by ASOS/OpenIddict"></a>Use Azure Key Vault to sign the JWT tokens issued by ASOS/OpenIddict</h2><h3 id="Create-a-new-HSM-key-and-register-a-client-application-allowed-to-access-it"><a href="#Create-a-new-HSM-key-and-register-a-client-application-allowed-to-access-it" class="headerlink" title="Create a new HSM key and register a client application allowed to access it"></a>Create a new HSM key and register a client application allowed to access it</h3><p>If you don&#39;t have a key yet, you&#39;ll have to create one, register a new application in the Azure Active Directory database and grant it an access to your signing key. If you&#39;re not familiar with this procedure, I encourage you to read <a href="https://www.humankode.com/asp-net-core/how-to-store-secrets-in-azure-key-vault-using-net-core" target="_blank" rel="external">this tutorial</a> or watch the corresponding video:</p><div class="video-container"><iframe src="//www.youtube.com/embed/cdoY_pnqPiA" frameborder="0" allowfullscreen></iframe></div><div class="note info"><p><strong>Azure Key Vault actually offers two pricing tiers: standard and premium</strong>. To be able to generate a HSM-protected key (referred to as &quot;hardware key&quot;), you <strong>must</strong> choose the premium tier when creating your vault. Don&#39;t worry, the difference between the two tiers is unbelievably marginal: at the time of writing, <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/" target="_blank" rel="external">$1/month per RSA 2048-bit key</a>.</p></div><a id="more"></a><h3 id="Register-the-aspnet-contrib-and-rsakeyvaultprovider-NuGet-feeds"><a href="#Register-the-aspnet-contrib-and-rsakeyvaultprovider-NuGet-feeds" class="headerlink" title="Register the aspnet-contrib and rsakeyvaultprovider NuGet feeds"></a>Register the aspnet-contrib and rsakeyvaultprovider NuGet feeds</h3><p>To register the required feeds, simply update or add a <code>NuGet.config</code> file at the root of your project:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"NuGet"</span> <span class="attr">value</span>=<span class="string">"https://api.nuget.org/v3/index.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"aspnet-contrib"</span> <span class="attr">value</span>=<span class="string">"https://www.myget.org/F/aspnet-contrib/api/v3/index.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"rsakeyvaultprovider"</span> <span class="attr">value</span>=<span class="string">"https://www.myget.org/F/rsakeyvaultprovider/api/v3/index.json"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Install-the-ASOS-OpenIddict-and-RSAKeyVaultProvider-packages"><a href="#Install-the-ASOS-OpenIddict-and-RSAKeyVaultProvider-packages" class="headerlink" title="Install the ASOS/OpenIddict and RSAKeyVaultProvider packages"></a>Install the ASOS/OpenIddict and RSAKeyVaultProvider packages</h3><p>For that, simply update your <code>.csproj</code> file to register the <code>RSAKeyVaultProvider</code> package and, <strong>depending on whether you&#39;re using</strong> <strong>ASOS or OpenIddict</strong>, <code>OpenIddict</code> (and <code>OpenIddict.EntityFrameworkCore</code>) or <code>AspNet.Security.OpenIdConnect.Server</code>:</p><h4 id="ASOS"><a href="#ASOS" class="headerlink" title="ASOS"></a>ASOS</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenIdConnect.Server"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.All"</span> <span class="attr">Version</span>=<span class="string">"2.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"RSAKeyVaultProvider"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview.1.build.16"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="OpenIddict"><a href="#OpenIddict" class="headerlink" title="OpenIddict"></a>OpenIddict</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.All"</span> <span class="attr">Version</span>=<span class="string">"2.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"RSAKeyVaultProvider"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview.1.build.16"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><div class="note tip"><p><strong>This blog post was written for the ASP.NET Core 2.0 RTM versions of ASOS and OpenIddict</strong>, so make sure you&#39;re using the corresponding packages and not packages designed for ASP.NET Core 1.x.</p></div><h3 id="Retrieve-the-RSA-security-key-bundle-from-Azure-Key-Vault"><a href="#Retrieve-the-RSA-security-key-bundle-from-Azure-Key-Vault" class="headerlink" title="Retrieve the RSA security key bundle from Azure Key Vault"></a>Retrieve the RSA security key bundle from Azure Key Vault</h3><p>If you&#39;re already familiar with Azure Key Vault&#39;s API, the following snippet should be straightforward. The only particularity is the use of the <code>ToRSA(KeyBundle keyBundle)</code> extension provided by the <code>RSAKeyVaultProvider</code> package.</p><p>Its task is simple: <strong>returning a <code>RSA</code> instance that delegates the signing and decryption operations</strong> – that both require having direct access to the private key and thus can&#39;t be executed locally – to Azure Key Vault. This way, <strong>when ASOS or OpenIddict will need to sign a JWT access or identity token</strong>, they&#39;ll indirectly <strong>call Azure Key Vault&#39;s REST endpoints</strong> to generate the precious signature instead of doing that locally.</p><figure class="highlight csharp"><figcaption><span>KeyVaultHelper.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">KeyVaultHelper</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RsaSecurityKey <span class="title">GetSigningKey</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Note: Azure Key Vault's SDK automatically takes care of</span></div><div class="line">        <span class="comment">// renewing access tokens when necessary. You don't need to</span></div><div class="line">        <span class="comment">// handle that yourself as it includes a static cache.</span></div><div class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> KeyVaultClient(<span class="keyword">async</span> (authority, resource, scope) =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> context = <span class="keyword">new</span> AuthenticationContext(authority);</div><div class="line">            <span class="keyword">var</span> credentials = <span class="keyword">new</span> ClientCredential(<span class="string">"&#123;client identifier&#125;"</span>, <span class="string">"&#123;client secret&#125;"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> context.AcquireTokenAsync(resource, credentials);</div><div class="line">            <span class="keyword">if</span> (result == <span class="literal">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</div><div class="line">                    <span class="string">"An error occurred while retrieving a token from Azure AD."</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result.AccessToken;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> key = client.GetKeyAsync(<span class="string">"&#123;vault URL&#125;"</span>, <span class="string">"&#123;key name&#125;"</span>).GetAwaiter().GetResult();</div><div class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</div><div class="line">                <span class="string">"An error occurred while retrieving the signing key from Azure Key Vault."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RsaSecurityKey(client.ToRSA(key));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Create-custom-authorization-and-test-controllers"><a href="#Create-custom-authorization-and-test-controllers" class="headerlink" title="Create custom authorization and test controllers"></a>Create custom authorization and test controllers</h3><p>For the sake of simplicity, <strong>I decided to go with a unique authorization controller</strong> that can natively work with both ASOS and OpenIddict.</p><div class="note tip"><p>With ASOS, if you prefer handling token requests directly in the provider class, you can move this code to the <code>OpenIdConnectServerProvider.(On)HandleTokenRequest</code> event. For more information, read <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Creating your own OpenID Connect server with ASOS: implementing the resource owner password credentials grant">Creating your own OpenID Connect server with ASOS: implementing the resource owner password credentials grant</a>.</p></div><figure class="highlight csharp"><figcaption><span>AuthorizationController.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpPost(<span class="string">"~/connect/token"</span>)]</div><div class="line">    [Produces(<span class="string">"application/json"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Exchange</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> request = HttpContext.GetOpenIdConnectRequest();</div><div class="line">        <span class="keyword">if</span> (request.IsPasswordGrantType())</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Validate the user credentials.</span></div><div class="line"></div><div class="line">            <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider</span></div><div class="line">            <span class="comment">// applying a key derivation function like PBKDF2 to slow down</span></div><div class="line">            <span class="comment">// the password validation process. You SHOULD also consider</span></div><div class="line">            <span class="comment">// using a time-constant comparer to prevent timing attacks.</span></div><div class="line">            <span class="keyword">if</span> (request.Username != <span class="string">"alice@wonderland.com"</span> ||</div><div class="line">                request.Password != <span class="string">"P@ssw0rd"</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> Forbid(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create a new ClaimsIdentity holding the user identity.</span></div><div class="line">            <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="string">"Alice"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">                <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">                OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            ticket.SetResources(<span class="string">"resource-server"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Ask ASOS or OpenIddict to generate and return a token response.</span></div><div class="line">            <span class="keyword">return</span> SignIn(ticket.Principal, ticket.Properties, ticket.AuthenticationScheme);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">"The specified grant type is not supported."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>TestController.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [Authorize]</div><div class="line">    [HttpGet(<span class="string">"~/test"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Test</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> User.GetClaim(OpenIdConnectConstants.Claims.Subject);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Register-ASOS-or-OpenIddict-in-the-ASP-NET-Core-pipeline"><a href="#Register-ASOS-or-OpenIddict-in-the-ASP-NET-Core-pipeline" class="headerlink" title="Register ASOS or OpenIddict in the ASP.NET Core pipeline"></a>Register ASOS or OpenIddict in the ASP.NET Core pipeline</h2><p>The handler registration part slightly differs depending on whether you&#39;re using ASOS or OpenIddict, but in both cases <strong>you&#39;ll have the JWT bearer handler and register it as the default scheme</strong> in the ASP.NET Core 2.0 authentication options:</p><h4 id="ASOS-1"><a href="#ASOS-1" class="headerlink" title="ASOS"></a>ASOS</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddJwtBearer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Note: make sure you're replacing this URL</span></div><div class="line">            <span class="comment">// by the absolute URL of your application.</span></div><div class="line">            options.Authority = <span class="string">"http://localhost:10444/"</span>;</div><div class="line">            options.Audience = <span class="string">"resource-server"</span>;</div><div class="line">            options.RequireHttpsMetadata = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            options.SecurityTokenValidators.Clear();</div><div class="line">            options.SecurityTokenValidators.Add(<span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                InboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddOpenIdConnectServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.AllowInsecureHttp = <span class="literal">true</span>;</div><div class="line">            options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Register the HSM signing key.</span></div><div class="line">            options.SigningCredentials.AddKey(KeyVaultHelper.GetSigningKey());</div><div class="line"></div><div class="line">            options.AccessTokenHandler = <span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                OutboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            options.Provider.OnValidateTokenRequest = context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!context.Request.IsPasswordGrantType())</div><div class="line">                &#123;</div><div class="line">                    context.Reject(</div><div class="line">                        error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">                        description: <span class="string">"The specified grant type is not supported."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                context.Skip();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            options.Provider.OnHandleTokenRequest = context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Note: SkipHandler() is used to force ASOS to invoke MVC</span></div><div class="line">                <span class="comment">// so that token requests can be handled in a MVC controller.</span></div><div class="line">                context.SkipHandler();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">            &#125;;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line"></div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="OpenIddict-1"><a href="#OpenIddict-1" class="headerlink" title="OpenIddict"></a>OpenIddict</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddJwtBearer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Note: make sure you're replacing this URL</span></div><div class="line">            <span class="comment">// by the absolute URL of your application.</span></div><div class="line">            options.Authority = <span class="string">"http://localhost:30940/"</span>;</div><div class="line">            options.Audience = <span class="string">"resource-server"</span>;</div><div class="line">            options.RequireHttpsMetadata = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            options.SecurityTokenValidators.Clear();</div><div class="line">            options.SecurityTokenValidators.Add(<span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                InboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.UseInMemoryDatabase(<span class="keyword">nameof</span>(DbContext));</div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.AddEntityFrameworkCoreStores&lt;DbContext&gt;();</div><div class="line"></div><div class="line">            options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line">            options.AllowPasswordFlow();</div><div class="line">            options.DisableHttpsRequirement();</div><div class="line">            options.UseJsonWebTokens();</div><div class="line"></div><div class="line">            <span class="comment">// Register the HSM signing key.</span></div><div class="line">            options.AddSigningKey(KeyVaultHelper.GetSigningKey());</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddMvc();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line"></div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Test-your-application"><a href="#Test-your-application" class="headerlink" title="Test your application"></a>Test your application</h2><h3 id="Retrieve-a-JWT-access-token-signed-by-Azure-Key-Vault"><a href="#Retrieve-a-JWT-access-token-signed-by-Azure-Key-Vault" class="headerlink" title="Retrieve a JWT access token signed by Azure Key Vault"></a>Retrieve a JWT access token signed by Azure Key Vault</h3><p>To retrieve an access token, send a <code>POST</code> request to <code>/connect/token</code> with the <code>grant_type=password</code> parameter and the user credentials:</p><img src="/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/token-request.png" alt="token-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:10444</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;username=alice%40wonderland.com&amp;password=P%40ssw0rd</span></div></pre></td></tr></table></figure><p>If the credentials are valid, you&#39;ll get a JSON response containing the access token:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"resource"</span>: <span class="string">"resource-server"</span>,</div><div class="line">  <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>,</div><div class="line">  <span class="string">"access_token"</span>: <span class="string">"eyJhbGciOiJSUzI1NiIsImtpZCI6IjlIU1FUVFlRVENQV1NQWlFVNVo2V0pfSU9MUi1CNU1VR1daVE9MRkEiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJBbGljZSIsInRva2VuX3VzYWdlIjoiYWNjZXNzX3Rva2VuIiwianRpIjoiMDBkNDI1OTktMDVjMi00YmU1LTgyZGQtZmYzZjM4NmU1NjE0IiwiYXVkIjoicmVzb3VyY2Utc2VydmVyIiwibmJmIjoxNTAyODAzOTc0LCJleHAiOjE1MDI4MDc1NzQsImlhdCI6MTUwMjgwMzk3NCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDk0MC8ifQ.H5scgtaqe3V_p-ibC2HzxUCForYlm5kuPP1wJKEdL-I44BVmPxCCF8s0r4SciLVv-hGpATIFK9eiuex0jkgLMDJ40vLVnUMOUkeUcqrBrIHkIrf-s7kenpuPA3Xljnd-IS6ParF-nsSs_8t8vxIKWPM0wcpEQo8NKLkp6ptc-s6D3PwIXogY3WiFq3iKIVxRZF-L-RdfKHWSWKlKk3ZyT9Plf9OoMpvNejULynIfa51_ZQEgBR5LyTxUK-XIxRL_gz2fLadmZQX8nHs4Z4DvIKw7KQTbf_t1NOtsLekudmMaJSEheAVdBqy_-AQtdL_Xo6fO3UQn_Hmd96FUUaSo9A"</span>,</div><div class="line">  <span class="string">"expires_in"</span>: <span class="number">3600</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Send-an-API-request-to-your-test-controller"><a href="#Send-an-API-request-to-your-test-controller" class="headerlink" title="Send an API request to your test controller"></a>Send an API request to your test controller</h3><p>To send an authenticated request, simply attach the bearer token to the <code>Authorization</code> header using the following syntax: <code>Authorization: Bearer [your bearer token]</code> (without the square brackets)</p><img src="/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/test</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:10444</div><div class="line"><span class="attribute">Authorization</span>: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjlIU1FUVFlRVENQV1NQWlFVNVo2V0pfSU9MUi1CNU1VR1daVE9MRkEiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJBbGljZSIsInRva2VuX3VzYWdlIjoiYWNjZXNzX3Rva2VuIiwianRpIjoiMDBkNDI1OTktMDVjMi00YmU1LTgyZGQtZmYzZjM4NmU1NjE0IiwiYXVkIjoicmVzb3VyY2Utc2VydmVyIiwibmJmIjoxNTAyODAzOTc0LCJleHAiOjE1MDI4MDc1NzQsImlhdCI6MTUwMjgwMzk3NCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDk0MC8ifQ.H5scgtaqe3V_p-ibC2HzxUCForYlm5kuPP1wJKEdL-I44BVmPxCCF8s0r4SciLVv-hGpATIFK9eiuex0jkgLMDJ40vLVnUMOUkeUcqrBrIHkIrf-s7kenpuPA3Xljnd-IS6ParF-nsSs_8t8vxIKWPM0wcpEQo8NKLkp6ptc-s6D3PwIXogY3WiFq3iKIVxRZF-L-RdfKHWSWKlKk3ZyT9Plf9OoMpvNejULynIfa51_ZQEgBR5LyTxUK-XIxRL_gz2fLadmZQX8nHs4Z4DvIKw7KQTbf_t1NOtsLekudmMaJSEheAVdBqy_-AQtdL_Xo6fO3UQn_Hmd96FUUaSo9A</div></pre></td></tr></table></figure><p>If the access token is valid, you&#39;ll get the user identifier as returned by the API:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Alice</div></pre></td></tr></table></figure><div class="note tip"><p>To confirm that the access token is correctly signed by the HSM key, you can use Application Insights&#39; dependencies tab (you should see an HTTP POST request pointing to <code>https://{vault URL}/keys/{key name}/{key version}/sign?api-version=2016-10-01</code>).</p></div><p>Got a question? Don&#39;t hesitate to post a comment!</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how you can use Azure Key Vault to sign JWT tokens issued by ASOS and OpenIddict.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="azure" scheme="https://kevinchalet.com/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>AspNet.Security.OpenIdConnect.Server 1.0.1 is out</title>
    <link href="https://kevinchalet.com/2017/08/04/aspnet-security-openidconnect-server-1-0-1-is-out/"/>
    <id>https://kevinchalet.com/2017/08/04/aspnet-security-openidconnect-server-1-0-1-is-out/</id>
    <published>2017-08-04T18:00:00.000Z</published>
    <updated>2017-08-04T17:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, <strong>a patch release for the OpenID Connect server middleware (aka ASOS) was pushed</strong> to <a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/" target="_blank" rel="external">NuGet.org</a>.</p><p>Here&#39;s the changelog:</p><ul><li>The <code>MatchEndpointContext.Options</code> property that had been accidentally removed in 1.0.0 has been reintroduced in 1.0.1 (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/f17d9a4d0f747dd65de83a4ff898e68b37c9d34d" target="_blank" rel="external">f17d9a4</a>).</li><li>An exception is now automatically thrown at startup when registering a signing certificate that is no longer or not yet valid (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/583be00898f09ff3a4ca8d7540e8d963fe56b8fd" target="_blank" rel="external">583be00</a>).</li><li>Internal code relying on <code>JwtSecurityTokenHandler.CreateToken()</code>/<code>WriteToken()</code> has been updated to use <code>JwtSecurityTokenHandler.CreateEncodedJwt()</code> to ensure JWT tokens are not signed twice (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/a499f11cc5dceaf74c60d111c7c4268452cd8ddd" target="_blank" rel="external">a499f11</a>).</li></ul><p>To migrate to the <code>1.0.1</code> packages, update your <code>project.json</code>/<code>.csproj</code> project file(s) manually or run the following command in the <a href="https://docs.nuget.org/docs/start-here/using-the-package-manager-console" target="_blank" rel="external">Package Manager Console</a>:</p><h4 id="ASP-NET-Core-1-x-version"><a href="#ASP-NET-Core-1-x-version" class="headerlink" title="ASP.NET Core 1.x version"></a>ASP.NET Core 1.x version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Update-Package AspNet.Security.OpenIdConnect.Server -Version 1.0.1</div></pre></td></tr></table></figure><h4 id="OWIN-Katana-3-x-version"><a href="#OWIN-Katana-3-x-version" class="headerlink" title="OWIN/Katana 3.x version"></a>OWIN/Katana 3.x version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Update-Package Owin.Security.OpenIdConnect.Server -Version 1.0.1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      In this post, learn more about the 1.0.1 release of the OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>AspNet.Security.OpenIdConnect.Server 1.0.0 general availability</title>
    <link href="https://kevinchalet.com/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/"/>
    <id>https://kevinchalet.com/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/</id>
    <published>2017-05-08T19:00:00.000Z</published>
    <updated>2017-05-08T18:55:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today is a great day for me, as I just uploaded the ASOS 1.0.0 packages to NuGet.org, concluding a 3-year work on this library. <strong>A huge thanks to everyone – clients, sponsors, contributors, users – who helped me make this possible: ASOS wouldn&#39;t exist without your support!</strong></p><img src="/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/thanks.gif" alt="thanks.gif"><h2 id="Migrating-to-1-0-0"><a href="#Migrating-to-1-0-0" class="headerlink" title="Migrating to 1.0.0"></a>Migrating to 1.0.0</h2><p>Migrating from <a href="/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/" title="ASOS RC1">ASOS RC1</a> to RTM should be rather smooth as no major change was adopted in this release, but there&#39;s an important requirement you must comply with to ensure your application still works correctly after the migration: <strong>you must also update the validation/introspection middleware to the 1.0.0 RTM version</strong> (the previous beta versions won&#39;t deliberately work):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OAuth.Introspection"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OAuth.Validation"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenIdConnect.Server"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><div class="note warn"><p>If you use recent OpenIddict packages (that use ASOS 1.0.0) or if you explicitly downloaded <code>AspNet.Security.OpenIdConnect.Server</code> or <code>AspNet.Security.OAuth.Introspection</code> 1.0.0 from the aspnet-contrib MyGet feed, consider clearing your NuGet packages folder, <strong>as the bits published on NuGet.org slightly differ from the packages initially published on MyGet.org</strong> (e.g the ASOS package uploaded to NuGet.org offers ECDSA support when running on .NET Framework 4.7).</p><p>For that, close your VS instances, go to <code>C:\Users\[username]\.nuget\packages</code> (on Windows) or <code>~/.nuget/packages</code> (on macOS) and remove the following folders:</p><p><img src="/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/aspnet-contrib-packages.png" alt="aspnet-contrib-packages.png"></p><p>Then, re-open VS and restore your projects or run <code>dotnet restore</code> to download the latest binaries from NuGet.org.</p></div><h2 id="Support-lifecycle"><a href="#Support-lifecycle" class="headerlink" title="Support lifecycle"></a>Support lifecycle</h2><p>No software can reasonably ship without a solid support lifecycle and ASOS is no exception. To keep things simple, I&#39;ve decided to adopt the same <a href="https://www.microsoft.com/net/core/support" target="_blank" rel="external">support policy as the one used by Microsoft for the .NET Core platform</a>, which means <strong>the aspnet-contrib 1.0.0 RTM packages will get critical fixes and security patches until at least July of 2018</strong>.</p><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>The next big step is to port ASOS to the <a href="https://github.com/aspnet/Security/issues/1179" target="_blank" rel="external">new ASP.NET Core 2.0 authentication stack I helped redesign</a>, as <strong>the 1.0 ASOS bits won&#39;t work at all due to the massive breaking changes adopted in 2.0</strong> (e.g authentication handlers are now registered in the DI container and a unique authentication middleware handles everything at the pipeline level, in <code>Startup.Configure(IApplicationBuilder app)</code>.</p>]]></content>
    
    <summary type="html">
    
      In this post, learn more about the 1.0.0 RTM release of the OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Migrating to AspNet.Security.OpenIdConnect.Server RC1</title>
    <link href="https://kevinchalet.com/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/"/>
    <id>https://kevinchalet.com/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/</id>
    <published>2017-03-13T23:00:00.000Z</published>
    <updated>2017-03-13T22:59:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, I released the RC1 version of the OpenID Connect server middleware, alongside <a href="https://www.nuget.org/profiles/aspnet-contrib" target="_blank" rel="external">the other aspnet-contrib packages</a>.</p><p>This version – the latest before RTM – includes a few design changes that will directly impact your own code:</p><h2 id="The-built-in-claims-mapping-feature-was-removed"><a href="#The-built-in-claims-mapping-feature-was-removed" class="headerlink" title="The built-in claims mapping feature was removed"></a>The built-in claims mapping feature was removed</h2><p>Starting with RC1, <strong>ASOS no longer includes a built-in claims mapping feature</strong>, which means claims like <code>ClaimTypes.NameIdentifier</code>, <code>ClaimTypes.Name</code> or <code>ClaimTypes.Role</code> are no longer mapped to their OpenID Connect/JWT equivalents (<code>sub</code>, <code>name</code>, <code>role</code>).</p><p>Concretely, if you have code like that in your authorization provider class, you should update it to use the OpenID Connect claims instead of the legacy claims exposed by the static <code>ClaimTypes</code> class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.NameIdentifier, <span class="string">"[unique identifier]"</span>);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.Name, <span class="string">"Bob"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.Role, <span class="string">"Administrator"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configure ClaimsIdentity to use the OpenID Connect claims instead of</span></div><div class="line"><span class="comment">// the legacy ClaimTypes claims to populate the ClaimsIdentity.Name property</span></div><div class="line"><span class="comment">// and determine how roles are resolved when calling ClaimsPrincipal.IsInRole(...).</span></div><div class="line"><span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme,</div><div class="line">    OpenIdConnectConstants.Claims.Name,</div><div class="line">    OpenIdConnectConstants.Claims.Role);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="string">"[unique identifier]"</span>);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Name, <span class="string">"Bob"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Role, <span class="string">"Administrator"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div></pre></td></tr></table></figure><div class="note tip"><p>You&#39;re actually free to keep using the <code>ClaimTypes</code> claims, but the OpenID Connect server middleware will throw an exception if you don&#39;t (at least) add the <code>sub</code> claim:</p><p><code>InvalidOperationException: The authentication ticket was rejected because it doesn&#39;t contain the mandatory subject claim.</code></p></div><p>If you use the JWT bearer middleware, you&#39;ll also want to disable its own claims mapping feature and update the token validation parameters to use the dedicated JWT name/role claims:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();</div><div class="line">JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap.Clear();</div><div class="line"></div><div class="line">app.UseJwtBearerAuthentication(<span class="keyword">new</span> JwtBearerOptions</div><div class="line">&#123;</div><div class="line">    Authority = <span class="string">"http://localhost:58795/"</span>,</div><div class="line">    Audience = <span class="string">"resource_server"</span>,</div><div class="line">    RequireHttpsMetadata = <span class="literal">false</span>,</div><div class="line">    TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters</div><div class="line">    &#123;</div><div class="line">        NameClaimType = OpenIdConnectConstants.Claims.Name,</div><div class="line">        RoleClaimType = OpenIdConnectConstants.Claims.Role</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="The-introspection-middleware-now-uses-name-and-role-as-the-default-claim-types"><a href="#The-introspection-middleware-now-uses-name-and-role-as-the-default-claim-types" class="headerlink" title="The introspection middleware now uses name and role as the default claim types"></a>The introspection middleware now uses <code>name</code> and <code>role</code> as the default claim types</h2><p>In the same vein, the introspection middleware was updated to use <code>name</code> and <code>role</code> as the default claim types (instead of <code>ClaimTypes.Name</code> and <code>ClaimTypes.Role</code>):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.UseOAuthIntrospection(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Authority = <span class="keyword">new</span> Uri(<span class="string">"https://openid.yourapp.com/"</span>);</div><div class="line">    options.Audiences.Add(<span class="string">"resource_server"</span>);</div><div class="line">    options.ClientId = <span class="string">"resource_server"</span>;</div><div class="line">    options.ClientSecret = <span class="string">"875sqd4s5d748z78z7ds1ff8zz8814ff88ed8ea4z4zzd"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Override the default claim types used by the introspection middleware:</span></div><div class="line">    options.NameClaimType = <span class="string">"custom_name_claim"</span>;</div><div class="line">    options.RoleClaimType = <span class="string">"custom_role_claim"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="The-token-format-was-improved"><a href="#The-token-format-was-improved" class="headerlink" title="The token format was improved"></a>The token format was improved</h2><p>To <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/315" target="_blank" rel="external">support multi-valued authentication properties containing spaces</a>, we had to tweak the token format to store these complex properties as JSON strings.</p><p>Unfortunately, <strong>this change makes old authorization codes, access and refresh tokens incompatible with the new format (and vice versa)</strong>. In practice, this means that you can&#39;t use tokens issued by ASOS RC1 with old versions of the validation middleware (or with the OpenID Connect server middleware itself): such tokens will be automatically rejected.</p><div class="note tip"><p>To make sure everything runs smoothly, migrate to the latest version of the validation middleware (<code>1.0.0-beta1-final</code>).</p></div><h2 id="Registering-a-signing-key-is-no-longer-required-when-using-the-default-access-token-format"><a href="#Registering-a-signing-key-is-no-longer-required-when-using-the-default-access-token-format" class="headerlink" title="Registering a signing key is no longer required when using the default access token format"></a>Registering a signing key is no longer required when using the default access token format</h2><p>Starting with RC1, ASOS now includes a &quot;degraded mode&quot; that allows you to use it without registering a signing key or a signing certificate (ephemeral or not) if you don&#39;t opt for JWT access tokens and don&#39;t use the implicit or hybrid flows.</p><p>Concretely, using <code>AddEphemeralKey()</code> or <code>AddCertificate()</code> is no longer mandatory if you use non-interactive flows like password or client credentials <strong>AND</strong> the default access token format.</p><p>And voilà, that&#39;s all. For the complete changelist, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues?q=milestone%3A1.0.0-rc1%20" target="_blank" rel="external">feel free to take a look at the GitHub issues page</a>.</p><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>No new release candidate is currently planned, which means the next version will be the RTM package.</p><p>The next (and last) step is to <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/324" target="_blank" rel="external">rework the XML documentation</a>. Depending on how well this work item goes, the RTM bits should be published at the end of the month or in April. If you&#39;re willing to contribute to this stask, don&#39;t hesitate to ping me.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to migrate to the latest OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Implementing simple token authentication in ASP.NET Core with OpenIddict</title>
    <link href="https://kevinchalet.com/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/"/>
    <id>https://kevinchalet.com/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/</id>
    <published>2017-01-30T18:00:00.000Z</published>
    <updated>2018-06-25T16:12:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Last year, <a href="https://github.com/mjrousos" target="_blank" rel="external">Mike Rousos</a> posted <a href="https://blogs.msdn.microsoft.com/webdev/2016/10/27/bearer-token-authentication-in-asp-net-core/" target="_blank" rel="external">a great post</a> about token authentication on the .NET blog and demonstrated how you could leverage ASP.NET Core Identity and OpenIddict to create your own tokens in a completely standard way.</p><p>Since then, many people emailed me to know if using ASP.NET Core Identity was really mandatory. Good news! While the first OpenIddict alpha bits were tied to Identity, the two have been completely decoupled as part of OpenIddict <code>beta1</code> and <code>beta2</code>. Concretely, this means <strong>you can now use OpenIddict with your own authentication method</strong> or your own membership stack.</p><hr><h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><div class="note info"><p>This post was updated to include code snippets demonstrating how to register OpenIddict in an ASP.NET Core 2.x application. <strong>When using OpenIddict in an ASP.NET Core 2.x application, make sure you&#39;re referencing the OpenIddict 2.x packages</strong>.</p></div><hr><h3 id="Update-your-csproj-file-to-reference-the-OpenIddict-packages"><a href="#Update-your-csproj-file-to-reference-the-OpenIddict-packages" class="headerlink" title="Update your .csproj file to reference the OpenIddict packages"></a>Update your <code>.csproj</code> file to reference the OpenIddict packages</h3><p>For this demo, you&#39;ll need to reference 2 packages:</p><ul><li><code>OpenIddict</code>, that references the core services, the token server and the validation services.</li><li><code>OpenIddict.EntityFrameworkCore</code>, that contains the Entity Framework Core stores.</li></ul><h4 id="ASP-NET-Core-1-x"><a href="#ASP-NET-Core-1-x" class="headerlink" title="ASP.NET Core 1.x"></a>ASP.NET Core 1.x</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-*"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="ASP-NET-Core-2-x"><a href="#ASP-NET-Core-2-x" class="headerlink" title="ASP.NET Core 2.x"></a>ASP.NET Core 2.x</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><hr><h3 id="Register-the-OpenIddict-services-in-the-DI-container-and-the-ASP-NET-Core-pipeline"><a href="#Register-the-OpenIddict-services-in-the-DI-container-and-the-ASP-NET-Core-pipeline" class="headerlink" title="Register the OpenIddict services in the DI container and the ASP.NET Core pipeline"></a>Register the OpenIddict services in the DI container and the ASP.NET Core pipeline</h3><h4 id="ASP-NET-Core-1-x-1"><a href="#ASP-NET-Core-1-x-1" class="headerlink" title="ASP.NET Core 1.x"></a>ASP.NET Core 1.x</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddMvc();</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Configure the context to use an in-memory store.</span></div><div class="line">            options.UseInMemoryDatabase();</div><div class="line"></div><div class="line">            <span class="comment">// Register the entity sets needed by OpenIddict.</span></div><div class="line">            <span class="comment">// Note: use the generic overload if you need</span></div><div class="line">            <span class="comment">// to replace the default OpenIddict entities.</span></div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict()</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">            .AddCore(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Configure OpenIddict to use the EF Core stores/models.</span></div><div class="line">                options.UseEntityFrameworkCore()</div><div class="line">                       .UseDbContext&lt;DbContext&gt;();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">            .AddServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Register the ASP.NET Core MVC services used by OpenIddict.</span></div><div class="line">                <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">                <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">                options.UseMvc();</div><div class="line"></div><div class="line">                <span class="comment">// Enable the token endpoint.</span></div><div class="line">                options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// Enable the password flow.</span></div><div class="line">                options.AllowPasswordFlow();</div><div class="line"></div><div class="line">                <span class="comment">// Accept anonymous clients (i.e clients that don't send a client_id).</span></div><div class="line">                options.AcceptAnonymousClients();</div><div class="line"></div><div class="line">                <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">                options.DisableHttpsRequirement();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">            <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">            <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">            <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">            .AddValidation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the OpenIddict token validation middleware.</span></div><div class="line">        app.UseOpenIddictValidation();</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict server middleware.</span></div><div class="line">        app.UseOpenIddictServer();</div><div class="line"></div><div class="line">        app.UseMvcWithDefaultRoute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note info"><p>Make sure to <strong>always register the validation middleware very early in your pipeline</strong>: if the validation middleware is not at the right place, requests won&#39;t be correctly authenticated when reaching the next middleware (e.g MVC).</p><p>The same remark applies to OpenIddict, that must be inserted before MVC to validate token requests before they reach your own code. If you don&#39;t register it correctly, an exception will be thrown at runtime.</p></div><h4 id="ASP-NET-Core-2-x-1"><a href="#ASP-NET-Core-2-x-1" class="headerlink" title="ASP.NET Core 2.x"></a>ASP.NET Core 2.x</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddMvc();</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Configure the context to use an in-memory store.</span></div><div class="line">            options.UseInMemoryDatabase(<span class="keyword">nameof</span>(DbContext));</div><div class="line"></div><div class="line">            <span class="comment">// Register the entity sets needed by OpenIddict.</span></div><div class="line">            <span class="comment">// Note: use the generic overload if you need</span></div><div class="line">            <span class="comment">// to replace the default OpenIddict entities.</span></div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict()</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">            .AddCore(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Configure OpenIddict to use the EF Core stores/models.</span></div><div class="line">                options.UseEntityFrameworkCore()</div><div class="line">                       .UseDbContext&lt;DbContext&gt;();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">            .AddServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Register the ASP.NET Core MVC services used by OpenIddict.</span></div><div class="line">                <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">                <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">                options.UseMvc();</div><div class="line"></div><div class="line">                <span class="comment">// Enable the token endpoint.</span></div><div class="line">                options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// Enable the password flow.</span></div><div class="line">                options.AllowPasswordFlow();</div><div class="line"></div><div class="line">                <span class="comment">// Accept anonymous clients (i.e clients that don't send a client_id).</span></div><div class="line">                options.AcceptAnonymousClients();</div><div class="line"></div><div class="line">                <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">                options.DisableHttpsRequirement();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">            <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">            <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">            <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">            .AddValidation();</div><div class="line"></div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = OpenIddictValidationDefaults.AuthenticationScheme;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvcWithDefaultRoute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Create-your-own-token-authentication-controller"><a href="#Create-your-own-token-authentication-controller" class="headerlink" title="Create your own token authentication controller"></a>Create your own token authentication controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpPost(<span class="string">"~/connect/token"</span>), Produces(<span class="string">"application/json"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Exchange</span>(<span class="params">OpenIdConnectRequest request</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (request.IsPasswordGrantType())</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Validate the user credentials.</span></div><div class="line"></div><div class="line">            <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider</span></div><div class="line">            <span class="comment">// applying a key derivation function like PBKDF2 to slow down</span></div><div class="line">            <span class="comment">// the password validation process. You SHOULD also consider</span></div><div class="line">            <span class="comment">// using a time-constant comparer to prevent timing attacks.</span></div><div class="line">            <span class="keyword">if</span> (request.Username != <span class="string">"alice@wonderland.com"</span> ||</div><div class="line">                request.Password != <span class="string">"P@ssw0rd"</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> Forbid(OpenIddictServerDefaults.AuthenticationScheme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create a new ClaimsIdentity holding the user identity.</span></div><div class="line">            <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(</div><div class="line">                OpenIddictServerDefaults.AuthenticationScheme,</div><div class="line">                OpenIdConnectConstants.Claims.Name,</div><div class="line">                OpenIdConnectConstants.Claims.Role);</div><div class="line"></div><div class="line">            <span class="comment">// Add a "sub" claim containing the user identifier, and attach</span></div><div class="line">            <span class="comment">// the "access_token" destination to allow OpenIddict to store it</span></div><div class="line">            <span class="comment">// in the access token, so it can be retrieved from your controllers.</span></div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Subject,</div><div class="line">                <span class="string">"71346D62-9BA5-4B6D-9ECA-755574D628D8"</span>,</div><div class="line">                OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Name, <span class="string">"Alice"</span>,</div><div class="line">                OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">            <span class="comment">// ... add other claims, if necessary.</span></div><div class="line"></div><div class="line">            <span class="keyword">var</span> principal = <span class="keyword">new</span> ClaimsPrincipal(identity);</div><div class="line"></div><div class="line">            <span class="comment">// Ask OpenIddict to generate a new token and return an OAuth2 token response.</span></div><div class="line">            <span class="keyword">return</span> SignIn(principal, OpenIddictServerDefaults.AuthenticationScheme);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"The specified grant type is not supported."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Create-an-API-controller"><a href="#Create-an-API-controller" class="headerlink" title="Create an API controller"></a>Create an API controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [Authorize, HttpGet(<span class="string">"~/api/test"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetMessage</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Json(<span class="keyword">new</span></div><div class="line">        &#123;</div><div class="line">            Subject = User.GetClaim(OpenIdConnectConstants.Claims.Subject),</div><div class="line">            Name = User.Identity.Name</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Test-your-ASP-NET-Core-application"><a href="#Test-your-ASP-NET-Core-application" class="headerlink" title="Test your ASP.NET Core application"></a>Test your ASP.NET Core application</h2><h3 id="Retrieve-an-access-token-from-your-authentication-controller"><a href="#Retrieve-an-access-token-from-your-authentication-controller" class="headerlink" title="Retrieve an access token from your authentication controller"></a>Retrieve an access token from your authentication controller</h3><p>To retrieve an access token, send a <code>POST</code> request to <code>/connect/token</code> with the <code>grant_type=password</code> parameter and the user credentials:</p><img src="/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/token-request.png" alt="token-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:7096</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;username=alice%40wonderland.com&amp;password=P%40ssw0rd</span></div></pre></td></tr></table></figure><p>If the credentials are valid, you&#39;ll get a JSON response containing the access token:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>,</div><div class="line">  <span class="string">"access_token"</span>: <span class="string">"CfDJ8Ec0ZpniaHhGg0e0UUvOH9BWZSGrPoEwGd0_Lq2cse-T29YOq985IBiT5fEe5tTSgY1vxq2Z2ZJ7Ikwlpmh0Lrc4x9pqhqHBziUzsP_rkGZkn47TkNkOkzKCwZJZK5x-irH3HROwClFFTq0rgWdb8rZ2xriffNzsby4VwhxhN5soFD435KzmVYkdv-VuaLYo3QiSuexbRi2USVO9LK30vomAG6h2SAxZ7R-jYsXgf0f5gAmdYxg7w3yicv9v8DpUSBiGGRRfymTOnvGEsFJjGuuP8OlY5qzMs6wGaRWkOvCyV2CK_RZF_3TMs7LYCdMQ-dqWY5A03-03OmP8blKzlrKJMDZfrPQHuysbS931xxy8b3kjicfjNLmMHqzQzbUO4fecm4kY8PFnKozojDtqajfTp2bYhxS65bmVYROrswYeUWEKYR6LSdS1K__IDaLoMlLa-Wf6x1wjM2CchzgqbHRF0KEtdL5Ks88dAS44mp9BM6iUOEWyL7VkbazsBdlNciM5ZZB1_6qunufDW_tcaR8"</span>,</div><div class="line">  <span class="string">"expires_in"</span>: <span class="number">3600</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Query-your-API-controller-using-a-bearer-token"><a href="#Query-your-API-controller-using-a-bearer-token" class="headerlink" title="Query your API controller using a bearer token"></a>Query your API controller using a bearer token</h3><p>To send an authenticated request, simply attach the bearer token to the <code>Authorization</code> header using the following syntax: <code>Authorization: Bearer [your bearer token]</code> (without the square brackets)</p><img src="/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/api/test</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:7096</div><div class="line"><span class="attribute">Authorization</span>: Bearer CfDJ8Ec0ZpniaHhGg0e0UUvOH9BWZSGrPoEwGd0_Lq2cse-T29YOq985IBiT5fEe5tTSgY1vxq2Z2ZJ7Ikwlpmh0Lrc4x9pqhqHBziUzsP_rkGZkn47TkNkOkzKCwZJZK5x-irH3HROwClFFTq0rgWdb8rZ2xriffNzsby4VwhxhN5soFD435KzmVYkdv-VuaLYo3QiSuexbRi2USVO9LK30vomAG6h2SAxZ7R-jYsXgf0f5gAmdYxg7w3yicv9v8DpUSBiGGRRfymTOnvGEsFJjGuuP8OlY5qzMs6wGaRWkOvCyV2CK_RZF_3TMs7LYCdMQ-dqWY5A03-03OmP8blKzlrKJMDZfrPQHuysbS931xxy8b3kjicfjNLmMHqzQzbUO4fecm4kY8PFnKozojDtqajfTp2bYhxS65bmVYROrswYeUWEKYR6LSdS1K__IDaLoMlLa-Wf6x1wjM2CchzgqbHRF0KEtdL5Ks88dAS44mp9BM6iUOEWyL7VkbazsBdlNciM5ZZB1_6qunufDW_tcaR8</div></pre></td></tr></table></figure><p>If the access token is valid, you&#39;ll get a JSON payload containing the user details returned by the API:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"subject"</span>: <span class="string">"71346D62-9BA5-4B6D-9ECA-755574D628D8"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Alice"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>And voilà, that&#39;s done.</p><p>Got a question? Feel free to post a comment or open a new thread <a href="https://stackoverflow.com/questions/tagged/openiddict" target="_blank" rel="external">on StackOverflow</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to add token authentication with OpenIddict by implementing the OAuth2 password flow.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>The new aspnet-contrib packages are out</title>
    <link href="https://kevinchalet.com/2016/11/30/the-new-aspnet-contrib-packages-are-out/"/>
    <id>https://kevinchalet.com/2016/11/30/the-new-aspnet-contrib-packages-are-out/</id>
    <published>2016-11-30T20:00:00.000Z</published>
    <updated>2017-03-13T22:41:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, I pushed new packages for all the aspnet-contrib projects. This is the first release since July (and probably one of the most exciting so far).</p><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><h3 id="New-OAuth2-social-providers"><a href="#New-OAuth2-social-providers" class="headerlink" title="New OAuth2 social providers"></a>New OAuth2 social providers</h3><p>Thanks to our amazing contributors, <a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/issues?q=milestone%3A1.0.0-beta2" target="_blank" rel="external">10 new providers have been added in this release</a>:</p><ul><li>Automatic (by <a href="https://github.com/supergibbs" target="_blank" rel="external">Jesse Mandel</a>)</li><li>Cisco Spark (by <a href="https://github.com/robert-shade" target="_blank" rel="external">Robert Shade</a>)</li><li>EVE Online (by <a href="https://github.com/mariozski" target="_blank" rel="external">Mariusz Zieliński</a>)</li><li>MailChimp (by <a href="https://github.com/igorsimovic" target="_blank" rel="external">Igor Simovic</a>)</li><li>MYOB (by <a href="https://github.com/jakkaj" target="_blank" rel="external">Jordan Knight</a>)</li><li>StackExchange (by <a href="https://github.com/andrewlock" target="_blank" rel="external">Andrew Lock</a>)</li><li>Strava (by <a href="https://github.com/jamesholcomb" target="_blank" rel="external">James Holcomb</a>)</li><li>Untapped (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li><li>Visual Studio Online (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li><li>Yammer (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li></ul><hr><h3 id="New-primitives-for-the-OpenID-Connect-server-middleware"><a href="#New-primitives-for-the-OpenID-Connect-server-middleware" class="headerlink" title="New primitives for the OpenID Connect server middleware"></a>New primitives for the OpenID Connect server middleware</h3><p>Starting with beta7, the OpenID Connect server middleware <strong>(ASOS) no longer relies on IdentityModel&#39;s <code>OpenIdConnectMessage</code></strong>, that proved to be way too limited to represent complex JSON payloads and wasn&#39;t able to preserve non-string parameters types.</p><p>Instead, ASOS now comes with its own primitives: <code>OpenIdConnectMessage</code>, <code>OpenIdConnectRequest</code> and <code>OpenIdConnectResponse</code>. Unlike their IdentityModel equivalent, these types are backed by JSON.NET&#39;s primitives, which means that code like this will now work flawlessly:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> OpenIdConnectResponse();</div><div class="line">response[<span class="string">"array_parameter"</span>] = <span class="keyword">new</span> JArray(<span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;);</div><div class="line">response[<span class="string">"object_parameter"</span>] = JObject.FromObject(<span class="keyword">new</span></div><div class="line">&#123;</div><div class="line">    name = <span class="string">"value"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Outputs &#123;"array_parameter":[1,2,3],"object_parameter":&#123;"name":"value"&#125;&#125;</span></div><div class="line">Console.WriteLine(JsonConvert.SerializeObject(response));</div></pre></td></tr></table></figure><p>The other good news is that these primitives are part of a whole new <strong>.NET Standard 1.0</strong> package (<code>AspNet.Security.OpenIdConnect.Primitives</code>) that is shared between the OWIN/Katana and the ASP.NET Core flavors of ASOS, which helps reduce code duplication between the two projects.</p><hr><h3 id="Proof-Key-for-Code-Exchange-PKCE-is-now-supported"><a href="#Proof-Key-for-Code-Exchange-PKCE-is-now-supported" class="headerlink" title="Proof Key for Code Exchange (PKCE) is now supported"></a>Proof Key for Code Exchange (PKCE) is now supported</h3><p>In August, ASOS was updated to support the <a href="https://tools.ietf.org/html/rfc7636" target="_blank" rel="external">Proof Key for Code Exchange specification</a>:</p><blockquote><p>OAuth 2.0 [RFC6749] public clients are susceptible to the authorization code interception attack.</p><p>In this attack, the attacker intercepts the authorization code returned from the authorization endpoint within a communication path not protected by Transport Layer Security (TLS), such as inter-application communication within the client&#39;s operating system.</p><p>Once the attacker has gained access to the authorization code, it can use it to obtain the access token.</p></blockquote><p>This change makes ASOS fully compatible with client libraries supporting PKCE, like <a href="https://openid.github.io/AppAuth-iOS/" target="_blank" rel="external">AppAuth for iOS</a>.</p><a id="more"></a><hr><h3 id="All-ASOS-39-endpoints-are-now-disabled-by-default"><a href="#All-ASOS-39-endpoints-are-now-disabled-by-default" class="headerlink" title="All ASOS&#39; endpoints are now disabled by default"></a>All ASOS&#39; endpoints are now disabled by default</h3><p>To reduce ASOS&#39; attack surface, all its endpoints – except the discovery endpoints – <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/312" target="_blank" rel="external">are now disabled by default</a>. This means that you now have to explicitly assign a path to enable an endpoint:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><div class="note tip"><p>This change makes ASOS consistent with how <code>OAuthAuthorizationServerMiddleware</code> used to work.</p></div><hr><h3 id="The-automatic-RSA-key-generation-feature-was-removed"><a href="#The-automatic-RSA-key-generation-feature-was-removed" class="headerlink" title="The automatic RSA key generation feature was removed"></a>The automatic RSA key generation feature was removed</h3><p>Starting with beta7, <strong>ASOS will no longer generate and register a signing key for you</strong> if you don&#39;t explicitly add one and will throw an exception if no signing credentials have been registered:</p><blockquote><p>At least one signing key must be registered. Consider registering a X.509 certificate or call <code>options.SigningCredentials.AddEphemeralKey()</code> to generate and register an ephemeral signing key.</p></blockquote><p>Though very convenient, <a href="https://github.com/openiddict/openiddict-core/issues/204" target="_blank" rel="external">this feature proved to be unreliable</a> so I&#39;ve decided to remove it and replace it by an opt-in ephemeral key generation extension:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Register a new ephemeral key, that is discarded when the application</span></div><div class="line">    <span class="comment">// shuts down. Tokens signed using this key are automatically invalidated.</span></div><div class="line">    <span class="comment">// This method should only be used during development.</span></div><div class="line">    options.SigningCredentials.AddEphemeralKey();</div><div class="line"></div><div class="line">    <span class="comment">// On production, using a X.509 certificate stored in the machine store is recommended.</span></div><div class="line">    <span class="comment">// You can generate a self-signed certificate using Pluralsight's self-cert utility:</span></div><div class="line">    <span class="comment">// https://s3.amazonaws.com/pluralsight-free/keith-brown/samples/SelfCert.zip</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// options.SigningCredentials.AddCertificate("7D2A741FE34CC2C7369237A5F2078988E17A6A75");</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr><h3 id="ECDSA-signing-keys-support"><a href="#ECDSA-signing-keys-support" class="headerlink" title="ECDSA signing keys support"></a>ECDSA signing keys support</h3><p><strong>When running ASOS on .NET Core</strong>, you can now use ECDSA keys/certificates to sign your identity tokens:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Register a new ECDSA ephemeral key.</span></div><div class="line">    options.SigningCredentials.AddEphemeralKey(SecurityAlgorithms.EcdsaSha256Signature);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><div class="note info"><p>Though ASOS exposes ECDSA keys via the discovery endpoint, <strong>this feature is not yet supported by the JWT bearer middleware</strong>. You can track the progress <a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/487" target="_blank" rel="external">here</a>.</p></div><hr><h3 id="ASOS-is-now-fully-unit-tested"><a href="#ASOS-is-now-fully-unit-tested" class="headerlink" title="ASOS is now fully unit-tested"></a>ASOS is now fully unit-tested</h3><p>A <strong>huge effort has been made</strong> to add unit tests for all the ASOS primitives and endpoints (1955 tests at the time of writing).</p><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>This <strong>release will be the last ASOS beta</strong>, as we&#39;re now done with the important design changes.</p><p>A first release candidate version should be released in March and ASOS should RTM in April.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover the new features offered by the new aspnet-contrib packages released in November 2016.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Using a local OAuth2/OpenID Connect server with WebAuthenticationBroker</title>
    <link href="https://kevinchalet.com/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/"/>
    <id>https://kevinchalet.com/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/</id>
    <published>2016-08-22T14:30:00.000Z</published>
    <updated>2017-02-25T20:29:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Last week, I received a mail from a client who was desperately trying to use his legacy <code>OAuthAuthorizationServerMiddleware</code>-based server with <code>WebAuthenticationBroker</code>, a WinRT component developed by Microsoft for Windows 8/Windows Phone 8.1 that helps developers deal with authentication servers in a protocol-agnostic manner (it can work with OAuth1, OAuth2, OpenID Connect and even the good old OpenID2).</p><p>To be honest, I&#39;ve never been a huge fan of <code>WebAuthenticationBroker</code>: while I love the fact it executes in a separate <code>AuthHost</code> process managed by the OS (which is great from a security perspective), the fact it relies on <strong>a modal dialog that doesn&#39;t even mention the current URL</strong> to render the authorization page has always been a major issue for me. If your app allows me to log in using my Google account, there&#39;s a high chance I&#39;ll end up aborting the authorization flow if I have no way to ensure your authorization server doesn&#39;t redirect me to a fake Google login page.</p><p>That&#39;s why my initial suggestion was to use <a href="https://github.com/IdentityModel/IdentityModel.OidcClient" target="_blank" rel="external">IdentityModel.OidcClient</a>, a portable OpenID Connect client developed by Dominick Baier (one of the two guys behind IdentityServer), that also works with UWP. <code>OidcClient</code> supports the same web view approach as <code>WebAuthenticationBroker</code> but <strong>it also allows you to manually control</strong> the authorization process (e.g by launching the device browser and pointing it to the authorization endpoint), which is the option recommended by the <a href="https://tools.ietf.org/html/draft-ietf-oauth-native-apps-03#section-8.1" target="_blank" rel="external">OAuth 2.0 for Native Apps draft</a>.</p><div class="note tip"><p>Since <code>WebAuthenticationBroker</code> is not tied to a specific protocol, it&#39;s up to you to handle the last phase: trivial with OAuth2, it can become really complex with more advanced protocols like OpenID Connect, as you must <a href="http://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDTValidation" target="_blank" rel="external">validate the authorization/token response</a>. That&#39;s why using an OIDC-specific library like <code>IdentityModel.OidcClient</code> that handles the protocol details for you is generally a better option if you&#39;re not familiar with the protocol.</p></div><p>Unfortunately, <a href="https://github.com/IdentityModel/IdentityModel.OidcClient/issues/11" target="_blank" rel="external">this library is not compatible with OAuth2-only servers</a> and there&#39;s no plan to change that, so using it was not possible. Migrating the legacy authorization server to an OpenID Connect server like ASOS was also out of the question, so <code>WebAuthenticationBroker</code> was pretty much the only viable option in this case.</p><p>To ensure he was not missing something obvious, my client sent me something similar to this snippet (that I&#39;ve updated to make it more concise and to remove app-specific code):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Retrieve the app-specific redirect_uri. This value must correspond</span></div><div class="line"><span class="comment">// to the redirect_uri registered with your authorization server.</span></div><div class="line"><span class="keyword">var</span> callback = Uri.EscapeDataString(WebAuthenticationBroker.GetCurrentApplicationCallbackUri().AbsoluteUri);</div><div class="line"></div><div class="line"><span class="comment">// Note: the requestUri parameter must be a HTTPS address: an exception</span></div><div class="line"><span class="comment">// will be thrown if an HTTP address is used, even for local testing scenarios.</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> WebAuthenticationBroker.AuthenticateAsync(</div><div class="line">    options: WebAuthenticationOptions.None,</div><div class="line">    requestUri: <span class="keyword">new</span> Uri(<span class="string">"https://localhost:24500/api/Account/ExternalLogin"</span> +</div><div class="line">        <span class="string">$"?client_id=uwp-app&amp;response_type=token&amp;redirect_uri=<span class="subst">&#123;callback&#125;</span>"</span>));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (result.ResponseStatus == WebAuthenticationStatus.Success)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Note: ResponseData contains the redirect URL and the OAuth2 response parameters.</span></div><div class="line">    <span class="comment">// To make the response easier to parse, the redirect_uri part is removed.</span></div><div class="line">    <span class="keyword">var</span> payload = result.ResponseData.Substring(result.ResponseData.IndexOf(<span class="string">'#'</span>) + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> parameters = (<span class="keyword">from</span> parameter <span class="keyword">in</span> payload.Split(<span class="string">'&amp;'</span>)</div><div class="line">                      <span class="keyword">let</span> pair = parameter.Split(<span class="string">'='</span>)</div><div class="line">                      <span class="keyword">select</span> <span class="keyword">new</span> &#123; Name = pair[<span class="number">0</span>], Value = pair[<span class="number">1</span>] &#125;)</div><div class="line">                      .ToDictionary(element =&gt; element.Name, element =&gt; element.Value);</div><div class="line"></div><div class="line">    <span class="keyword">string</span> error;</div><div class="line">    <span class="comment">// If an "error" parameter has been added by the authorization server, return an exception.</span></div><div class="line">    <span class="comment">// Note: the optional "error_description" can be used to determine why the process failed.</span></div><div class="line">    <span class="keyword">if</span> (parameters.TryGetValue(<span class="string">"error"</span>, <span class="keyword">out</span> error))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"An error occurred during the authorization process."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">string</span> token;</div><div class="line">    <span class="comment">// Ensure an access token has been returned by the authorization server.</span></div><div class="line">    <span class="keyword">if</span> (!parameters.TryGetValue(<span class="string">"access_token"</span>, <span class="keyword">out</span> token))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"The access token was missing from the OAuth2 response."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Use the access token to query the resource server.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Aside the fact it implements the implicit flow (which is not the most appropriate flow for mobile apps), this snippet should have worked as-is.</p><a id="more"></a><div class="note tip"><p>The cool thing with <code>WebAuthenticationBroker</code> is that the hard parts — embedded web view handling, response interception — are automatically managed for you: simply call <code>AuthenticateAsync</code> and it will open a dedicated web view rendering the login/consent form returned by your authorization server.</p><p>When the authorization process is finalized by the user, the asynchronous <code>Task</code> returned by <code>WebAuthenticationBroker.AuthenticateAsync</code> completes, and you can extract the authorization response from <code>WebAuthenticationResult.ResponseData</code>.</p></div><p>Though the snippet was fine, it didn&#39;t work as expected and the following error was systematically returned instead of the consent form:</p><blockquote><p>We can&#39;t connect to the service you need right now. Check your network connection or try this again later.</p></blockquote><p>So if the code is not the culprit, what could be causing this error?</p><p>There are actually <strong>3 common pitfalls</strong> when using <code>WebAuthenticationBroker</code>:</p><ul><li>The <code>Internet (Client)</code> capability must be added to the package manifest.</li><li>Your authorization server must use a valid and trusted SSL certificate.</li><li>Lookback isolation must be disabled if your authorization server is hosted locally.</li></ul><h2 id="Enable-Internet-communication-in-the-package-manifest"><a href="#Enable-Internet-communication-in-the-package-manifest" class="headerlink" title="Enable Internet communication in the package manifest"></a>Enable Internet communication in the package manifest</h2><p>To use <code>WebAuthenticationBroker</code>, your application has to be granted the <code>Internet (Client)</code> capability, even if the authorization server is hosted locally.</p><div class="note tip"><p>This capability is now automatically enabled by default in the most recent &quot;UWP blank app&quot; template.</p></div><p>Adding it to the application manifest is easy and can be done using the built-in UI: simply double-click on the <code>Package.appxmanifest</code> file, go to the <em>Capabilities</em> tab and select <em>Internet (Client)</em>:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/app-manifest.png" alt="app-manifest.png"><h2 id="Use-a-trusted-SSL-certificate"><a href="#Use-a-trusted-SSL-certificate" class="headerlink" title="Use a trusted SSL certificate"></a>Use a trusted SSL certificate</h2><p>When developing a mobile/desktop application that communicates with an API, it is extremely frequent to avoid using SSL, since there&#39;s no need for transport security <strong>during the development phase</strong>, specially when the server is hosted locally.</p><p>Unfortunately, using a non-HTTPS address when calling <code>AuthenticateAsync</code> will simply result in an <code>ArgumentException</code> being thrown. Since there&#39;s currently no way to disable this requirement (even for pure testing scenarios), your authorization server must use an SSL certificate.</p><p>Luckily, using a trusted SSL certificate doesn&#39;t necessarily mean that the certificate has to be provided by a well-known authority: a self-issued certificate will work as long as it&#39;s added to the <code>Trusted Root Certification Authorities</code> <strong>user (or machine) store</strong>:</p><ol><li><p>You&#39;ll need to generate a self-signed certificate if you don&#39;t have one yet (note: IIS Express generates one for you, <a href="http://www.hanselman.com/blog/WorkingWithSSLAtDevelopmentTimeIsEasierWithIISExpress.aspx" target="_blank" rel="external">but you can replace it by your own one</a>). This procedure is well documented and many tools or <a href="http://www.selfsignedcertificate.com/" target="_blank" rel="external">websites</a> can help you with this task (you can even use <a href="http://blogs.msdn.com/b/asiatech/archive/2014/11/03/quickly-generate-install-and-export-self-signed-certificate-in-powershell-on-windows-8-1-2012r2.aspx" target="_blank" rel="external">Powershell for that</a>!). Just make sure to use <code>localhost</code> as the subject of the certificate when generating it and you should be okay.</p></li><li><p>When using your own certificate, you&#39;ll need to import it in your certificates store. Don&#39;t worry, it&#39;s rather easy to do and <a href="http://blogs.technet.com/b/sbs/archive/2008/05/08/installing-a-self-signed-certificate-as-a-trusted-root-ca-in-windows-vista.aspx" target="_blank" rel="external">a detailed walkthrough can be found on Technet</a>.</p></li><li><p>You&#39;ll have to configure your web server to use your self-signed certificate. With IIS Express, it should be as simple as checking the <code>Use SSL</code>checkbox in your ASP.NET project properties.</p></li></ol><h2 id="Remove-loopback-isolation"><a href="#Remove-loopback-isolation" class="headerlink" title="Remove loopback isolation"></a>Remove loopback isolation</h2><p>For security and reliability reasons, UWP applications are not allowed to send requests to the loopback interface. While Visual Studio automatically creates exemptions for debugged apps, this feature won&#39;t be helpful in this case, as the authentication broker always executes in a separate process.</p><p>If you see this (cryptic) error message in your Windows event logs, then you&#39;re likely facing this issue:</p><blockquote><p>AuthHost encountered a navigation error at URL: [...] with StatusCode: 0x800C0005.</p></blockquote><p>One option to fix it is to use the <a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/ConfigureFiddlerForWin8" target="_blank" rel="external">loopack exemption utility</a> developed by Eric Lawrence. It&#39;s natively included in Fiddler 4 but can also be downloaded as a standalone software. To allow the authentication broker to communicate with the loopback interface, exempt the applications starting with <code>microsoft.windows.authhost</code> and save your changes:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/loopback-exemption-utility.png" alt="loopback-exemption-utility.png"><p>If everything was properly configured, you should now see the login/consent page returned by your server:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/wab-consent-screen.png" alt="wab-consent-screen.png">]]></content>
    
    <summary type="html">
    
      In this post, discover how to use WebAuthenticationBroker with your own local OAuth2 server.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="windows 10" scheme="https://kevinchalet.com/tags/windows-10/"/>
    
      <category term="uwp" scheme="https://kevinchalet.com/tags/uwp/"/>
    
      <category term="web authentication broker" scheme="https://kevinchalet.com/tags/web-authentication-broker/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: conclusion</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/</id>
    <published>2016-07-13T17:00:00.000Z</published>
    <updated>2016-07-13T17:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the last part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>While this quite long blog posts series about ASOS ends here, there are still many aspects to cover. As promised in my introduction post, I&#39;ll dedicate a future post to the client-side part. An in-depth post about token revocation and the differences between JWT and opaque tokens is also planned.</p><p>If you have questions about ASOS or OAuth2/OpenID Connect, don&#39;t hesitate to <a href="https://gitter.im/aspnet-contrib/AspNet.Security.OpenIdConnect.Server" target="_blank" rel="external">join us on Gitter.im</a>.</p><p>If you need personal assistance, are looking for a contractor or have remarks about this blog posts series, please ping me at <code>contact [at] kevinchalet.com</code>.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/drop-the-mic.gif" alt="drop-the-mic.gif">]]></content>
    
    <summary type="html">
    
      Learn how you can create your own OpenID Connect server using ASOS in 7 steps.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: testing your authorization server with Postman</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/</id>
    <published>2016-07-13T16:45:00.000Z</published>
    <updated>2017-05-12T16:21:49.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the eighth part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><div class="note tip"><p>The sample used in this post can be found <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Samples/tree/master/samples/Postman" target="_blank" rel="external">in the <code>AspNet.Security.OpenIdConnect.Samples</code> repository</a>, that also hosts the Cordova, MVC and SignalR samples for ASOS.</p><p>For clarity, it implements both the authorization code flow and the password flow, but doesn&#39;t use any membership stack (the user credentials are hardcoded in the authorization provider class and a fake identity is always used to create tokens).</p></div><p>To test REST services, one of the easiest options is indisputably to use <a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a>. If you&#39;re not already familiar with Postman, I encourage you to read <a href="https://www.getpostman.com/docs/" target="_blank" rel="external">the documentation</a>.</p><hr><h2 id="Retrieving-an-access-token-using-the-resource-owner-password-credentials-grant"><a href="#Retrieving-an-access-token-using-the-resource-owner-password-credentials-grant" class="headerlink" title="Retrieving an access token using the resource owner password credentials grant"></a>Retrieving an access token using the resource owner password credentials grant</h2><p>Using the password flow with Postman is quite straightforward:</p><ul><li>Select <code>POST</code> as the HTTP method.</li><li>Fill the <code>Request URL</code> input with the <strong>absolute address of the token endpoint</strong>.</li><li>Click on the <code>Body</code> tab and choose the <code>x-www-form-urlencoded</code> encoding.</li><li>Add the OAuth2 parameters required by the specification, as shown on this screenshot:</li></ul><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/password-grant-token-request.png" alt="password-grant-token-request.png"><a id="more"></a><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:6500</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;password=P%40ssw0rd&amp;username=Bob&amp;scope=openid+offline_access</span></div></pre></td></tr></table></figure><p>If your request is valid, an access token, an identity token and a refresh token should be returned:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/password-grant-token-response.png" alt="password-grant-token-response.png"><p>While the access token and the refresh token are encrypted and opaque for the client, the identity token can be easily deserialized using a tool like <a href="https://jwt.io/" target="_blank" rel="external"><code>jwt.io</code></a>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/jwt-io-identity-token.png" alt="jwt-io-identity-token.png"><hr><h2 id="Making-an-API-request-using-the-access-token-issued-by-ASOS"><a href="#Making-an-API-request-using-the-access-token-issued-by-ASOS" class="headerlink" title="Making an API request using the access token issued by ASOS"></a>Making an API request using the access token issued by ASOS</h2><p>To attach an access token to an API request, click on the <code>Headers</code> tab and add a new <code>Authorization</code> header. Make sure to prefix the header value with the <code>Bearer</code> scheme (plus a space separating the scheme and the access token).</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/api/message</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:6500</div><div class="line"><span class="attribute">Authorization</span>: Bearer CfDJ8CreAGYABzhAplxF9ZB11h_KUDCvbaypmh1sSTXrF4vxzxUwINdmwkmXBuDASGNZ6_buqhTKjWcVexE0KweZzwuHAMG_lo4ZGuSo3max4uG95m302E0xH6KZSecfZYBa_1jUUbknCS46jEH0pwuJzG4hCnLTdzH3x8Q32OzpnXB1pPhJts1Xz4XNUdmNYuP0m8Pi2n37eqjbmZjCYnLdaQYQNNEGTU6FkvWyuvDo401Tt5fvpCWE0DIu_99Cotu5eYzDQPnS3AAD96PfKYt24DRacUW9x3NPxMToR7b3aUN7-lZm_mccU-uxapTuIwzl5SuXSYeFJmgkbRU8ub4W2M1n3o0n2DToKiOO1n0t9EEFdk6Q9ky6B2MdIilAibNcx0o3fz2xnIirGYP831lxWAf0plr502t5fNqNTQEINd4kqWFRXVfpBZ6ZZVvzcJPV8B9HNKdpQiJGqmqqWj_NK7IedZcGY1dH6LAo_JDuiTet3jlLQlY_5MvZ0z-QYg1JARRuW8qFhgE_G0x8nwLUWRdphtp1OYNDYbYhS2gn_uuRJcG9cGsOOXoYlnYdtJI1NZHL-fXDXIw6J4RvXsv2hE_pzYZl26XhMACVa5lTx4v0D49uwlKFp0OB3OCI_Wbxq2zAnemdo7nnZcsdkgiUGHhMC6c_6EN71mJG-GYqU9Nl</div></pre></td></tr></table></figure><p>If the access token is still valid, you should see this exact output message:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-response.png" alt="api-response.png"><hr><h2 id="Retrieving-an-access-token-using-the-authorization-code-flow"><a href="#Retrieving-an-access-token-using-the-authorization-code-flow" class="headerlink" title="Retrieving an access token using the authorization code flow"></a>Retrieving an access token using the authorization code flow</h2><p>Using the authorization code flow is generally more complicated, but Postman offers a very simple and convenient way to retrieve an access token without having to write a single request.</p><p>To start a new authorization flow, click on the <code>Authorization</code> tab, select <code>OAuth 2.0</code> and press <code>Get new access token</code>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow.png" alt="authorization-code-flow.png"><p>When the OAuth 2.0 configuration popup appears, select <code>Authorization code</code> in the dropdown list and populate the required fields by specifying the <code>authorization endpoint</code>, the <code>token endpoint</code>, the <code>client identifier</code>, the <code>callback URL</code> and optionally, a <code>scope</code> and a <code>token name</code>.</p><div class="note info"><p>When running the sample from a location that is not accessible from Internet, make sure to check the <code>Request access token locally</code> checkbox.</p></div><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow-popup.png" alt="authorization-code-flow-popup.png"><p>If the request parameters are valid, you should be prompted by the authorization consent form returned by <code>AuthorizationController</code>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-consent.png" alt="authorization-consent.png"><p>After granting the authorization, Postman will send a token request and retrieve a new access token it will add under the <code>Existing tokens</code> list:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow-response.png" alt="authorization-code-flow-response.png"><p>Select <code>Header</code> in the dropdown list and press <code>Use token</code> to tell Postman to attach the access token to the API request, like you manually did in the previous step. If the token is still valid, clicking on <code>Send</code> will return a successful message:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-response.png" alt="api-response.png"><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to test your authorization server and how to query your token-protected API endpoints using Postman.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
</feed>
