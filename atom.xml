<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kévin Chalet&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kevinchalet.com/"/>
  <updated>2018-06-19T11:52:01.300Z</updated>
  <id>https://kevinchalet.com/</id>
  
  <author>
    <name>Kévin Chalet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenIddict RC3 is out</title>
    <link href="https://kevinchalet.com/2018/06/20/openiddict-rc3-is-out/"/>
    <id>https://kevinchalet.com/2018/06/20/openiddict-rc3-is-out/</id>
    <published>2018-06-20T14:00:00.000Z</published>
    <updated>2018-06-19T11:52:01.300Z</updated>
    
    <content type="html"><![CDATA[<p>OpenIddict RC3 is now available on NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc3-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc3-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc3-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc3-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new-in-this-release"><a href="#What-39-s-new-in-this-release" class="headerlink" title="What&#39;s new in this release?"></a>What&#39;s new in this release?</h2><h3 id="The-OpenIddict-services-registration-APIs-have-been-revamped"><a href="#The-OpenIddict-services-registration-APIs-have-been-revamped" class="headerlink" title="The OpenIddict services registration APIs have been revamped"></a>The OpenIddict services registration APIs have been revamped</h3><p>In this release, <strong>we focused on reworking the OpenIddict registration APIs to offer a better user experience</strong>.</p><p>As part of this change, <strong>we split the OpenIddict services into three areas</strong> - <code>Core</code>, <code>Server</code> and <code>Validation</code> - and the <code>IServiceCollection</code> APIs have been updated to reflect that:</p><img src="/2018/06/20/openiddict-rc3-is-out/main-builder.png" alt="main-builder.png"><p>Each specialized builder only exposes the options that are relevant to its specific area:</p><img src="/2018/06/20/openiddict-rc3-is-out/specialized-builders.png" alt="specialized-builders.png"><p>Of course, the calls to <code>AddCore()</code>, <code>AddServer()</code> and <code>AddValidation()</code> can be chained:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the Entity Framework stores and models.</span></div><div class="line">        options.UseEntityFrameworkCore()</div><div class="line">               .UseDbContext&lt;ApplicationDbContext&gt;();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the ASP.NET Core MVC binder used by OpenIddict.</span></div><div class="line">        <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">        <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">        options.UseMvc();</div><div class="line"></div><div class="line">        <span class="comment">// Enable the authorization, logout, token and userinfo endpoints.</span></div><div class="line">        options.EnableAuthorizationEndpoint(<span class="string">"/connect/authorize"</span>)</div><div class="line">               .EnableLogoutEndpoint(<span class="string">"/connect/logout"</span>)</div><div class="line">               .EnableTokenEndpoint(<span class="string">"/connect/token"</span>)</div><div class="line">               .EnableUserinfoEndpoint(<span class="string">"/api/userinfo"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// Note: the Mvc.Client sample only uses the code flow and the password flow, but you</span></div><div class="line">        <span class="comment">// can enable the other flows if you need to support implicit or client credentials.</span></div><div class="line">        options.AllowAuthorizationCodeFlow()</div><div class="line">               .AllowPasswordFlow()</div><div class="line">               .AllowRefreshTokenFlow();</div><div class="line"></div><div class="line">        <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">        options.DisableHttpsRequirement();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">    <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">    <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">    <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">    .AddValidation();</div></pre></td></tr></table></figure><p><strong>Introducing these specialized builders was also a great opportunity to revisit how the OpenIddict entities are registered</strong>. In the RC2 bits, this is controlled by the <code>services.AddOpenIddict&lt;...&gt;()</code> method, that determines which entities are used depending on the overload.</p><p>In RC3, the generic <code>services.AddOpenIddict&lt;...&gt;()</code> methods have been removed and replaced by a more explicit pattern:</p><img src="/2018/06/20/openiddict-rc3-is-out/core-builder-entities.png" alt="core-builder-entities.png"><a id="more"></a><hr><h3 id="OpenIddict-now-has-its-own-validation-handler-compatible-with-reference-tokens"><a href="#OpenIddict-now-has-its-own-validation-handler-compatible-with-reference-tokens" class="headerlink" title="OpenIddict now has its own validation handler, compatible with reference tokens"></a>OpenIddict now has its own validation handler, compatible with reference tokens</h3><p>Thanks to <a href="https://github.com/openiddict/openiddict-core/pull/589" target="_blank" rel="external">a great contribution from Chino Chang</a>, OpenIddict now has its dedicated validation handler, based on <a href="https://www.nuget.org/packages/AspNet.Security.OAuth.Validation/" target="_blank" rel="external">the aspnet-contrib handler</a>.</p><p><strong>This handler supports both the default token format (opaque) and reference tokens</strong>. Like the aspnet-contrib handler, you can use it as a standalone handler (i.e without having to register the OpenIddict core or server services):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">services.AddOpenIddict()</div><div class="line">    .AddValidation();</div></pre></td></tr></table></figure><p>Resource servers that use reference tokens will have to configure the core services and register the appropriate stores to be able to use it:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Register the OpenIddict services.</span></div><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the Entity Framework entities and stores.</span></div><div class="line">        options.UseEntityFrameworkCore()</div><div class="line">               .UseDbContext&lt;ApplicationDbContext&gt;();</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">    .AddValidation(options =&gt; options.UseReferenceTokens());</div></pre></td></tr></table></figure><p>The aspnet-contrib handler will continue to be fully supported and will still be usable with OpenIddict so existing applications can keep using <code>services.AddAuthentication().AddOAuthValidation()</code> instead of <code>services.AddOpenIddict().AddValidation()</code> for opaque token validation.</p><div class="note tip"><p>Note: <code>OpenIddictValidationHandler</code> lives in the <code>OpenIddict.Validation</code> package, which is referenced by the <code>OpenIddict</code> metapackage. <strong>You don&#39;t have to add a new <code>PackageReference</code> to be able to use it</strong>.</p></div><hr><h3 id="MongoDB-is-now-officially-supported"><a href="#MongoDB-is-now-officially-supported" class="headerlink" title="MongoDB is now officially supported"></a>MongoDB is now officially supported</h3><p><strong>OpenIddict now natively supports MongoDB</strong>, one of the most popular NoSQL/document-oriented databases.</p><p>To configure OpenIddict to use MongoDB, reference the <code>OpenIddict.MongoDb</code> package and call the <code>options.UseMongoDb()</code> extension:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><p>By default, the MongoDB stores will resolve the <code>IMongoDatabase</code> service from the DI container so you&#39;ll have to register it using the usual ASP.NET Core DI extensions. E.g:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">services.AddSingleton(<span class="keyword">new</span> MongoClient().GetDatabase(<span class="string">"main-db"</span>));</div></pre></td></tr></table></figure><p>Alternatively, developers who work with multiple MongoDB databases in the same application will be able to explicitly set the one they want to use in the OpenIddict options:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb()</div><div class="line">               .UseDatabase(<span class="keyword">new</span> MongoClient().GetDatabase(<span class="string">"openiddict-db"</span>));</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p>If no database can be resolved, an exception will be automatically thrown at runtime.</p><p>Other helpers are available to allow you to customize the default entities or the collection names:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">    .AddCore(options =&gt;</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Configure OpenIddict to use the MongoDB stores and models.</span></div><div class="line">        options.UseMongoDb()</div><div class="line">               .ReplaceDefaultApplicationEntity&lt;MyApp&gt;()</div><div class="line">               .ReplaceDefaultAuthorizationEntity&lt;MyAuth&gt;()</div><div class="line">               .ReplaceDefaultScopeEntity&lt;MyScope&gt;()</div><div class="line">               .ReplaceDefaultTokenEntity&lt;MyToken&gt;()</div><div class="line">               .SetApplicationsCollectionName(<span class="string">"my-apps"</span>)</div><div class="line">               .SetAuthorizationsCollectionName(<span class="string">"my-auths"</span>)</div><div class="line">               .SetScopesCollectionName(<span class="string">"my-scopes"</span>)</div><div class="line">               .SetTokensCollectionName(<span class="string">"my-tokens"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><hr><h3 id="OpenIddict-no-longer-comes-with-a-default-set-of-entities-and-stores-base-classes"><a href="#OpenIddict-no-longer-comes-with-a-default-set-of-entities-and-stores-base-classes" class="headerlink" title="OpenIddict no longer comes with a default set of entities and stores base classes"></a>OpenIddict no longer comes with a default set of entities and stores base classes</h3><p><strong>In the previous iterations of OpenIddict, an important effort was made to create a shared set of entities</strong> (contained in the <code>OpenIddict.Models</code> package) that could be used not only by the official Entity Framework 6.x and Entity Framework Core stores, but also by third-party/custom stores.</p><p>This pattern had many pros - like avoiding code duplication or having base classes that simplify the development of custom stores (which is why it was also eventually adopted by the ASP.NET team for ASP.NET Core Identity in 2.0).</p><p>Unfortunately, this approach had also a major issue: we had to design the default entities as &quot;lowest common denominators&quot;, so that they could be used by all/most ORMs or document databases. In practice, this meant that things like <code>OpenIddictApplication.RedirectUris</code> or <code>OpenIddictApplication.PostLogoutRedirectUris</code> had to be represented as JSON-serialized <code>strings</code> for SQL-oriented ORMs like EF 6.x and EF Core to work natively.</p><p><strong>In RC3, each stores package will come with its own models you&#39;ll be able to use exactly like in the previous iterations.</strong></p><hr><h3 id="Application-permissions-have-been-reworked-to-be-simpler"><a href="#Application-permissions-have-been-reworked-to-be-simpler" class="headerlink" title="Application permissions have been reworked to be simpler"></a>Application permissions have been reworked to be simpler</h3><p>In RC2, we introduced application permissions. <strong>To make the migration from RC1 to RC2 smoother, application permissions were mostly optional</strong> and OpenIddict had a fallback mechanism called &quot;implicit permissions&quot; it used to determine whether an application could perform the requested action. For instance, if no permission was explicitly attached to the application, it was considered fully trusted and was granted all the permissions.</p><p>Similarly, if you granted the &quot;token endpoint&quot; permission to an application but NO &quot;grant type&quot; permission, it was assumed the client application was allowed to use the password or client credentials grants.</p><p><strong>Retrospectively, this logic was too complex and I decided to remove it in RC3.</strong></p><p><strong>Starting with RC3, permissions are no longer optional nor implicit</strong>: if you don&#39;t explicitly grant an application the necessary permissions, it will be blocked by OpenIddict.</p><p>To attach permissions to an application, use <code>OpenIddictApplicationManager</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> descriptor = <span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"mvc"</span>,</div><div class="line">    ClientSecret = <span class="string">"901564A5-E7FE-42CB-B10D-61EF6A8F3654"</span>,</div><div class="line">    DisplayName = <span class="string">"MVC client application"</span>,</div><div class="line">    PostLogoutRedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signout-callback-oidc"</span>) &#125;,</div><div class="line">    RedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signin-oidc"</span>) &#125;,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Authorization,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Logout,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.RefreshToken,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Email,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Profile,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Roles</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(descriptor);</div></pre></td></tr></table></figure><p>If you don&#39;t care about permissions (e.g because you don&#39;t have third-party clients), you can instead disable them:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.IgnoreEndpointPermissions()</div><div class="line">               .IgnoreGrantTypePermissions()</div><div class="line">               .IgnoreScopePermissions();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><hr><h3 id="Scope-validation-and-anonymous-clients-rejection-are-now-enabled-by-default"><a href="#Scope-validation-and-anonymous-clients-rejection-are-now-enabled-by-default" class="headerlink" title="Scope validation and anonymous clients rejection are now enabled by default"></a>Scope validation and anonymous clients rejection are now enabled by default</h3><p>Starting with RC3, <strong>OpenIddict will now enforce scope validation and reject token and revocation requests that don&#39;t specify a <code>client_id</code></strong>. In RC2, these checks were opt-in (enabled via <code>options.EnableScopeValidation()</code> and <code>options.RequireClientIdentification()</code>) ; <strong>in RC3, they are now opt-out</strong>.</p><p>If, after migrating to RC3, you see errors similar to these ones:</p><blockquote><p><strong>invalid_scope</strong> : The specified &#39;scope&#39; parameter is not valid.</p></blockquote><p>Simply add the scopes you want to use to the list of registered scopes:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,</div><div class="line">                               OpenIdConnectConstants.Scopes.Profile,</div><div class="line">                               OpenIddictConstants.Scopes.Roles);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><blockquote><p><strong>invalid_request</strong> : The mandatory &#39;client_id&#39; parameter is missing.</p></blockquote><p>Add an application entry for the client application and send the corresponding <code>client_id</code> as part of the token request:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> descriptor = <span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"postman"</span>,</div><div class="line">    DisplayName = <span class="string">"Postman"</span>,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.Password,</div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.RefreshToken,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Email,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Profile,</div><div class="line">        OpenIddictConstants.Permissions.Scopes.Roles</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(descriptor);</div></pre></td></tr></table></figure><p>If you prefer disabling these checks, you can use <code>options.DisableScopeValidation()</code> and <code>options.AcceptAnonymousClients()</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict()</div><div class="line"></div><div class="line">    <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">    .AddServer(options =&gt;</div><div class="line">    &#123;</div><div class="line">        options.AcceptAnonymousClients();</div><div class="line">        options.DisableScopeValidation();</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><div class="note tip"><p>Note: if you already use <code>options.EnableScopeValidation()</code> and/or <code>options.RequireClientIdentification()</code> in your code, you can safely remove these calls.</p></div><hr><h3 id="New-exception-messages-have-been-introduced-to-make-debugging-easier"><a href="#New-exception-messages-have-been-introduced-to-make-debugging-easier" class="headerlink" title="New exception messages have been introduced to make debugging easier"></a>New exception messages have been introduced to make debugging easier</h3><p>In this release, <strong>we also made debugging easier by adding custom exception messages instead of relying on the rather cryptic DI-related messages</strong> thrown by ASP.NET Core.</p><p>If you forget to register stores, you&#39;ll now get a much clearer exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : No application store has been registered in the dependency injection container.</p><p>To register the Entity Framework Core stores, reference the <code>OpenIddict.EntityFrameworkCore</code> package and call <code>services.AddOpenIddict().AddCore().UseEntityFrameworkCore()</code>.</p><p>To register a custom store, create an implementation of <code>IOpenIddictApplicationStore</code> and use <code>services.AddOpenIddict().AddCore().AddApplicationStore()</code> to add it to the DI container.</p></blockquote><p>If you use an entity that is not compatible with the underlying store, you&#39;ll also get a better exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : The specified application type is not compatible with the Entity Framework Core stores.</p><p>When enabling the Entity Framework Core stores, make sure you use the built-in <code>OpenIddictApplication</code> entity (from the <code>OpenIddict.EntityFrameworkCore.Models</code> package) or a custom entity that inherits from the generic <code>OpenIddictApplication</code> entity.</p></blockquote><p>Similarly, if you forget to register the core services when enabling the server or validation components, you&#39;ll get an exception:</p><blockquote><p><strong>System.InvalidOperationException</strong> : The core services must be registered when enabling the server handler. To register the OpenIddict core services, use <code>services.AddOpenIddict().AddCore()</code>.</p></blockquote><blockquote><p><strong>System.InvalidOperationException</strong> : The core services must be registered when enabling reference tokens support. To register the OpenIddict core services, use <code>services.AddOpenIddict().AddCore()</code>.</p></blockquote><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>OpenIddict RC3 will be the latest release candidate and RTM will be the next step.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OpenIddict RC3 is now available on NuGet.org:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/1.0.0-rc3-final&quot;&gt;OpenIddict – 1.0.0-rc3-final&lt;/a&gt; (for ASP.NET Core 1.x)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/2.0.0-rc3-final&quot;&gt;OpenIddict – 2.0.0-rc3-final&lt;/a&gt; (for ASP.NET Core 2.x)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;What-39-s-new-in-this-release&quot;&gt;&lt;a href=&quot;#What-39-s-new-in-this-release&quot; class=&quot;headerlink&quot; title=&quot;What&amp;#39;s new in this release?&quot;&gt;&lt;/a&gt;What&amp;#39;s new in this release?&lt;/h2&gt;&lt;h3 id=&quot;The-OpenIddict-services-registration-APIs-have-been-revamped&quot;&gt;&lt;a href=&quot;#The-OpenIddict-services-registration-APIs-have-been-revamped&quot; class=&quot;headerlink&quot; title=&quot;The OpenIddict services registration APIs have been revamped&quot;&gt;&lt;/a&gt;The OpenIddict services registration APIs have been revamped&lt;/h3&gt;&lt;p&gt;In this release, &lt;strong&gt;we focused on reworking the OpenIddict registration APIs to offer a better user experience&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;As part of this change, &lt;strong&gt;we split the OpenIddict services into three areas&lt;/strong&gt; - &lt;code&gt;Core&lt;/code&gt;, &lt;code&gt;Server&lt;/code&gt; and &lt;code&gt;Validation&lt;/code&gt; - and the &lt;code&gt;IServiceCollection&lt;/code&gt; APIs have been updated to reflect that:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/main-builder.png&quot; alt=&quot;main-builder.png&quot;&gt;&lt;p&gt;Each specialized builder only exposes the options that are relevant to its specific area:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/specialized-builders.png&quot; alt=&quot;specialized-builders.png&quot;&gt;&lt;p&gt;Of course, the calls to &lt;code&gt;AddCore()&lt;/code&gt;, &lt;code&gt;AddServer()&lt;/code&gt; and &lt;code&gt;AddValidation()&lt;/code&gt; can be chained:&lt;/p&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;services.AddOpenIddict()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict core services.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddCore(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Register the Entity Framework stores and models.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.UseEntityFrameworkCore()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .UseDbContext&amp;lt;ApplicationDbContext&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict server handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddServer(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Register the ASP.NET Core MVC binder used by OpenIddict.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Note: if you don&#39;t call this method, you won&#39;t be able to&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.UseMvc();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Enable the authorization, logout, token and userinfo endpoints.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.EnableAuthorizationEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/authorize&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableLogoutEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/logout&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableTokenEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/connect/token&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .EnableUserinfoEndpoint(&lt;span class=&quot;string&quot;&gt;&quot;/api/userinfo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Note: the Mvc.Client sample only uses the code flow and the password flow, but you&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// can enable the other flows if you need to support implicit or client credentials.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.AllowAuthorizationCodeFlow()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .AllowPasswordFlow()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               .AllowRefreshTokenFlow();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// During development, you can disable the HTTPS requirement.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        options.DisableHttpsRequirement();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Register the OpenIddict validation handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Note: the OpenIddict validation handler is only compatible with the&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// default token format or with reference tokens and cannot be used with&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .AddValidation();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Introducing these specialized builders was also a great opportunity to revisit how the OpenIddict entities are registered&lt;/strong&gt;. In the RC2 bits, this is controlled by the &lt;code&gt;services.AddOpenIddict&amp;lt;...&amp;gt;()&lt;/code&gt; method, that determines which entities are used depending on the overload.&lt;/p&gt;&lt;p&gt;In RC3, the generic &lt;code&gt;services.AddOpenIddict&amp;lt;...&amp;gt;()&lt;/code&gt; methods have been removed and replaced by a more explicit pattern:&lt;/p&gt;&lt;img src=&quot;/2018/06/20/openiddict-rc3-is-out/core-builder-entities.png&quot; alt=&quot;core-builder-entities.png&quot;&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>The aspnet-contrib OAuth 2.0/OpenID 2.0 social providers are now RTM</title>
    <link href="https://kevinchalet.com/2018/06/18/the-aspnet-contrib-oauth-2-0-openid-2-0-social-providers-are-now-rtm/"/>
    <id>https://kevinchalet.com/2018/06/18/the-aspnet-contrib-oauth-2-0-openid-2-0-social-providers-are-now-rtm/</id>
    <published>2018-06-18T20:00:00.000Z</published>
    <updated>2018-06-18T20:17:28.874Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I&#39;m really pleased to announce that the aspnet-contrib social providers are now RTM.</p><p>I&#39;d like to thank all the contributors – 47 at the time of writing – who helped make that possible, with a special mention to <a href="https://github.com/kinosang" target="_blank" rel="external">Chino Chang</a>, who did a fantastic job by manually porting most of the social providers to the ASP.NET Core 2.0 authentication stack: sir, you rock!</p><p>Each provider comes with 2 versions: one for ASP.NET Core 1.x and one for ASP.NET Core 2.x. You can find the complete list at the end of this post.</p><div class="note tip"><p>Both versions will receive security updates/bug fixes but new providers will be backported to ASP.NET Core 1.x only if there&#39;s enough demand. If you still run an ASP.NET Core 1.x application, let us know!</p></div><h2 id="OAuth-2-0-social-providers"><a href="#OAuth-2-0-social-providers" class="headerlink" title="OAuth 2.0 social providers"></a>OAuth 2.0 social providers</h2><table><thead><tr><th style="text-align:center">Package name</th><th style="text-align:center">Version for ASP.NET Core 1.x</th><th style="text-align:center">Version for ASP.NET Core 2.x</th></tr></thead><tbody><tr><td style="text-align:center">AspNet.Security.OAuth.Amazon</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.ArcGIS</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Asana</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Autodesk</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Automatic</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.BattleNet</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Beam</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Bitbucket</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Buffer</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.CiscoSpark</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.DeviantArt</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Discord</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Dropbox</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.EVEOnline</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Fitbit</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Foursquare</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.GitHub</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Gitter</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.HealthGraph</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Imgur</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Instagram</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.LinkedIn</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.MailChimp</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Myob</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Onshape</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Patreon</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Paypal</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.QQ</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Reddit</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Salesforce</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Slack</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.SoundCloud</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Spotify</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.StackExchange</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Strava</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Twitch</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Untappd</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Vimeo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.VisualStudio</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Vkontakte</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Weibo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Weixin</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.WordPress</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yahoo</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yammer</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OAuth.Yandex</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr></tbody></table><h2 id="OpenID-2-0-social-providers"><a href="#OpenID-2-0-social-providers" class="headerlink" title="OpenID 2.0 social providers"></a>OpenID 2.0 social providers</h2><table><thead><tr><th style="text-align:center">Package name</th><th style="text-align:center">Version for ASP.NET Core 1.x</th><th style="text-align:center">Version for ASP.NET Core 2.x</th></tr></thead><tbody><tr><td style="text-align:center">AspNet.Security.OpenId</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr><tr><td style="text-align:center">AspNet.Security.OpenId.Steam</td><td style="text-align:center"><code>1.0.0</code></td><td style="text-align:center"><code>2.0.0</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Today, I&amp;#39;m really pleased to announce that the aspnet-contrib social providers are now RTM.&lt;/p&gt;&lt;p&gt;I&amp;#39;d like to thank all the contr
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid" scheme="https://kevinchalet.com/tags/openid/"/>
    
  </entry>
  
  <entry>
    <title>OpenIddict RC2 is now on NuGet.org</title>
    <link href="https://kevinchalet.com/2018/02/19/openiddict-rc2-is-now-on-nuget-org/"/>
    <id>https://kevinchalet.com/2018/02/19/openiddict-rc2-is-now-on-nuget-org/</id>
    <published>2018-02-19T18:00:00.000Z</published>
    <updated>2018-02-19T17:47:40.838Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, new OpenIddict packages were pushed to NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc2-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc2-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc2-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc2-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><p>Starting with RC2, <strong>using OpenIddict with third-party client applications</strong> (i.e applications you don&#39;t own and are managed by someone else) <strong>is officially supported</strong>. For that, new features – that were still work in progress in the previous iterations – have been added:</p><ul><li>A new <strong>application permissions feature was added</strong>, which allows controlling and limiting the features a client application can use. For instance, to allow a client application to use only the authorization code flow and the logout endpoint, the following permissions can be granted:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _applicationManager.CreateAsync(<span class="keyword">new</span> OpenIddictApplicationDescriptor</div><div class="line">&#123;</div><div class="line">    ClientId = <span class="string">"mvc"</span>,</div><div class="line">    ClientSecret = <span class="string">"901564A5-E7FE-42CB-B10D-61EF6A8F3654"</span>,</div><div class="line">    DisplayName = <span class="string">"MVC client application"</span>,</div><div class="line">    PostLogoutRedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signout-callback-oidc"</span>) &#125;,</div><div class="line">    RedirectUris = &#123; <span class="keyword">new</span> Uri(<span class="string">"http://localhost:53507/signin-oidc"</span>) &#125;,</div><div class="line">    Permissions =</div><div class="line">    &#123;</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Authorization,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Logout,</div><div class="line">        OpenIddictConstants.Permissions.Endpoints.Token,</div><div class="line"></div><div class="line">        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>For more information about this feature, you can read <a href="https://openiddict.github.io/openiddict-documentation/features/application-permissions.html" target="_blank" rel="external">the corresponding documentation</a>.</p><ul><li>A new <strong>opt-in scope validation option was added</strong>. When it is enabled, OpenIddict automatically rejects authorization and token requests that specify unregistered scopes. Scopes can be registered statically using <code>options.RegisterScopes([list of authorized scopes])</code> or dynamically, using <code>OpenIddictScopeManager.CreateAsync()</code>:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">services.AddOpenIddict(options =&gt;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="comment">// Mark the "email" and "profile" scopes as valid scopes.</span></div><div class="line">    options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,</div><div class="line">                           OpenIdConnectConstants.Scopes.Profile);</div><div class="line"></div><div class="line">    <span class="comment">// Enable scope validation, so that authorization and token requests</span></div><div class="line">    <span class="comment">// that specify unregistered scopes are automatically rejected.</span></div><div class="line">    options.EnableScopeValidation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _scopeManager.CreateAsync(<span class="keyword">new</span> OpenIddictScopeDescriptor</div><div class="line">&#123;</div><div class="line">    Description = <span class="string">"Grants access to the reporting API"</span>,</div><div class="line">    DisplayName = <span class="string">"Reporting API"</span>,</div><div class="line">    Name = <span class="string">"reporting"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>The <strong>introspection endpoint was updated to reject access tokens that don&#39;t have any audience</strong> (since OpenIddict can no longer assume all the registered applications are fully trusted). This change requires updating your code to explicitly attach a resource to your tokens.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">    <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">    <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">ticket.SetResources(<span class="string">"reporting"</span>);</div></pre></td></tr></table></figure><a id="more"></a><ul><li>New <code>OpenIddictScopeManager</code> methods have been introduced to allow associating resources (aka API audiences) with specific scopes and retrieving all the resources corresponding to a set of scopes:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">await</span> _scopeManager.CreateAsync(<span class="keyword">new</span> OpenIddictScopeDescriptor</div><div class="line">&#123;</div><div class="line">    Name = <span class="string">"reporting"</span>,</div><div class="line">    Resources = &#123; <span class="string">"resource-server-1"</span>, <span class="string">"resource-server-2"</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ticket.SetResources(<span class="keyword">await</span> _scopeManager.ListResourcesAsync(scopes));</div></pre></td></tr></table></figure><ul><li>New <code>OpenIddictAuthorizationManager</code> methods have been added to make authorizations easier to create or retrieve:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a new permanent authorization associated with</span></div><div class="line"><span class="comment">// the specified user and containing the granted scopes:</span></div><div class="line"><span class="keyword">var</span> authorization = <span class="keyword">await</span> _authorizationManager.CreateAsync(</div><div class="line">    principal : ticket.Principal,</div><div class="line">    subject   : <span class="keyword">await</span> _userManager.GetUserIdAsync(user),</div><div class="line">    client    : <span class="keyword">await</span> _applicationManager.GetIdAsync(application),</div><div class="line">    type      : OpenIddictConstants.AuthorizationTypes.Permanent,</div><div class="line">    scopes    : ImmutableArray.CreateRange(ticket.GetScopes()),</div><div class="line">    properties: ImmutableDictionary.CreateRange(ticket.Properties.Items));</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Retrieve all the permanent and valid authorizations associated</span></div><div class="line"><span class="comment">// with the user and containing at least the request scopes:</span></div><div class="line"><span class="keyword">var</span> authorizations = <span class="keyword">await</span> _authorizationManager.FindAsync(</div><div class="line">    subject: _userManager.GetUserId(result.Principal),</div><div class="line">    client : <span class="keyword">await</span> _applicationManager.GetIdAsync(application),</div><div class="line">    status : OpenIddictConstants.Statuses.Valid,</div><div class="line">    type   : OpenIddictConstants.AuthorizationTypes.Permanent,</div><div class="line">    scopes : ImmutableArray.CreateRange(request.GetScopes()));</div></pre></td></tr></table></figure><ul><li><code>OpenIddictApplication.RedirectUris</code>, <code>OpenIddictApplication.PostLogoutRedirectUris</code> and <code>OpenIddictAuthorization.Scopes</code> are now serialized as JSON arrays in the database.</li></ul><h2 id="Migrate-to-OpenIddict-RC2"><a href="#Migrate-to-OpenIddict-RC2" class="headerlink" title="Migrate to OpenIddict RC2"></a>Migrate to OpenIddict RC2</h2><p><strong>Before updating your packages, read the <a href="https://openiddict.github.io/openiddict-documentation/guide/migration.html" target="_blank" rel="external">migration guide</a></strong>. It explains how to add an Entity Framework Core migration to update the OpenIddict tables and includes a migration script to convert the <code>RedirectUris</code>, <code>PostLogoutRedirectUris</code> and <code>Scopes</code> columns to the new JSON format.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Earlier today, new OpenIddict packages were pushed to NuGet.org:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/1.0.0-rc2-final&quot;&gt;OpenIddict – 1.0.0-rc2-final&lt;/a&gt; (for ASP.NET Core 1.x)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.nuget.org/packages/OpenIddict/2.0.0-rc2-final&quot;&gt;OpenIddict – 2.0.0-rc2-final&lt;/a&gt; (for ASP.NET Core 2.x)&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&quot;What-39-s-new&quot;&gt;&lt;a href=&quot;#What-39-s-new&quot; class=&quot;headerlink&quot; title=&quot;What&amp;#39;s new?&quot;&gt;&lt;/a&gt;What&amp;#39;s new?&lt;/h2&gt;&lt;p&gt;Starting with RC2, &lt;strong&gt;using OpenIddict with third-party client applications&lt;/strong&gt; (i.e applications you don&amp;#39;t own and are managed by someone else) &lt;strong&gt;is officially supported&lt;/strong&gt;. For that, new features – that were still work in progress in the previous iterations – have been added:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A new &lt;strong&gt;application permissions feature was added&lt;/strong&gt;, which allows controlling and limiting the features a client application can use. For instance, to allow a client application to use only the authorization code flow and the logout endpoint, the following permissions can be granted:&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; _applicationManager.CreateAsync(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OpenIddictApplicationDescriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ClientId = &lt;span class=&quot;string&quot;&gt;&quot;mvc&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ClientSecret = &lt;span class=&quot;string&quot;&gt;&quot;901564A5-E7FE-42CB-B10D-61EF6A8F3654&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DisplayName = &lt;span class=&quot;string&quot;&gt;&quot;MVC client application&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    PostLogoutRedirectUris = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Uri(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:53507/signout-callback-oidc&quot;&lt;/span&gt;) &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    RedirectUris = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Uri(&lt;span class=&quot;string&quot;&gt;&quot;http://localhost:53507/signin-oidc&quot;&lt;/span&gt;) &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Permissions =&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Authorization,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Logout,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.Endpoints.Token,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        OpenIddictConstants.Permissions.GrantTypes.AuthorizationCode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;For more information about this feature, you can read &lt;a href=&quot;https://openiddict.github.io/openiddict-documentation/features/application-permissions.html&quot;&gt;the corresponding documentation&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A new &lt;strong&gt;opt-in scope validation option was added&lt;/strong&gt;. When it is enabled, OpenIddict automatically rejects authorization and token requests that specify unregistered scopes. Scopes can be registered statically using &lt;code&gt;options.RegisterScopes([list of authorized scopes])&lt;/code&gt; or dynamically, using &lt;code&gt;OpenIddictScopeManager.CreateAsync()&lt;/code&gt;:&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;services.AddOpenIddict(options =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Mark the &quot;email&quot; and &quot;profile&quot; scopes as valid scopes.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options.RegisterScopes(OpenIdConnectConstants.Scopes.Email,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                           OpenIdConnectConstants.Scopes.Profile);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Enable scope validation, so that authorization and token requests&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// that specify unregistered scopes are automatically rejected.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    options.EnableScopeValidation();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; _scopeManager.CreateAsync(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OpenIddictScopeDescriptor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Description = &lt;span class=&quot;string&quot;&gt;&quot;Grants access to the reporting API&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    DisplayName = &lt;span class=&quot;string&quot;&gt;&quot;Reporting API&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Name = &lt;span class=&quot;string&quot;&gt;&quot;reporting&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;The &lt;strong&gt;introspection endpoint was updated to reject access tokens that don&amp;#39;t have any audience&lt;/strong&gt; (since OpenIddict can no longer assume all the registered applications are fully trusted). This change requires updating your code to explicitly attach a resource to your tokens.&lt;/li&gt;&lt;/ul&gt;&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ticket = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AuthenticationTicket(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ClaimsPrincipal(identity),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AuthenticationProperties(),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    OpenIdConnectServerDefaults.AuthenticationScheme);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ticket.SetResources(&lt;span class=&quot;string&quot;&gt;&quot;reporting&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Why you should never use Html.Raw in your Razor views</title>
    <link href="https://kevinchalet.com/2018/01/09/why-you-should-never-use-html-raw-in-your-razor-views/"/>
    <id>https://kevinchalet.com/2018/01/09/why-you-should-never-use-html-raw-in-your-razor-views/</id>
    <published>2018-01-09T18:30:00.000Z</published>
    <updated>2018-01-09T22:16:23.930Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, <strong>Microsoft released two security advisories for vulnerabilities I discovered in the ASP.NET Core 2.0 VS2017 templates</strong> and reported late October:</p><ul><li><p><a href="https://github.com/aspnet/Announcements/issues/284" target="_blank" rel="external"><strong>CVE-2018-0785</strong> - ASP.NET Core Templates enable Cross Site Request Forgery</a>: a CSRF vulnerability in <code>ManageController.GenerateRecoveryCodes()</code> allows re-generating the recovery codes associated with a victim&#39;s account, which may result in a definitive account lockout (aka per-user denial of service).</p></li><li><p><a href="https://github.com/aspnet/Announcements/issues/285" target="_blank" rel="external"><strong>CVE-2018-0784</strong> - ASP.NET Core Templates enable Elevation Of Privilege Vulnerability</a>.</p></li></ul><p>While the first one is a very classic case of cross-site request forgery (CSRF), the second one is a bit more interesting as it relies on a specificity of ASP.NET Core MVC to be exploited.</p><h2 id="Where-was-the-vulnerability-located"><a href="#Where-was-the-vulnerability-located" class="headerlink" title="Where was the vulnerability located?"></a>Where was the vulnerability located?</h2><p>When you create a new project based on the ASP.NET Core 2.0 templates offered by Visual Studio 2017 and opt for individual authentication (that uses ASP.NET Core Identity under the hood), a new <code>ManageController</code> and a bunch of views are automatically added to the resulting solution.</p><p>One of the actions exposed by this controller, <code>EnableAuthenticator</code>, allows you to generate a shared secret you can use in your favorite TOTP-based application (like Microsoft or Google Authenticator) to enable 2-factor authentication:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[HttpGet]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">EnableAuthenticator</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">await</span> _userManager.GetUserAsync(User);</div><div class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="string">$"Unable to load user with ID '<span class="subst">&#123;_userManager.GetUserId(User)&#125;</span>'."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> unformattedKey = <span class="keyword">await</span> _userManager.GetAuthenticatorKeyAsync(user);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(unformattedKey))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> _userManager.ResetAuthenticatorKeyAsync(user);</div><div class="line">        unformattedKey = <span class="keyword">await</span> _userManager.GetAuthenticatorKeyAsync(user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> model = <span class="keyword">new</span> EnableAuthenticatorViewModel</div><div class="line">    &#123;</div><div class="line">        SharedKey = FormatKey(unformattedKey),</div><div class="line">        AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> View(model);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>For that, a random value is generated server-side by Identity, stored in the database and used to build a special <code>otpauth://totp</code> URI which is <strong>rendered in the Razor view as an HTML attribute</strong> (that can be optionally read by a JS library to generate a QR code image client-side):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>@Model.SharedKey<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">"@Html.Raw(Model.AuthenticatorUri)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>xuht bbzd 3juv 4kt6 glpb l5tc jbc6 yjsn<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">"otpauth://totp/myappname:alice@bob.com?secret=XUHTBBZD3JUV4KT6GLPBL5TCJBC6YJSN&amp;issuer=myappname&amp;digits=6"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="What-does-the-vulnerability-consist-in"><a href="#What-does-the-vulnerability-consist-in" class="headerlink" title="What does the vulnerability consist in?"></a>What does the vulnerability consist in?</h2><p>As you can see, <strong>the view uses <code>Html.Raw</code> to render the generated authenticator URI</strong>, which is confirmed by the fact the <code>&amp;</code> character is not properly HTML-encoded (it should be rendered in the HTML document as <code>&amp;amp;</code> since it&#39;s a special character).</p><p><strong>Innocently, you might think it&#39;s not a big deal since <code>AuthenticatorUri</code> is generated server-side</strong> (and thus can&#39;t be directly set by an attacker).</p><p><strong>Unfortunately, that&#39;s not exact</strong>: while it&#39;s true that adding an <code>AuthenticatorUri</code> paramater will have initially no effect on the GET <code>EnableAuthenticator</code> action (since the value will be always overridden when setting <code>EnableAuthenticatorViewModel.AuthenticatorUri</code> before returning the view), <strong>the query string value will be used if the form is re-displayed</strong>.</p><p><strong>Yet, that&#39;s exactly what the POST action does if the model state is not valid</strong> (e.g because the 2FA confirmation code was not correctly typed by the user or was invalid, which may happen if the date/time differ between the server and the device that generated the 2FA code):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[HttpPost]</div><div class="line">[ValidateAntiForgeryToken]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">EnableAuthenticator</span>(<span class="params">EnableAuthenticatorViewModel model</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!ModelState.IsValid)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> View(model);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">await</span> _userManager.GetUserAsync(User);</div><div class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationException(<span class="string">$"Unable to load user with ID '<span class="subst">&#123;_userManager.GetUserId(User)&#125;</span>'."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Strip spaces and hypens</span></div><div class="line">    <span class="keyword">var</span> verificationCode = model.Code.Replace(<span class="string">" "</span>, <span class="keyword">string</span>.Empty).Replace(<span class="string">"-"</span>, <span class="keyword">string</span>.Empty);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> is2faTokenValid = <span class="keyword">await</span> _userManager.VerifyTwoFactorTokenAsync(</div><div class="line">        user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!is2faTokenValid)</div><div class="line">    &#123;</div><div class="line">        ModelState.AddModelError(<span class="string">"model.Code"</span>, <span class="string">"Verification code is invalid."</span>);</div><div class="line">        <span class="keyword">return</span> View(model);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">await</span> _userManager.SetTwoFactorEnabledAsync(user, <span class="literal">true</span>);</div><div class="line">    _logger.LogInformation(<span class="string">"User with ID &#123;UserId&#125; has enabled 2FA with an authenticator app."</span>, user.Id);</div><div class="line">    <span class="keyword">return</span> RedirectToAction(<span class="keyword">nameof</span>(GenerateRecoveryCodes));</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note tip"><p>This feature – which is part of ASP.NET Core MVC&#39;s model binding/validation stack – is extremely useful since it&#39;s what allows the users of your websites to avoid re-typing all the values of an invalid form when it&#39;s re-displayed.</p></div><p><strong>The bad news is that using this specificity alongside <code>Html.Raw</code> can result in a XSS vulnerability being exploitable</strong> since an attacker can craft a special URL containing a malicious JavaScript payload that will be executed by the victim&#39;s browser if he or she sends an invalid 2FA confirmation code.</p><p>For instance, if a victim visits <code>https://localhost:44370/Manage/EnableAuthenticator?AuthenticatorUri=%22%3E%3C/div%3E%00%00%00%00%00%00%00%3Cscript%3Ealert(%22XSS%22)%3C/script%3E</code> (which uses a special pattern to bypass Chrome 61&#39;s XSS auditor feature) and enters an invalid code, the following HTML source will be rendered:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Scan the QR Code or enter this key <span class="tag">&lt;<span class="name">kbd</span>&gt;</span><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> into your two factor authenticator app. Spaces and casing do not matter.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>To enable QR code generation please read our <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://go.microsoft.com/fwlink/?Linkid=852423"</span>&gt;</span>documentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrCodeData"</span> <span class="attr">data-url</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>       <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">"XSS"</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="How-can-I-fix-the-vulnerability"><a href="#How-can-I-fix-the-vulnerability" class="headerlink" title="How can I fix the vulnerability?"></a>How can I fix the vulnerability?</h2><p>Detailed instructions are listed <a href="https://github.com/aspnet/Announcements/issues/285" target="_blank" rel="external">on Microsoft&#39;s announcement</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Earlier today, &lt;strong&gt;Microsoft released two security advisories for vulnerabilities I discovered in the ASP.NET Core 2.0 VS2017 templat
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="razor" scheme="https://kevinchalet.com/tags/razor/"/>
    
      <category term="vulnerability" scheme="https://kevinchalet.com/tags/vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>The new ASOS and OpenIddict packages are now on NuGet.org</title>
    <link href="https://kevinchalet.com/2017/10/20/the-new-asos-and-openiddict-packages-are-now-on-nuget-org/"/>
    <id>https://kevinchalet.com/2017/10/20/the-new-asos-and-openiddict-packages-are-now-on-nuget-org/</id>
    <published>2017-10-20T21:00:00.000Z</published>
    <updated>2017-10-20T20:41:56.551Z</updated>
    
    <content type="html"><![CDATA[<p>Today&#39;s the day: new ASOS and OpenIddict packages (compatible with ASP.NET Core 1.0 and 2.0) have just been pushed to NuGet.org:</p><ul><li><a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/1.0.2" target="_blank" rel="external">AspNet.Security.OpenIdConnect.Server – 1.0.2</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/2.0.0-rc1-final" target="_blank" rel="external">AspNet.Security.OpenIdConnect.Server – 2.0.0-rc1-final</a> (for ASP.NET Core 2.x)</li><li><a href="https://www.nuget.org/packages/Owin.Security.OpenIdConnect.Server/1.0.2" target="_blank" rel="external">Owin.Security.OpenIdConnect.Server – 1.0.2</a> (for OWIN/Katana 3.x)</li><li><a href="https://www.nuget.org/packages/Owin.Security.OpenIdConnect.Server/2.0.0-rc1-final" target="_blank" rel="external">Owin.Security.OpenIdConnect.Server – 2.0.0-rc1-final</a> (for OWIN/Katana 4.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/1.0.0-rc1-final" target="_blank" rel="external">OpenIddict – 1.0.0-rc1-final</a> (for ASP.NET Core 1.x)</li><li><a href="https://www.nuget.org/packages/OpenIddict/2.0.0-rc1-final" target="_blank" rel="external">OpenIddict – 2.0.0-rc1-final</a> (for ASP.NET Core 2.x)</li></ul><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><h3 id="In-AspNet-Security-OpenIdConnect-Server-and-Owin-Security-OpenIdConnect-Server-1-0-2"><a href="#In-AspNet-Security-OpenIdConnect-Server-and-Owin-Security-OpenIdConnect-Server-1-0-2" class="headerlink" title="In AspNet.Security.OpenIdConnect.Server and Owin.Security.OpenIdConnect.Server 1.0.2"></a>In AspNet.Security.OpenIdConnect.Server and Owin.Security.OpenIdConnect.Server 1.0.2</h3><ul><li>Calling <code>context.HandleResponse()</code> from the <code>SerializeAuthorizationCode</code>, <code>SerializeAccessToken</code>, <code>SerializeIdentityToken</code> and <code>SerializeRefreshToken</code> events no longer throws an exception if the authentication ticket is not explicitly set (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/c734c6f09952f89906398fd6d0e0d7c311084e31" target="_blank" rel="external">c734c6f</a>).</li><li>An invalid exception message mentioning OpenIddict was reworded (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/cd83912b47239ab7a47b6e8b4c312044890e9e84" target="_blank" rel="external">cd83912</a>).</li><li>The authorization code/access token/identity token/refresh token deserialization methods are no longer called twice for introspection and revocation requests that specify a <code>token_type_hint</code> that doesn&#39;t match the actual token type (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/c561a3418daefda64f7bd27ae5d9b2f0dce03e27" target="_blank" rel="external">c561a34</a>).</li><li>A standard-compliant <code>Expires</code> HTTP header is now returned by the non-interactive ASOS endpoints (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/5af1d44f933a1c81f1e159ac2cb7ee949e863d15" target="_blank" rel="external">5af1d44</a>).</li><li>New constants have been added to <code>OpenIdConnectConstants</code> (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/0980fb8836daeb02edeea9efd53dc75965c678e5" target="_blank" rel="external">0980fb8</a>) (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/461ecd44c6b1398a43f9ce7462718941476dbcf1" target="_blank" rel="external">461ecd4</a>).</li><li>New events allowing to control the sign-in, sign-out and challenge operations have been introduced (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/d95810b28167409b8b9e60059568341fef113eb8" target="_blank" rel="external">d95810b</a>) (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/3801427b4a69a927b7ec56156e92b66caba92eee" target="_blank" rel="external">3801427</a>).</li></ul><h3 id="In-AspNet-Security-OpenIdConnect-Server-2-0-0-rc1-final"><a href="#In-AspNet-Security-OpenIdConnect-Server-2-0-0-rc1-final" class="headerlink" title="In AspNet.Security.OpenIdConnect.Server 2.0.0-rc1-final"></a>In AspNet.Security.OpenIdConnect.Server 2.0.0-rc1-final</h3><h4 id="OpenIdConnectServerProvider-can-now-be-resolved-from-the-DI-container"><a href="#OpenIdConnectServerProvider-can-now-be-resolved-from-the-DI-container" class="headerlink" title="OpenIdConnectServerProvider can now be resolved from the DI container"></a><code>OpenIdConnectServerProvider</code> can now be resolved from the DI container</h4><p>Good news: <code>OpenIdConnectServerProvider</code> can now be used with dependency injection thanks to a huge refactoring of the ASP.NET Core 2.0 authentication stack, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/275" target="_blank" rel="external">that now implements the options-based pattern I recommended</a>.</p><p>To use constructor-injected dependencies in your provider, you can ask ASOS to resolve the provider instance at request-time by setting the new <code>OpenIdConnectServerOptions.ProviderType</code> option (which is a wrapper around <code>AuthenticationSchemeOptions.EventsType</code>):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationProvider</span> : <span class="title">OpenIdConnectServerProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ApplicationContext _database;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationProvider</span>(<span class="params">ApplicationContext database</span>)</span></div><div class="line">    &#123;</div><div class="line">        _database = database;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register your custom provider in the DI container.</span></div><div class="line">        services.AddScoped&lt;AuthorizationProvider&gt;();</div><div class="line"></div><div class="line">        services.AddAuthentication()</div><div class="line">            .AddOpenIdConnectServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// ...</span></div><div class="line"></div><div class="line">                <span class="comment">// Ask ASOS to resolve the provider instance corresponding</span></div><div class="line">                <span class="comment">// to the specified type when an OIDC request is received.</span></div><div class="line">                options.ProviderType = <span class="keyword">typeof</span>(AuthorizationProvider);</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note info"><p>Such feature requires built-in support in the authentication stack and thus, is unfortunately not available in the OWIN/Katana version of ASOS 2.x.</p></div><h3 id="In-Owin-Security-OpenIdConnect-Server-2-0-0-rc1-final"><a href="#In-Owin-Security-OpenIdConnect-Server-2-0-0-rc1-final" class="headerlink" title="In Owin.Security.OpenIdConnect.Server 2.0.0-rc1-final"></a>In Owin.Security.OpenIdConnect.Server 2.0.0-rc1-final</h3><p><strong>The OWIN/Katana version of ASOS 2.x now requires targeting the <code>Microsoft.Owin</code> <code>4.0.0-alpha1</code> packages</strong>, which are natively compatible with IdentityModel 5.2.0-preview1 (unlike the previous iteration).</p><h3 id="In-OpenIddict-1-0-0-rc1-final-and-2-0-0-rc1-final"><a href="#In-OpenIddict-1-0-0-rc1-final-and-2-0-0-rc1-final" class="headerlink" title="In OpenIddict 1.0.0-rc1-final and 2.0.0-rc1-final"></a>In OpenIddict 1.0.0-rc1-final and 2.0.0-rc1-final</h3><p>OpenIddict 1.0.0-rc1-final/2.0.0-rc1-final is the first public version of OpenIddict. To learn more about the changes added since the first betas, don&#39;t hesitate to take a look at <a href="https://github.com/openiddict/openiddict-core/issues?q=milestone%3A2.0.0-rc1" target="_blank" rel="external">the GitHub repository</a>.</p><a id="more"></a><h2 id="What-package-s-should-I-reference"><a href="#What-package-s-should-I-reference" class="headerlink" title="What package(s) should I reference?"></a>What package(s) should I reference?</h2><p>Depending on <strong>whether your application targets OWIN/Katana 1.x/2.x or ASP.NET Core 1.x/2.x, you&#39;ll need to reference different versions</strong> of the ASOS/OpenIddict packages as the authentication stack has been completely revamped in ASP.NET Core 2.0. For more information about these changes, read the <a href="https://github.com/aspnet/Announcements/issues/262" target="_blank" rel="external">Auth 2.0 Changes / Migration announcement on GitHub</a>.</p><h3 id="Your-application-uses-the-low-level-OpenID-Connect-server-handler-aka-ASOS"><a href="#Your-application-uses-the-low-level-OpenID-Connect-server-handler-aka-ASOS" class="headerlink" title="Your application uses the low-level OpenID Connect server handler (aka ASOS)"></a>Your application uses the low-level OpenID Connect server handler (aka ASOS)</h3><h4 id="Your-application-is-an-ASP-NET-Core-1-x-2-x-project"><a href="#Your-application-is-an-ASP-NET-Core-1-x-2-x-project" class="headerlink" title="Your application is an ASP.NET Core 1.x/2.x project"></a>Your application is an ASP.NET Core 1.x/2.x project</h4><table><thead><tr><th style="text-align:center">ASP.NET Core version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">AspNet.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>1.0.2</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">AspNet.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr></tbody></table><h4 id="Your-application-is-an-OWIN-Katana-legacy-ASP-NET-project"><a href="#Your-application-is-an-OWIN-Katana-legacy-ASP-NET-project" class="headerlink" title="Your application is an OWIN/Katana (legacy ASP.NET) project"></a>Your application is an OWIN/Katana (legacy ASP.NET) project</h4><table><thead><tr><th style="text-align:center">OWIN/Katana version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>3.x</strong></td><td style="text-align:center">Owin.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>1.0.2</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>4.x</strong></td><td style="text-align:center">Owin.Security.OpenIdConnect.Server</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server middleware.</td></tr></tbody></table><h3 id="Your-application-uses-OpenIddict"><a href="#Your-application-uses-OpenIddict" class="headerlink" title="Your application uses OpenIddict"></a>Your application uses OpenIddict</h3><table><thead><tr><th style="text-align:center">ASP.NET Core version</th><th style="text-align:center">Package name</th><th style="text-align:center">Package version</th><th style="text-align:center">Package description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server component that is needed to handle OAuth2 and OIDC requests.</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.5.1).</td></tr><tr><td style="text-align:center"><strong>1.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>1.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the OpenID Connect server component that is needed to handle OAuth2 and OIDC requests.</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFramework</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework 6.x stores (only compatible with .NET Framework 4.6.1).</td></tr><tr><td style="text-align:center"><strong>2.x</strong></td><td style="text-align:center">OpenIddict.EntityFrameworkCore</td><td style="text-align:center"><strong>2.0.0-rc1-final</strong></td><td style="text-align:center">Contains the Entity Framework Core stores.</td></tr></tbody></table><div class="note tip"><p>When using OpenIddict, the appropriate ASOS version will be automatically chosen by NuGet: <strong>you don&#39;t need to explicitly reference</strong> the <code>AspNet.Security.OpenIdConnect.Server</code> package.</p></div>]]></content>
    
    <summary type="html">
    
      In this post, discover what&#39;s new in the latest ASOS and OpenIddict packages.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>Using Azure Key Vault with ASOS and OpenIddict</title>
    <link href="https://kevinchalet.com/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/"/>
    <id>https://kevinchalet.com/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/</id>
    <published>2017-08-15T15:00:00.000Z</published>
    <updated>2017-08-15T14:54:17.843Z</updated>
    
    <content type="html"><![CDATA[<p>Last week, I received an email from someone who was asking me whether <strong>ASOS or OpenIddict could be used with Azure Key Vault</strong> (Microsoft&#39;s cloud-based Hardware Security Module offer). Since it&#39;s quite a recurring question, I thought it was worth writing a blog post to demonstrate how to do that.</p><p>So, good news: <strong>this is definitely possible</strong>! And thanks to <a href="https://github.com/onovotny/RSAKeyVaultProvider" target="_blank" rel="external">a new project</a> released recently by <a href="https://github.com/onovotny" target="_blank" rel="external">Oren Novotny</a>, this has never been so easy.</p><h2 id="What-is-a-Hardware-Security-Module"><a href="#What-is-a-Hardware-Security-Module" class="headerlink" title="What is a Hardware Security Module?"></a>What is a Hardware Security Module?</h2><p>A HSM is a <strong>hardened device</strong> – generally a PCI board or a standalone appliance – that is exclusively <strong>dedicated to cryptographic operations</strong> (data encryption/decryption, data signing/verification, key management, etc.). Though HSMs are complex systems, the main idea is actually simple: <strong>key material should never leave the HSM&#39;s secure enclave</strong>, which is protected against physical or digital intrusions.</p><p>As such, when a service requires encrypting or signing data (e.g a JWT access token in our case), it has to ask the Hardware Security Module to execute the cryptographic operation on its behalf.</p><h2 id="Use-Azure-Key-Vault-to-sign-the-JWT-tokens-issued-by-ASOS-OpenIddict"><a href="#Use-Azure-Key-Vault-to-sign-the-JWT-tokens-issued-by-ASOS-OpenIddict" class="headerlink" title="Use Azure Key Vault to sign the JWT tokens issued by ASOS/OpenIddict"></a>Use Azure Key Vault to sign the JWT tokens issued by ASOS/OpenIddict</h2><h3 id="Create-a-new-HSM-key-and-register-a-client-application-allowed-to-access-it"><a href="#Create-a-new-HSM-key-and-register-a-client-application-allowed-to-access-it" class="headerlink" title="Create a new HSM key and register a client application allowed to access it"></a>Create a new HSM key and register a client application allowed to access it</h3><p>If you don&#39;t have a key yet, you&#39;ll have to create one, register a new application in the Azure Active Directory database and grant it an access to your signing key. If you&#39;re not familiar with this procedure, I encourage you to read <a href="https://www.humankode.com/asp-net-core/how-to-store-secrets-in-azure-key-vault-using-net-core" target="_blank" rel="external">this tutorial</a> or watch the corresponding video:</p><div class="video-container"><iframe src="//www.youtube.com/embed/cdoY_pnqPiA" frameborder="0" allowfullscreen></iframe></div><div class="note info"><p><strong>Azure Key Vault actually offers two pricing tiers: standard and premium</strong>. To be able to generate a HSM-protected key (referred to as &quot;hardware key&quot;), you <strong>must</strong> choose the premium tier when creating your vault. Don&#39;t worry, the difference between the two tiers is unbelievably marginal: at the time of writing, <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/" target="_blank" rel="external">$1/month per RSA 2048-bit key</a>.</p></div><a id="more"></a><h3 id="Register-the-aspnet-contrib-and-rsakeyvaultprovider-NuGet-feeds"><a href="#Register-the-aspnet-contrib-and-rsakeyvaultprovider-NuGet-feeds" class="headerlink" title="Register the aspnet-contrib and rsakeyvaultprovider NuGet feeds"></a>Register the aspnet-contrib and rsakeyvaultprovider NuGet feeds</h3><p>To register the required feeds, simply update or add a <code>NuGet.config</code> file at the root of your project:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">packageSources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"NuGet"</span> <span class="attr">value</span>=<span class="string">"https://api.nuget.org/v3/index.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"aspnet-contrib"</span> <span class="attr">value</span>=<span class="string">"https://www.myget.org/F/aspnet-contrib/api/v3/index.json"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"rsakeyvaultprovider"</span> <span class="attr">value</span>=<span class="string">"https://www.myget.org/F/rsakeyvaultprovider/api/v3/index.json"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">packageSources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Install-the-ASOS-OpenIddict-and-RSAKeyVaultProvider-packages"><a href="#Install-the-ASOS-OpenIddict-and-RSAKeyVaultProvider-packages" class="headerlink" title="Install the ASOS/OpenIddict and RSAKeyVaultProvider packages"></a>Install the ASOS/OpenIddict and RSAKeyVaultProvider packages</h3><p>For that, simply update your <code>.csproj</code> file to register the <code>RSAKeyVaultProvider</code> package and, <strong>depending on whether you&#39;re using</strong> <strong>ASOS or OpenIddict</strong>, <code>OpenIddict</code> (and <code>OpenIddict.EntityFrameworkCore</code>) or <code>AspNet.Security.OpenIdConnect.Server</code>:</p><h4 id="ASOS"><a href="#ASOS" class="headerlink" title="ASOS"></a>ASOS</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenIdConnect.Server"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.All"</span> <span class="attr">Version</span>=<span class="string">"2.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"RSAKeyVaultProvider"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview.1.build.16"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="OpenIddict"><a href="#OpenIddict" class="headerlink" title="OpenIddict"></a>OpenIddict</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp2.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.AspNetCore.All"</span> <span class="attr">Version</span>=<span class="string">"2.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"RSAKeyVaultProvider"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-preview.1.build.16"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><div class="note tip"><p><strong>This blog post was written for the ASP.NET Core 2.0 RTM versions of ASOS and OpenIddict</strong>, so make sure you&#39;re using the corresponding packages and not packages designed for ASP.NET Core 1.x.</p></div><h3 id="Retrieve-the-RSA-security-key-bundle-from-Azure-Key-Vault"><a href="#Retrieve-the-RSA-security-key-bundle-from-Azure-Key-Vault" class="headerlink" title="Retrieve the RSA security key bundle from Azure Key Vault"></a>Retrieve the RSA security key bundle from Azure Key Vault</h3><p>If you&#39;re already familiar with Azure Key Vault&#39;s API, the following snippet should be straightforward. The only particularity is the use of the <code>ToRSA(KeyBundle keyBundle)</code> extension provided by the <code>RSAKeyVaultProvider</code> package.</p><p>Its task is simple: <strong>returning a <code>RSA</code> instance that delegates the signing and decryption operations</strong> – that both require having direct access to the private key and thus can&#39;t be executed locally – to Azure Key Vault. This way, <strong>when ASOS or OpenIddict will need to sign a JWT access or identity token</strong>, they&#39;ll indirectly <strong>call Azure Key Vault&#39;s REST endpoints</strong> to generate the precious signature instead of doing that locally.</p><figure class="highlight csharp"><figcaption><span>KeyVaultHelper.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">KeyVaultHelper</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RsaSecurityKey <span class="title">GetSigningKey</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Note: Azure Key Vault's SDK automatically takes care of</span></div><div class="line">        <span class="comment">// renewing access tokens when necessary. You don't need to</span></div><div class="line">        <span class="comment">// handle that yourself as it includes a static cache.</span></div><div class="line">        <span class="keyword">var</span> client = <span class="keyword">new</span> KeyVaultClient(<span class="keyword">async</span> (authority, resource, scope) =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> context = <span class="keyword">new</span> AuthenticationContext(authority);</div><div class="line">            <span class="keyword">var</span> credentials = <span class="keyword">new</span> ClientCredential(<span class="string">"&#123;client identifier&#125;"</span>, <span class="string">"&#123;client secret&#125;"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> context.AcquireTokenAsync(resource, credentials);</div><div class="line">            <span class="keyword">if</span> (result == <span class="literal">null</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</div><div class="line">                    <span class="string">"An error occurred while retrieving a token from Azure AD."</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> result.AccessToken;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> key = client.GetKeyAsync(<span class="string">"&#123;vault URL&#125;"</span>, <span class="string">"&#123;key name&#125;"</span>).GetAwaiter().GetResult();</div><div class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(</div><div class="line">                <span class="string">"An error occurred while retrieving the signing key from Azure Key Vault."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RsaSecurityKey(client.ToRSA(key));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Create-custom-authorization-and-test-controllers"><a href="#Create-custom-authorization-and-test-controllers" class="headerlink" title="Create custom authorization and test controllers"></a>Create custom authorization and test controllers</h3><p>For the sake of simplicity, <strong>I decided to go with a unique authorization controller</strong> that can natively work with both ASOS and OpenIddict.</p><div class="note tip"><p>With ASOS, if you prefer handling token requests directly in the provider class, you can move this code to the <code>OpenIdConnectServerProvider.(On)HandleTokenRequest</code> event. For more information, read <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Creating your own OpenID Connect server with ASOS: implementing the resource owner password credentials grant">Creating your own OpenID Connect server with ASOS: implementing the resource owner password credentials grant</a>.</p></div><figure class="highlight csharp"><figcaption><span>AuthorizationController.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpPost(<span class="string">"~/connect/token"</span>)]</div><div class="line">    [Produces(<span class="string">"application/json"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Exchange</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> request = HttpContext.GetOpenIdConnectRequest();</div><div class="line">        <span class="keyword">if</span> (request.IsPasswordGrantType())</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Validate the user credentials.</span></div><div class="line"></div><div class="line">            <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider</span></div><div class="line">            <span class="comment">// applying a key derivation function like PBKDF2 to slow down</span></div><div class="line">            <span class="comment">// the password validation process. You SHOULD also consider</span></div><div class="line">            <span class="comment">// using a time-constant comparer to prevent timing attacks.</span></div><div class="line">            <span class="keyword">if</span> (request.Username != <span class="string">"alice@wonderland.com"</span> ||</div><div class="line">                request.Password != <span class="string">"P@ssw0rd"</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> Forbid(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create a new ClaimsIdentity holding the user identity.</span></div><div class="line">            <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="string">"Alice"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">                <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">                OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">            ticket.SetResources(<span class="string">"resource-server"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// Ask ASOS or OpenIddict to generate and return a token response.</span></div><div class="line">            <span class="keyword">return</span> SignIn(ticket.Principal, ticket.Properties, ticket.AuthenticationScheme);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">"The specified grant type is not supported."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><figcaption><span>TestController.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [Authorize]</div><div class="line">    [HttpGet(<span class="string">"~/test"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Test</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> User.GetClaim(OpenIdConnectConstants.Claims.Subject);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Register-ASOS-or-OpenIddict-in-the-ASP-NET-Core-pipeline"><a href="#Register-ASOS-or-OpenIddict-in-the-ASP-NET-Core-pipeline" class="headerlink" title="Register ASOS or OpenIddict in the ASP.NET Core pipeline"></a>Register ASOS or OpenIddict in the ASP.NET Core pipeline</h2><p>The handler registration part slightly differs depending on whether you&#39;re using ASOS or OpenIddict, but in both cases <strong>you&#39;ll have the JWT bearer handler and register it as the default scheme</strong> in the ASP.NET Core 2.0 authentication options:</p><h4 id="ASOS-1"><a href="#ASOS-1" class="headerlink" title="ASOS"></a>ASOS</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddJwtBearer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Note: make sure you're replacing this URL</span></div><div class="line">            <span class="comment">// by the absolute URL of your application.</span></div><div class="line">            options.Authority = <span class="string">"http://localhost:10444/"</span>;</div><div class="line">            options.Audience = <span class="string">"resource-server"</span>;</div><div class="line">            options.RequireHttpsMetadata = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            options.SecurityTokenValidators.Clear();</div><div class="line">            options.SecurityTokenValidators.Add(<span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                InboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddOpenIdConnectServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.AllowInsecureHttp = <span class="literal">true</span>;</div><div class="line">            options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Register the HSM signing key.</span></div><div class="line">            options.SigningCredentials.AddKey(KeyVaultHelper.GetSigningKey());</div><div class="line"></div><div class="line">            options.AccessTokenHandler = <span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                OutboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            options.Provider.OnValidateTokenRequest = context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> (!context.Request.IsPasswordGrantType())</div><div class="line">                &#123;</div><div class="line">                    context.Reject(</div><div class="line">                        error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">                        description: <span class="string">"The specified grant type is not supported."</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                context.Skip();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            options.Provider.OnHandleTokenRequest = context =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Note: SkipHandler() is used to force ASOS to invoke MVC</span></div><div class="line">                <span class="comment">// so that token requests can be handled in a MVC controller.</span></div><div class="line">                context.SkipHandler();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> Task.CompletedTask;</div><div class="line">            &#125;;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line"></div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="OpenIddict-1"><a href="#OpenIddict-1" class="headerlink" title="OpenIddict"></a>OpenIddict</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        .AddJwtBearer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Note: make sure you're replacing this URL</span></div><div class="line">            <span class="comment">// by the absolute URL of your application.</span></div><div class="line">            options.Authority = <span class="string">"http://localhost:30940/"</span>;</div><div class="line">            options.Audience = <span class="string">"resource-server"</span>;</div><div class="line">            options.RequireHttpsMetadata = <span class="literal">false</span>;</div><div class="line"></div><div class="line">            options.SecurityTokenValidators.Clear();</div><div class="line">            options.SecurityTokenValidators.Add(<span class="keyword">new</span> JwtSecurityTokenHandler</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Disable the built-in JWT claims mapping feature.</span></div><div class="line">                InboundClaimTypeMap = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.UseInMemoryDatabase(<span class="keyword">nameof</span>(DbContext));</div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.AddEntityFrameworkCoreStores&lt;DbContext&gt;();</div><div class="line"></div><div class="line">            options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line">            options.AllowPasswordFlow();</div><div class="line">            options.DisableHttpsRequirement();</div><div class="line">            options.UseJsonWebTokens();</div><div class="line"></div><div class="line">            <span class="comment">// Register the HSM signing key.</span></div><div class="line">            options.AddSigningKey(KeyVaultHelper.GetSigningKey());</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddMvc();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseDeveloperExceptionPage();</div><div class="line"></div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Test-your-application"><a href="#Test-your-application" class="headerlink" title="Test your application"></a>Test your application</h2><h3 id="Retrieve-a-JWT-access-token-signed-by-Azure-Key-Vault"><a href="#Retrieve-a-JWT-access-token-signed-by-Azure-Key-Vault" class="headerlink" title="Retrieve a JWT access token signed by Azure Key Vault"></a>Retrieve a JWT access token signed by Azure Key Vault</h3><p>To retrieve an access token, send a <code>POST</code> request to <code>/connect/token</code> with the <code>grant_type=password</code> parameter and the user credentials:</p><img src="/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/token-request.png" alt="token-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:10444</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;username=alice%40wonderland.com&amp;password=P%40ssw0rd</span></div></pre></td></tr></table></figure><p>If the credentials are valid, you&#39;ll get a JSON response containing the access token:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"resource"</span>: <span class="string">"resource-server"</span>,</div><div class="line">  <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>,</div><div class="line">  <span class="string">"access_token"</span>: <span class="string">"eyJhbGciOiJSUzI1NiIsImtpZCI6IjlIU1FUVFlRVENQV1NQWlFVNVo2V0pfSU9MUi1CNU1VR1daVE9MRkEiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJBbGljZSIsInRva2VuX3VzYWdlIjoiYWNjZXNzX3Rva2VuIiwianRpIjoiMDBkNDI1OTktMDVjMi00YmU1LTgyZGQtZmYzZjM4NmU1NjE0IiwiYXVkIjoicmVzb3VyY2Utc2VydmVyIiwibmJmIjoxNTAyODAzOTc0LCJleHAiOjE1MDI4MDc1NzQsImlhdCI6MTUwMjgwMzk3NCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDk0MC8ifQ.H5scgtaqe3V_p-ibC2HzxUCForYlm5kuPP1wJKEdL-I44BVmPxCCF8s0r4SciLVv-hGpATIFK9eiuex0jkgLMDJ40vLVnUMOUkeUcqrBrIHkIrf-s7kenpuPA3Xljnd-IS6ParF-nsSs_8t8vxIKWPM0wcpEQo8NKLkp6ptc-s6D3PwIXogY3WiFq3iKIVxRZF-L-RdfKHWSWKlKk3ZyT9Plf9OoMpvNejULynIfa51_ZQEgBR5LyTxUK-XIxRL_gz2fLadmZQX8nHs4Z4DvIKw7KQTbf_t1NOtsLekudmMaJSEheAVdBqy_-AQtdL_Xo6fO3UQn_Hmd96FUUaSo9A"</span>,</div><div class="line">  <span class="string">"expires_in"</span>: <span class="number">3600</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Send-an-API-request-to-your-test-controller"><a href="#Send-an-API-request-to-your-test-controller" class="headerlink" title="Send an API request to your test controller"></a>Send an API request to your test controller</h3><p>To send an authenticated request, simply attach the bearer token to the <code>Authorization</code> header using the following syntax: <code>Authorization: Bearer [your bearer token]</code> (without the square brackets)</p><img src="/2017/08/15/using-azure-key-vault-with-asos-and-openiddict/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/test</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:10444</div><div class="line"><span class="attribute">Authorization</span>: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjlIU1FUVFlRVENQV1NQWlFVNVo2V0pfSU9MUi1CNU1VR1daVE9MRkEiLCJ0eXAiOiJKV1QifQ.eyJzdWIiOiJBbGljZSIsInRva2VuX3VzYWdlIjoiYWNjZXNzX3Rva2VuIiwianRpIjoiMDBkNDI1OTktMDVjMi00YmU1LTgyZGQtZmYzZjM4NmU1NjE0IiwiYXVkIjoicmVzb3VyY2Utc2VydmVyIiwibmJmIjoxNTAyODAzOTc0LCJleHAiOjE1MDI4MDc1NzQsImlhdCI6MTUwMjgwMzk3NCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDozMDk0MC8ifQ.H5scgtaqe3V_p-ibC2HzxUCForYlm5kuPP1wJKEdL-I44BVmPxCCF8s0r4SciLVv-hGpATIFK9eiuex0jkgLMDJ40vLVnUMOUkeUcqrBrIHkIrf-s7kenpuPA3Xljnd-IS6ParF-nsSs_8t8vxIKWPM0wcpEQo8NKLkp6ptc-s6D3PwIXogY3WiFq3iKIVxRZF-L-RdfKHWSWKlKk3ZyT9Plf9OoMpvNejULynIfa51_ZQEgBR5LyTxUK-XIxRL_gz2fLadmZQX8nHs4Z4DvIKw7KQTbf_t1NOtsLekudmMaJSEheAVdBqy_-AQtdL_Xo6fO3UQn_Hmd96FUUaSo9A</div></pre></td></tr></table></figure><p>If the access token is valid, you&#39;ll get the user identifier as returned by the API:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Alice</div></pre></td></tr></table></figure><div class="note tip"><p>To confirm that the access token is correctly signed by the HSM key, you can use Application Insights&#39; dependencies tab (you should see an HTTP POST request pointing to <code>https://{vault URL}/keys/{key name}/{key version}/sign?api-version=2016-10-01</code>).</p></div><p>Got a question? Don&#39;t hesitate to post a comment!</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how you can use Azure Key Vault to sign JWT tokens issued by ASOS and OpenIddict.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="azure" scheme="https://kevinchalet.com/tags/azure/"/>
    
  </entry>
  
  <entry>
    <title>AspNet.Security.OpenIdConnect.Server 1.0.1 is out</title>
    <link href="https://kevinchalet.com/2017/08/04/aspnet-security-openidconnect-server-1-0-1-is-out/"/>
    <id>https://kevinchalet.com/2017/08/04/aspnet-security-openidconnect-server-1-0-1-is-out/</id>
    <published>2017-08-04T18:00:00.000Z</published>
    <updated>2017-08-04T17:57:53.329Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, <strong>a patch release for the OpenID Connect server middleware (aka ASOS) was pushed</strong> to <a href="https://www.nuget.org/packages/AspNet.Security.OpenIdConnect.Server/" target="_blank" rel="external">NuGet.org</a>.</p><p>Here&#39;s the changelog:</p><ul><li>The <code>MatchEndpointContext.Options</code> property that had been accidentally removed in 1.0.0 has been reintroduced in 1.0.1 (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/f17d9a4d0f747dd65de83a4ff898e68b37c9d34d" target="_blank" rel="external">f17d9a4</a>).</li><li>An exception is now automatically thrown at startup when registering a signing certificate that is no longer or not yet valid (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/583be00898f09ff3a4ca8d7540e8d963fe56b8fd" target="_blank" rel="external">583be00</a>).</li><li>Internal code relying on <code>JwtSecurityTokenHandler.CreateToken()</code>/<code>WriteToken()</code> has been updated to use <code>JwtSecurityTokenHandler.CreateEncodedJwt()</code> to ensure JWT tokens are not signed twice (<a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/commit/a499f11cc5dceaf74c60d111c7c4268452cd8ddd" target="_blank" rel="external">a499f11</a>).</li></ul><p>To migrate to the <code>1.0.1</code> packages, update your <code>project.json</code>/<code>.csproj</code> project file(s) manually or run the following command in the <a href="https://docs.nuget.org/docs/start-here/using-the-package-manager-console" target="_blank" rel="external">Package Manager Console</a>:</p><h4 id="ASP-NET-Core-1-x-version"><a href="#ASP-NET-Core-1-x-version" class="headerlink" title="ASP.NET Core 1.x version"></a>ASP.NET Core 1.x version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Update-Package AspNet.Security.OpenIdConnect.Server -Version 1.0.1</div></pre></td></tr></table></figure><h4 id="OWIN-Katana-3-x-version"><a href="#OWIN-Katana-3-x-version" class="headerlink" title="OWIN/Katana 3.x version"></a>OWIN/Katana 3.x version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Update-Package Owin.Security.OpenIdConnect.Server -Version 1.0.1</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      In this post, learn more about the 1.0.1 release of the OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>AspNet.Security.OpenIdConnect.Server 1.0.0 general availability</title>
    <link href="https://kevinchalet.com/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/"/>
    <id>https://kevinchalet.com/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/</id>
    <published>2017-05-08T19:00:00.000Z</published>
    <updated>2017-05-08T18:55:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>Today is a great day for me, as I just uploaded the ASOS 1.0.0 packages to NuGet.org, concluding a 3-year work on this library. <strong>A huge thanks to everyone – clients, sponsors, contributors, users – who helped me make this possible: ASOS wouldn&#39;t exist without your support!</strong></p><img src="/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/thanks.gif" alt="thanks.gif"><h2 id="Migrating-to-1-0-0"><a href="#Migrating-to-1-0-0" class="headerlink" title="Migrating to 1.0.0"></a>Migrating to 1.0.0</h2><p>Migrating from <a href="/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/" title="ASOS RC1">ASOS RC1</a> to RTM should be rather smooth as no major change was adopted in this release, but there&#39;s an important requirement you must comply with to ensure your application still works correctly after the migration: <strong>you must also update the validation/introspection middleware to the 1.0.0 RTM version</strong> (the previous beta versions won&#39;t deliberately work):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OAuth.Introspection"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OAuth.Validation"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenIdConnect.Server"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><div class="note warn"><p>If you use recent OpenIddict packages (that use ASOS 1.0.0) or if you explicitly downloaded <code>AspNet.Security.OpenIdConnect.Server</code> or <code>AspNet.Security.OAuth.Introspection</code> 1.0.0 from the aspnet-contrib MyGet feed, consider clearing your NuGet packages folder, <strong>as the bits published on NuGet.org slightly differ from the packages initially published on MyGet.org</strong> (e.g the ASOS package uploaded to NuGet.org offers ECDSA support when running on .NET Framework 4.7).</p><p>For that, close your VS instances, go to <code>C:\Users\[username]\.nuget\packages</code> (on Windows) or <code>~/.nuget/packages</code> (on macOS) and remove the following folders:</p><p><img src="/2017/05/08/aspnet-security-openidconnect-server-1-0-0-general-availability/aspnet-contrib-packages.png" alt="aspnet-contrib-packages.png"></p><p>Then, re-open VS and restore your projects or run <code>dotnet restore</code> to download the latest binaries from NuGet.org.</p></div><h2 id="Support-lifecycle"><a href="#Support-lifecycle" class="headerlink" title="Support lifecycle"></a>Support lifecycle</h2><p>No software can reasonably ship without a solid support lifecycle and ASOS is no exception. To keep things simple, I&#39;ve decided to adopt the same <a href="https://www.microsoft.com/net/core/support" target="_blank" rel="external">support policy as the one used by Microsoft for the .NET Core platform</a>, which means <strong>the aspnet-contrib 1.0.0 RTM packages will get critical fixes and security patches until at least July of 2018</strong>.</p><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>The next big step is to port ASOS to the <a href="https://github.com/aspnet/Security/issues/1179" target="_blank" rel="external">new ASP.NET Core 2.0 authentication stack I helped redesign</a>, as <strong>the 1.0 ASOS bits won&#39;t work at all due to the massive breaking changes adopted in 2.0</strong> (e.g authentication handlers are now registered in the DI container and a unique authentication middleware handles everything at the pipeline level, in <code>Startup.Configure(IApplicationBuilder app)</code>.</p>]]></content>
    
    <summary type="html">
    
      In this post, learn more about the 1.0.0 RTM release of the OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Migrating to AspNet.Security.OpenIdConnect.Server RC1</title>
    <link href="https://kevinchalet.com/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/"/>
    <id>https://kevinchalet.com/2017/03/14/migrating-to-aspnet-security-openidconnect-server-rc1/</id>
    <published>2017-03-13T23:00:00.000Z</published>
    <updated>2017-03-13T22:59:42.237Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, I released the RC1 version of the OpenID Connect server middleware, alongside <a href="https://www.nuget.org/profiles/aspnet-contrib" target="_blank" rel="external">the other aspnet-contrib packages</a>.</p><p>This version – the latest before RTM – includes a few design changes that will directly impact your own code:</p><h2 id="The-built-in-claims-mapping-feature-was-removed"><a href="#The-built-in-claims-mapping-feature-was-removed" class="headerlink" title="The built-in claims mapping feature was removed"></a>The built-in claims mapping feature was removed</h2><p>Starting with RC1, <strong>ASOS no longer includes a built-in claims mapping feature</strong>, which means claims like <code>ClaimTypes.NameIdentifier</code>, <code>ClaimTypes.Name</code> or <code>ClaimTypes.Role</code> are no longer mapped to their OpenID Connect/JWT equivalents (<code>sub</code>, <code>name</code>, <code>role</code>).</p><p>Concretely, if you have code like that in your authorization provider class, you should update it to use the OpenID Connect claims instead of the legacy claims exposed by the static <code>ClaimTypes</code> class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.NameIdentifier, <span class="string">"[unique identifier]"</span>);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.Name, <span class="string">"Bob"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line">identity.AddClaim(ClaimTypes.Role, <span class="string">"Administrator"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Configure ClaimsIdentity to use the OpenID Connect claims instead of</span></div><div class="line"><span class="comment">// the legacy ClaimTypes claims to populate the ClaimsIdentity.Name property</span></div><div class="line"><span class="comment">// and determine how roles are resolved when calling ClaimsPrincipal.IsInRole(...).</span></div><div class="line"><span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme,</div><div class="line">    OpenIdConnectConstants.Claims.Name,</div><div class="line">    OpenIdConnectConstants.Claims.Role);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="string">"[unique identifier]"</span>);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Name, <span class="string">"Bob"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line">identity.AddClaim(OpenIdConnectConstants.Claims.Role, <span class="string">"Administrator"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div></pre></td></tr></table></figure><div class="note tip"><p>You&#39;re actually free to keep using the <code>ClaimTypes</code> claims, but the OpenID Connect server middleware will throw an exception if you don&#39;t (at least) add the <code>sub</code> claim:</p><p><code>InvalidOperationException: The authentication ticket was rejected because it doesn&#39;t contain the mandatory subject claim.</code></p></div><p>If you use the JWT bearer middleware, you&#39;ll also want to disable its own claims mapping feature and update the token validation parameters to use the dedicated JWT name/role claims:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();</div><div class="line">JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap.Clear();</div><div class="line"></div><div class="line">app.UseJwtBearerAuthentication(<span class="keyword">new</span> JwtBearerOptions</div><div class="line">&#123;</div><div class="line">    Authority = <span class="string">"http://localhost:58795/"</span>,</div><div class="line">    Audience = <span class="string">"resource_server"</span>,</div><div class="line">    RequireHttpsMetadata = <span class="literal">false</span>,</div><div class="line">    TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters</div><div class="line">    &#123;</div><div class="line">        NameClaimType = OpenIdConnectConstants.Claims.Name,</div><div class="line">        RoleClaimType = OpenIdConnectConstants.Claims.Role</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="The-introspection-middleware-now-uses-name-and-role-as-the-default-claim-types"><a href="#The-introspection-middleware-now-uses-name-and-role-as-the-default-claim-types" class="headerlink" title="The introspection middleware now uses name and role as the default claim types"></a>The introspection middleware now uses <code>name</code> and <code>role</code> as the default claim types</h2><p>In the same vein, the introspection middleware was updated to use <code>name</code> and <code>role</code> as the default claim types (instead of <code>ClaimTypes.Name</code> and <code>ClaimTypes.Role</code>):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.UseOAuthIntrospection(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Authority = <span class="keyword">new</span> Uri(<span class="string">"https://openid.yourapp.com/"</span>);</div><div class="line">    options.Audiences.Add(<span class="string">"resource_server"</span>);</div><div class="line">    options.ClientId = <span class="string">"resource_server"</span>;</div><div class="line">    options.ClientSecret = <span class="string">"875sqd4s5d748z78z7ds1ff8zz8814ff88ed8ea4z4zzd"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Override the default claim types used by the introspection middleware:</span></div><div class="line">    options.NameClaimType = <span class="string">"custom_name_claim"</span>;</div><div class="line">    options.RoleClaimType = <span class="string">"custom_role_claim"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="The-token-format-was-improved"><a href="#The-token-format-was-improved" class="headerlink" title="The token format was improved"></a>The token format was improved</h2><p>To <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/315" target="_blank" rel="external">support multi-valued authentication properties containing spaces</a>, we had to tweak the token format to store these complex properties as JSON strings.</p><p>Unfortunately, <strong>this change makes old authorization codes, access and refresh tokens incompatible with the new format (and vice versa)</strong>. In practice, this means that you can&#39;t use tokens issued by ASOS RC1 with old versions of the validation middleware (or with the OpenID Connect server middleware itself): such tokens will be automatically rejected.</p><div class="note tip"><p>To make sure everything runs smoothly, migrate to the latest version of the validation middleware (<code>1.0.0-beta1-final</code>).</p></div><h2 id="Registering-a-signing-key-is-no-longer-required-when-using-the-default-access-token-format"><a href="#Registering-a-signing-key-is-no-longer-required-when-using-the-default-access-token-format" class="headerlink" title="Registering a signing key is no longer required when using the default access token format"></a>Registering a signing key is no longer required when using the default access token format</h2><p>Starting with RC1, ASOS now includes a &quot;degraded mode&quot; that allows you to use it without registering a signing key or a signing certificate (ephemeral or not) if you don&#39;t opt for JWT access tokens and don&#39;t use the implicit or hybrid flows.</p><p>Concretely, using <code>AddEphemeralKey()</code> or <code>AddCertificate()</code> is no longer mandatory if you use non-interactive flows like password or client credentials <strong>AND</strong> the default access token format.</p><p>And voilà, that&#39;s all. For the complete changelist, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues?q=milestone%3A1.0.0-rc1%20" target="_blank" rel="external">feel free to take a look at the GitHub issues page</a>.</p><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>No new release candidate is currently planned, which means the next version will be the RTM package.</p><p>The next (and last) step is to <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/324" target="_blank" rel="external">rework the XML documentation</a>. Depending on how well this work item goes, the RTM bits should be published at the end of the month or in April. If you&#39;re willing to contribute to this stask, don&#39;t hesitate to ping me.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to migrate to the latest OpenID Connect server middleware package
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Implementing simple token authentication in ASP.NET Core with OpenIddict</title>
    <link href="https://kevinchalet.com/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/"/>
    <id>https://kevinchalet.com/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/</id>
    <published>2017-01-30T18:00:00.000Z</published>
    <updated>2018-06-25T16:12:48.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Last year, <a href="https://github.com/mjrousos" target="_blank" rel="external">Mike Rousos</a> posted <a href="https://blogs.msdn.microsoft.com/webdev/2016/10/27/bearer-token-authentication-in-asp-net-core/" target="_blank" rel="external">a great post</a> about token authentication on the .NET blog and demonstrated how you could leverage ASP.NET Core Identity and OpenIddict to create your own tokens in a completely standard way.</p><p>Since then, many people emailed me to know if using ASP.NET Core Identity was really mandatory. Good news! While the first OpenIddict alpha bits were tied to Identity, the two have been completely decoupled as part of OpenIddict <code>beta1</code> and <code>beta2</code>. Concretely, this means <strong>you can now use OpenIddict with your own authentication method</strong> or your own membership stack.</p><hr><h2 id="Get-started"><a href="#Get-started" class="headerlink" title="Get started"></a>Get started</h2><div class="note info"><p>This post was updated to include code snippets demonstrating how to register OpenIddict in an ASP.NET Core 2.x application. <strong>When using OpenIddict in an ASP.NET Core 2.x application, make sure you&#39;re referencing the OpenIddict 2.x packages</strong>.</p></div><hr><h3 id="Update-your-csproj-file-to-reference-the-OpenIddict-packages"><a href="#Update-your-csproj-file-to-reference-the-OpenIddict-packages" class="headerlink" title="Update your .csproj file to reference the OpenIddict packages"></a>Update your <code>.csproj</code> file to reference the OpenIddict packages</h3><p>For this demo, you&#39;ll need to reference 2 packages:</p><ul><li><code>OpenIddict</code>, that references the core services, the token server and the validation services.</li><li><code>OpenIddict.EntityFrameworkCore</code>, that contains the Entity Framework Core stores.</li></ul><h4 id="ASP-NET-Core-1-x"><a href="#ASP-NET-Core-1-x" class="headerlink" title="ASP.NET Core 1.x"></a>ASP.NET Core 1.x</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"1.0.0-*"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="ASP-NET-Core-2-x"><a href="#ASP-NET-Core-2-x" class="headerlink" title="ASP.NET Core 2.x"></a>ASP.NET Core 2.x</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"OpenIddict.EntityFrameworkCore"</span> <span class="attr">Version</span>=<span class="string">"2.0.0-*"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><hr><h3 id="Register-the-OpenIddict-services-in-the-DI-container-and-the-ASP-NET-Core-pipeline"><a href="#Register-the-OpenIddict-services-in-the-DI-container-and-the-ASP-NET-Core-pipeline" class="headerlink" title="Register the OpenIddict services in the DI container and the ASP.NET Core pipeline"></a>Register the OpenIddict services in the DI container and the ASP.NET Core pipeline</h3><h4 id="ASP-NET-Core-1-x-1"><a href="#ASP-NET-Core-1-x-1" class="headerlink" title="ASP.NET Core 1.x"></a>ASP.NET Core 1.x</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddMvc();</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Configure the context to use an in-memory store.</span></div><div class="line">            options.UseInMemoryDatabase();</div><div class="line"></div><div class="line">            <span class="comment">// Register the entity sets needed by OpenIddict.</span></div><div class="line">            <span class="comment">// Note: use the generic overload if you need</span></div><div class="line">            <span class="comment">// to replace the default OpenIddict entities.</span></div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict()</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">            .AddCore(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Configure OpenIddict to use the EF Core stores/models.</span></div><div class="line">                options.UseEntityFrameworkCore()</div><div class="line">                       .UseDbContext&lt;DbContext&gt;();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">            .AddServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Register the ASP.NET Core MVC services used by OpenIddict.</span></div><div class="line">                <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">                <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">                options.UseMvc();</div><div class="line"></div><div class="line">                <span class="comment">// Enable the token endpoint.</span></div><div class="line">                options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// Enable the password flow.</span></div><div class="line">                options.AllowPasswordFlow();</div><div class="line"></div><div class="line">                <span class="comment">// Accept anonymous clients (i.e clients that don't send a client_id).</span></div><div class="line">                options.AcceptAnonymousClients();</div><div class="line"></div><div class="line">                <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">                options.DisableHttpsRequirement();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">            <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">            <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">            <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">            .AddValidation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Register the OpenIddict token validation middleware.</span></div><div class="line">        app.UseOpenIddictValidation();</div><div class="line"></div><div class="line">        <span class="comment">// Register the OpenIddict server middleware.</span></div><div class="line">        app.UseOpenIddictServer();</div><div class="line"></div><div class="line">        app.UseMvcWithDefaultRoute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note info"><p>Make sure to <strong>always register the validation middleware very early in your pipeline</strong>: if the validation middleware is not at the right place, requests won&#39;t be correctly authenticated when reaching the next middleware (e.g MVC).</p><p>The same remark applies to OpenIddict, that must be inserted before MVC to validate token requests before they reach your own code. If you don&#39;t register it correctly, an exception will be thrown at runtime.</p></div><h4 id="ASP-NET-Core-2-x-1"><a href="#ASP-NET-Core-2-x-1" class="headerlink" title="ASP.NET Core 2.x"></a>ASP.NET Core 2.x</h4><figure class="highlight csharp"><figcaption><span>Startup.cs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddMvc();</div><div class="line"></div><div class="line">        services.AddDbContext&lt;DbContext&gt;(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Configure the context to use an in-memory store.</span></div><div class="line">            options.UseInMemoryDatabase(<span class="keyword">nameof</span>(DbContext));</div><div class="line"></div><div class="line">            <span class="comment">// Register the entity sets needed by OpenIddict.</span></div><div class="line">            <span class="comment">// Note: use the generic overload if you need</span></div><div class="line">            <span class="comment">// to replace the default OpenIddict entities.</span></div><div class="line">            options.UseOpenIddict();</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        services.AddOpenIddict()</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict core services.</span></div><div class="line">            .AddCore(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Configure OpenIddict to use the EF Core stores/models.</span></div><div class="line">                options.UseEntityFrameworkCore()</div><div class="line">                       .UseDbContext&lt;DbContext&gt;();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict server handler.</span></div><div class="line">            .AddServer(options =&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Register the ASP.NET Core MVC services used by OpenIddict.</span></div><div class="line">                <span class="comment">// Note: if you don't call this method, you won't be able to</span></div><div class="line">                <span class="comment">// bind OpenIdConnectRequest or OpenIdConnectResponse parameters.</span></div><div class="line">                options.UseMvc();</div><div class="line"></div><div class="line">                <span class="comment">// Enable the token endpoint.</span></div><div class="line">                options.EnableTokenEndpoint(<span class="string">"/connect/token"</span>);</div><div class="line"></div><div class="line">                <span class="comment">// Enable the password flow.</span></div><div class="line">                options.AllowPasswordFlow();</div><div class="line"></div><div class="line">                <span class="comment">// Accept anonymous clients (i.e clients that don't send a client_id).</span></div><div class="line">                options.AcceptAnonymousClients();</div><div class="line"></div><div class="line">                <span class="comment">// During development, you can disable the HTTPS requirement.</span></div><div class="line">                options.DisableHttpsRequirement();</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            <span class="comment">// Register the OpenIddict validation handler.</span></div><div class="line">            <span class="comment">// Note: the OpenIddict validation handler is only compatible with the</span></div><div class="line">            <span class="comment">// default token format or with reference tokens and cannot be used with</span></div><div class="line">            <span class="comment">// JWT tokens. For JWT tokens, use the Microsoft JWT bearer handler.</span></div><div class="line">            .AddValidation();</div><div class="line"></div><div class="line">        services.AddAuthentication(options =&gt;</div><div class="line">        &#123;</div><div class="line">            options.DefaultScheme = OpenIddictValidationDefaults.AuthenticationScheme;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        app.UseAuthentication();</div><div class="line"></div><div class="line">        app.UseMvcWithDefaultRoute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Create-your-own-token-authentication-controller"><a href="#Create-your-own-token-authentication-controller" class="headerlink" title="Create your own token authentication controller"></a>Create your own token authentication controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizationController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpPost(<span class="string">"~/connect/token"</span>), Produces(<span class="string">"application/json"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Exchange</span>(<span class="params">OpenIdConnectRequest request</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (request.IsPasswordGrantType())</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Validate the user credentials.</span></div><div class="line"></div><div class="line">            <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider</span></div><div class="line">            <span class="comment">// applying a key derivation function like PBKDF2 to slow down</span></div><div class="line">            <span class="comment">// the password validation process. You SHOULD also consider</span></div><div class="line">            <span class="comment">// using a time-constant comparer to prevent timing attacks.</span></div><div class="line">            <span class="keyword">if</span> (request.Username != <span class="string">"alice@wonderland.com"</span> ||</div><div class="line">                request.Password != <span class="string">"P@ssw0rd"</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> Forbid(OpenIddictServerDefaults.AuthenticationScheme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Create a new ClaimsIdentity holding the user identity.</span></div><div class="line">            <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(</div><div class="line">                OpenIddictServerDefaults.AuthenticationScheme,</div><div class="line">                OpenIdConnectConstants.Claims.Name,</div><div class="line">                OpenIdConnectConstants.Claims.Role);</div><div class="line"></div><div class="line">            <span class="comment">// Add a "sub" claim containing the user identifier, and attach</span></div><div class="line">            <span class="comment">// the "access_token" destination to allow OpenIddict to store it</span></div><div class="line">            <span class="comment">// in the access token, so it can be retrieved from your controllers.</span></div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Subject,</div><div class="line">                <span class="string">"71346D62-9BA5-4B6D-9ECA-755574D628D8"</span>,</div><div class="line">                OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">            identity.AddClaim(OpenIdConnectConstants.Claims.Name, <span class="string">"Alice"</span>,</div><div class="line">                OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">            <span class="comment">// ... add other claims, if necessary.</span></div><div class="line"></div><div class="line">            <span class="keyword">var</span> principal = <span class="keyword">new</span> ClaimsPrincipal(identity);</div><div class="line"></div><div class="line">            <span class="comment">// Ask OpenIddict to generate a new token and return an OAuth2 token response.</span></div><div class="line">            <span class="keyword">return</span> SignIn(principal, OpenIddictServerDefaults.AuthenticationScheme);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"The specified grant type is not supported."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Create-an-API-controller"><a href="#Create-an-API-controller" class="headerlink" title="Create an API controller"></a>Create an API controller</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [Authorize, HttpGet(<span class="string">"~/api/test"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetMessage</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Json(<span class="keyword">new</span></div><div class="line">        &#123;</div><div class="line">            Subject = User.GetClaim(OpenIdConnectConstants.Claims.Subject),</div><div class="line">            Name = User.Identity.Name</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Test-your-ASP-NET-Core-application"><a href="#Test-your-ASP-NET-Core-application" class="headerlink" title="Test your ASP.NET Core application"></a>Test your ASP.NET Core application</h2><h3 id="Retrieve-an-access-token-from-your-authentication-controller"><a href="#Retrieve-an-access-token-from-your-authentication-controller" class="headerlink" title="Retrieve an access token from your authentication controller"></a>Retrieve an access token from your authentication controller</h3><p>To retrieve an access token, send a <code>POST</code> request to <code>/connect/token</code> with the <code>grant_type=password</code> parameter and the user credentials:</p><img src="/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/token-request.png" alt="token-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:7096</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;username=alice%40wonderland.com&amp;password=P%40ssw0rd</span></div></pre></td></tr></table></figure><p>If the credentials are valid, you&#39;ll get a JSON response containing the access token:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"token_type"</span>: <span class="string">"Bearer"</span>,</div><div class="line">  <span class="string">"access_token"</span>: <span class="string">"CfDJ8Ec0ZpniaHhGg0e0UUvOH9BWZSGrPoEwGd0_Lq2cse-T29YOq985IBiT5fEe5tTSgY1vxq2Z2ZJ7Ikwlpmh0Lrc4x9pqhqHBziUzsP_rkGZkn47TkNkOkzKCwZJZK5x-irH3HROwClFFTq0rgWdb8rZ2xriffNzsby4VwhxhN5soFD435KzmVYkdv-VuaLYo3QiSuexbRi2USVO9LK30vomAG6h2SAxZ7R-jYsXgf0f5gAmdYxg7w3yicv9v8DpUSBiGGRRfymTOnvGEsFJjGuuP8OlY5qzMs6wGaRWkOvCyV2CK_RZF_3TMs7LYCdMQ-dqWY5A03-03OmP8blKzlrKJMDZfrPQHuysbS931xxy8b3kjicfjNLmMHqzQzbUO4fecm4kY8PFnKozojDtqajfTp2bYhxS65bmVYROrswYeUWEKYR6LSdS1K__IDaLoMlLa-Wf6x1wjM2CchzgqbHRF0KEtdL5Ks88dAS44mp9BM6iUOEWyL7VkbazsBdlNciM5ZZB1_6qunufDW_tcaR8"</span>,</div><div class="line">  <span class="string">"expires_in"</span>: <span class="number">3600</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Query-your-API-controller-using-a-bearer-token"><a href="#Query-your-API-controller-using-a-bearer-token" class="headerlink" title="Query your API controller using a bearer token"></a>Query your API controller using a bearer token</h3><p>To send an authenticated request, simply attach the bearer token to the <code>Authorization</code> header using the following syntax: <code>Authorization: Bearer [your bearer token]</code> (without the square brackets)</p><img src="/2017/01/30/implementing-simple-token-authentication-in-aspnet-core-with-openiddict/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/api/test</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:7096</div><div class="line"><span class="attribute">Authorization</span>: Bearer CfDJ8Ec0ZpniaHhGg0e0UUvOH9BWZSGrPoEwGd0_Lq2cse-T29YOq985IBiT5fEe5tTSgY1vxq2Z2ZJ7Ikwlpmh0Lrc4x9pqhqHBziUzsP_rkGZkn47TkNkOkzKCwZJZK5x-irH3HROwClFFTq0rgWdb8rZ2xriffNzsby4VwhxhN5soFD435KzmVYkdv-VuaLYo3QiSuexbRi2USVO9LK30vomAG6h2SAxZ7R-jYsXgf0f5gAmdYxg7w3yicv9v8DpUSBiGGRRfymTOnvGEsFJjGuuP8OlY5qzMs6wGaRWkOvCyV2CK_RZF_3TMs7LYCdMQ-dqWY5A03-03OmP8blKzlrKJMDZfrPQHuysbS931xxy8b3kjicfjNLmMHqzQzbUO4fecm4kY8PFnKozojDtqajfTp2bYhxS65bmVYROrswYeUWEKYR6LSdS1K__IDaLoMlLa-Wf6x1wjM2CchzgqbHRF0KEtdL5Ks88dAS44mp9BM6iUOEWyL7VkbazsBdlNciM5ZZB1_6qunufDW_tcaR8</div></pre></td></tr></table></figure><p>If the access token is valid, you&#39;ll get a JSON payload containing the user details returned by the API:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"subject"</span>: <span class="string">"71346D62-9BA5-4B6D-9ECA-755574D628D8"</span>,</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Alice"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>And voilà, that&#39;s done.</p><p>Got a question? Feel free to post a comment or open a new thread <a href="https://stackoverflow.com/questions/tagged/openiddict" target="_blank" rel="external">on StackOverflow</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to add token authentication with OpenIddict by implementing the OAuth2 password flow.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="openiddict" scheme="https://kevinchalet.com/tags/openiddict/"/>
    
  </entry>
  
  <entry>
    <title>The new aspnet-contrib packages are out</title>
    <link href="https://kevinchalet.com/2016/11/30/the-new-aspnet-contrib-packages-are-out/"/>
    <id>https://kevinchalet.com/2016/11/30/the-new-aspnet-contrib-packages-are-out/</id>
    <published>2016-11-30T20:00:00.000Z</published>
    <updated>2017-03-13T22:41:09.498Z</updated>
    
    <content type="html"><![CDATA[<p>Earlier today, I pushed new packages for all the aspnet-contrib projects. This is the first release since July (and probably one of the most exciting so far).</p><h2 id="What-39-s-new"><a href="#What-39-s-new" class="headerlink" title="What&#39;s new?"></a>What&#39;s new?</h2><h3 id="New-OAuth2-social-providers"><a href="#New-OAuth2-social-providers" class="headerlink" title="New OAuth2 social providers"></a>New OAuth2 social providers</h3><p>Thanks to our amazing contributors, <a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/issues?q=milestone%3A1.0.0-beta2" target="_blank" rel="external">10 new providers have been added in this release</a>:</p><ul><li>Automatic (by <a href="https://github.com/supergibbs" target="_blank" rel="external">Jesse Mandel</a>)</li><li>Cisco Spark (by <a href="https://github.com/robert-shade" target="_blank" rel="external">Robert Shade</a>)</li><li>EVE Online (by <a href="https://github.com/mariozski" target="_blank" rel="external">Mariusz Zieliński</a>)</li><li>MailChimp (by <a href="https://github.com/igorsimovic" target="_blank" rel="external">Igor Simovic</a>)</li><li>MYOB (by <a href="https://github.com/jakkaj" target="_blank" rel="external">Jordan Knight</a>)</li><li>StackExchange (by <a href="https://github.com/andrewlock" target="_blank" rel="external">Andrew Lock</a>)</li><li>Strava (by <a href="https://github.com/jamesholcomb" target="_blank" rel="external">James Holcomb</a>)</li><li>Untapped (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li><li>Visual Studio Online (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li><li>Yammer (by <a href="https://github.com/serber" target="_blank" rel="external">Albert Zakiev</a>)</li></ul><hr><h3 id="New-primitives-for-the-OpenID-Connect-server-middleware"><a href="#New-primitives-for-the-OpenID-Connect-server-middleware" class="headerlink" title="New primitives for the OpenID Connect server middleware"></a>New primitives for the OpenID Connect server middleware</h3><p>Starting with beta7, the OpenID Connect server middleware <strong>(ASOS) no longer relies on IdentityModel&#39;s <code>OpenIdConnectMessage</code></strong>, that proved to be way too limited to represent complex JSON payloads and wasn&#39;t able to preserve non-string parameters types.</p><p>Instead, ASOS now comes with its own primitives: <code>OpenIdConnectMessage</code>, <code>OpenIdConnectRequest</code> and <code>OpenIdConnectResponse</code>. Unlike their IdentityModel equivalent, these types are backed by JSON.NET&#39;s primitives, which means that code like this will now work flawlessly:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> response = <span class="keyword">new</span> OpenIdConnectResponse();</div><div class="line">response[<span class="string">"array_parameter"</span>] = <span class="keyword">new</span> JArray(<span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;);</div><div class="line">response[<span class="string">"object_parameter"</span>] = JObject.FromObject(<span class="keyword">new</span></div><div class="line">&#123;</div><div class="line">    name = <span class="string">"value"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Outputs &#123;"array_parameter":[1,2,3],"object_parameter":&#123;"name":"value"&#125;&#125;</span></div><div class="line">Console.WriteLine(JsonConvert.SerializeObject(response));</div></pre></td></tr></table></figure><p>The other good news is that these primitives are part of a whole new <strong>.NET Standard 1.0</strong> package (<code>AspNet.Security.OpenIdConnect.Primitives</code>) that is shared between the OWIN/Katana and the ASP.NET Core flavors of ASOS, which helps reduce code duplication between the two projects.</p><hr><h3 id="Proof-Key-for-Code-Exchange-PKCE-is-now-supported"><a href="#Proof-Key-for-Code-Exchange-PKCE-is-now-supported" class="headerlink" title="Proof Key for Code Exchange (PKCE) is now supported"></a>Proof Key for Code Exchange (PKCE) is now supported</h3><p>In August, ASOS was updated to support the <a href="https://tools.ietf.org/html/rfc7636" target="_blank" rel="external">Proof Key for Code Exchange specification</a>:</p><blockquote><p>OAuth 2.0 [RFC6749] public clients are susceptible to the authorization code interception attack.</p><p>In this attack, the attacker intercepts the authorization code returned from the authorization endpoint within a communication path not protected by Transport Layer Security (TLS), such as inter-application communication within the client&#39;s operating system.</p><p>Once the attacker has gained access to the authorization code, it can use it to obtain the access token.</p></blockquote><p>This change makes ASOS fully compatible with client libraries supporting PKCE, like <a href="https://openid.github.io/AppAuth-iOS/" target="_blank" rel="external">AppAuth for iOS</a>.</p><a id="more"></a><hr><h3 id="All-ASOS-39-endpoints-are-now-disabled-by-default"><a href="#All-ASOS-39-endpoints-are-now-disabled-by-default" class="headerlink" title="All ASOS&#39; endpoints are now disabled by default"></a>All ASOS&#39; endpoints are now disabled by default</h3><p>To reduce ASOS&#39; attack surface, all its endpoints – except the discovery endpoints – <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/312" target="_blank" rel="external">are now disabled by default</a>. This means that you now have to explicitly assign a path to enable an endpoint:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><div class="note tip"><p>This change makes ASOS consistent with how <code>OAuthAuthorizationServerMiddleware</code> used to work.</p></div><hr><h3 id="The-automatic-RSA-key-generation-feature-was-removed"><a href="#The-automatic-RSA-key-generation-feature-was-removed" class="headerlink" title="The automatic RSA key generation feature was removed"></a>The automatic RSA key generation feature was removed</h3><p>Starting with beta7, <strong>ASOS will no longer generate and register a signing key for you</strong> if you don&#39;t explicitly add one and will throw an exception if no signing credentials have been registered:</p><blockquote><p>At least one signing key must be registered. Consider registering a X.509 certificate or call <code>options.SigningCredentials.AddEphemeralKey()</code> to generate and register an ephemeral signing key.</p></blockquote><p>Though very convenient, <a href="https://github.com/openiddict/openiddict-core/issues/204" target="_blank" rel="external">this feature proved to be unreliable</a> so I&#39;ve decided to remove it and replace it by an opt-in ephemeral key generation extension:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Register a new ephemeral key, that is discarded when the application</span></div><div class="line">    <span class="comment">// shuts down. Tokens signed using this key are automatically invalidated.</span></div><div class="line">    <span class="comment">// This method should only be used during development.</span></div><div class="line">    options.SigningCredentials.AddEphemeralKey();</div><div class="line"></div><div class="line">    <span class="comment">// On production, using a X.509 certificate stored in the machine store is recommended.</span></div><div class="line">    <span class="comment">// You can generate a self-signed certificate using Pluralsight's self-cert utility:</span></div><div class="line">    <span class="comment">// https://s3.amazonaws.com/pluralsight-free/keith-brown/samples/SelfCert.zip</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// options.SigningCredentials.AddCertificate("7D2A741FE34CC2C7369237A5F2078988E17A6A75");</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr><h3 id="ECDSA-signing-keys-support"><a href="#ECDSA-signing-keys-support" class="headerlink" title="ECDSA signing keys support"></a>ECDSA signing keys support</h3><p><strong>When running ASOS on .NET Core</strong>, you can now use ECDSA keys/certificates to sign your identity tokens:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">    options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Register a new ECDSA ephemeral key.</span></div><div class="line">    options.SigningCredentials.AddEphemeralKey(SecurityAlgorithms.EcdsaSha256Signature);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><div class="note info"><p>Though ASOS exposes ECDSA keys via the discovery endpoint, <strong>this feature is not yet supported by the JWT bearer middleware</strong>. You can track the progress <a href="https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/487" target="_blank" rel="external">here</a>.</p></div><hr><h3 id="ASOS-is-now-fully-unit-tested"><a href="#ASOS-is-now-fully-unit-tested" class="headerlink" title="ASOS is now fully unit-tested"></a>ASOS is now fully unit-tested</h3><p>A <strong>huge effort has been made</strong> to add unit tests for all the ASOS primitives and endpoints (1955 tests at the time of writing).</p><hr><h2 id="What-39-s-next"><a href="#What-39-s-next" class="headerlink" title="What&#39;s next?"></a>What&#39;s next?</h2><p>This <strong>release will be the last ASOS beta</strong>, as we&#39;re now done with the important design changes.</p><p>A first release candidate version should be released in March and ASOS should RTM in April.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover the new features offered by the new aspnet-contrib packages released in November 2016.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Using a local OAuth2/OpenID Connect server with WebAuthenticationBroker</title>
    <link href="https://kevinchalet.com/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/"/>
    <id>https://kevinchalet.com/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/</id>
    <published>2016-08-22T14:30:00.000Z</published>
    <updated>2017-02-25T20:29:10.266Z</updated>
    
    <content type="html"><![CDATA[<p>Last week, I received a mail from a client who was desperately trying to use his legacy <code>OAuthAuthorizationServerMiddleware</code>-based server with <code>WebAuthenticationBroker</code>, a WinRT component developed by Microsoft for Windows 8/Windows Phone 8.1 that helps developers deal with authentication servers in a protocol-agnostic manner (it can work with OAuth1, OAuth2, OpenID Connect and even the good old OpenID2).</p><p>To be honest, I&#39;ve never been a huge fan of <code>WebAuthenticationBroker</code>: while I love the fact it executes in a separate <code>AuthHost</code> process managed by the OS (which is great from a security perspective), the fact it relies on <strong>a modal dialog that doesn&#39;t even mention the current URL</strong> to render the authorization page has always been a major issue for me. If your app allows me to log in using my Google account, there&#39;s a high chance I&#39;ll end up aborting the authorization flow if I have no way to ensure your authorization server doesn&#39;t redirect me to a fake Google login page.</p><p>That&#39;s why my initial suggestion was to use <a href="https://github.com/IdentityModel/IdentityModel.OidcClient" target="_blank" rel="external">IdentityModel.OidcClient</a>, a portable OpenID Connect client developed by Dominick Baier (one of the two guys behind IdentityServer), that also works with UWP. <code>OidcClient</code> supports the same web view approach as <code>WebAuthenticationBroker</code> but <strong>it also allows you to manually control</strong> the authorization process (e.g by launching the device browser and pointing it to the authorization endpoint), which is the option recommended by the <a href="https://tools.ietf.org/html/draft-ietf-oauth-native-apps-03#section-8.1" target="_blank" rel="external">OAuth 2.0 for Native Apps draft</a>.</p><div class="note tip"><p>Since <code>WebAuthenticationBroker</code> is not tied to a specific protocol, it&#39;s up to you to handle the last phase: trivial with OAuth2, it can become really complex with more advanced protocols like OpenID Connect, as you must <a href="http://openid.net/specs/openid-connect-core-1_0.html#ImplicitIDTValidation" target="_blank" rel="external">validate the authorization/token response</a>. That&#39;s why using an OIDC-specific library like <code>IdentityModel.OidcClient</code> that handles the protocol details for you is generally a better option if you&#39;re not familiar with the protocol.</p></div><p>Unfortunately, <a href="https://github.com/IdentityModel/IdentityModel.OidcClient/issues/11" target="_blank" rel="external">this library is not compatible with OAuth2-only servers</a> and there&#39;s no plan to change that, so using it was not possible. Migrating the legacy authorization server to an OpenID Connect server like ASOS was also out of the question, so <code>WebAuthenticationBroker</code> was pretty much the only viable option in this case.</p><p>To ensure he was not missing something obvious, my client sent me something similar to this snippet (that I&#39;ve updated to make it more concise and to remove app-specific code):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Retrieve the app-specific redirect_uri. This value must correspond</span></div><div class="line"><span class="comment">// to the redirect_uri registered with your authorization server.</span></div><div class="line"><span class="keyword">var</span> callback = Uri.EscapeDataString(WebAuthenticationBroker.GetCurrentApplicationCallbackUri().AbsoluteUri);</div><div class="line"></div><div class="line"><span class="comment">// Note: the requestUri parameter must be a HTTPS address: an exception</span></div><div class="line"><span class="comment">// will be thrown if an HTTP address is used, even for local testing scenarios.</span></div><div class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> WebAuthenticationBroker.AuthenticateAsync(</div><div class="line">    options: WebAuthenticationOptions.None,</div><div class="line">    requestUri: <span class="keyword">new</span> Uri(<span class="string">"https://localhost:24500/api/Account/ExternalLogin"</span> +</div><div class="line">        <span class="string">$"?client_id=uwp-app&amp;response_type=token&amp;redirect_uri=<span class="subst">&#123;callback&#125;</span>"</span>));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (result.ResponseStatus == WebAuthenticationStatus.Success)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Note: ResponseData contains the redirect URL and the OAuth2 response parameters.</span></div><div class="line">    <span class="comment">// To make the response easier to parse, the redirect_uri part is removed.</span></div><div class="line">    <span class="keyword">var</span> payload = result.ResponseData.Substring(result.ResponseData.IndexOf(<span class="string">'#'</span>) + <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> parameters = (<span class="keyword">from</span> parameter <span class="keyword">in</span> payload.Split(<span class="string">'&amp;'</span>)</div><div class="line">                      <span class="keyword">let</span> pair = parameter.Split(<span class="string">'='</span>)</div><div class="line">                      <span class="keyword">select</span> <span class="keyword">new</span> &#123; Name = pair[<span class="number">0</span>], Value = pair[<span class="number">1</span>] &#125;)</div><div class="line">                      .ToDictionary(element =&gt; element.Name, element =&gt; element.Value);</div><div class="line"></div><div class="line">    <span class="keyword">string</span> error;</div><div class="line">    <span class="comment">// If an "error" parameter has been added by the authorization server, return an exception.</span></div><div class="line">    <span class="comment">// Note: the optional "error_description" can be used to determine why the process failed.</span></div><div class="line">    <span class="keyword">if</span> (parameters.TryGetValue(<span class="string">"error"</span>, <span class="keyword">out</span> error))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"An error occurred during the authorization process."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">string</span> token;</div><div class="line">    <span class="comment">// Ensure an access token has been returned by the authorization server.</span></div><div class="line">    <span class="keyword">if</span> (!parameters.TryGetValue(<span class="string">"access_token"</span>, <span class="keyword">out</span> token))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">"The access token was missing from the OAuth2 response."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Use the access token to query the resource server.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Aside the fact it implements the implicit flow (which is not the most appropriate flow for mobile apps), this snippet should have worked as-is.</p><a id="more"></a><div class="note tip"><p>The cool thing with <code>WebAuthenticationBroker</code> is that the hard parts — embedded web view handling, response interception — are automatically managed for you: simply call <code>AuthenticateAsync</code> and it will open a dedicated web view rendering the login/consent form returned by your authorization server.</p><p>When the authorization process is finalized by the user, the asynchronous <code>Task</code> returned by <code>WebAuthenticationBroker.AuthenticateAsync</code> completes, and you can extract the authorization response from <code>WebAuthenticationResult.ResponseData</code>.</p></div><p>Though the snippet was fine, it didn&#39;t work as expected and the following error was systematically returned instead of the consent form:</p><blockquote><p>We can&#39;t connect to the service you need right now. Check your network connection or try this again later.</p></blockquote><p>So if the code is not the culprit, what could be causing this error?</p><p>There are actually <strong>3 common pitfalls</strong> when using <code>WebAuthenticationBroker</code>:</p><ul><li>The <code>Internet (Client)</code> capability must be added to the package manifest.</li><li>Your authorization server must use a valid and trusted SSL certificate.</li><li>Lookback isolation must be disabled if your authorization server is hosted locally.</li></ul><h2 id="Enable-Internet-communication-in-the-package-manifest"><a href="#Enable-Internet-communication-in-the-package-manifest" class="headerlink" title="Enable Internet communication in the package manifest"></a>Enable Internet communication in the package manifest</h2><p>To use <code>WebAuthenticationBroker</code>, your application has to be granted the <code>Internet (Client)</code> capability, even if the authorization server is hosted locally.</p><div class="note tip"><p>This capability is now automatically enabled by default in the most recent &quot;UWP blank app&quot; template.</p></div><p>Adding it to the application manifest is easy and can be done using the built-in UI: simply double-click on the <code>Package.appxmanifest</code> file, go to the <em>Capabilities</em> tab and select <em>Internet (Client)</em>:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/app-manifest.png" alt="app-manifest.png"><h2 id="Use-a-trusted-SSL-certificate"><a href="#Use-a-trusted-SSL-certificate" class="headerlink" title="Use a trusted SSL certificate"></a>Use a trusted SSL certificate</h2><p>When developing a mobile/desktop application that communicates with an API, it is extremely frequent to avoid using SSL, since there&#39;s no need for transport security <strong>during the development phase</strong>, specially when the server is hosted locally.</p><p>Unfortunately, using a non-HTTPS address when calling <code>AuthenticateAsync</code> will simply result in an <code>ArgumentException</code> being thrown. Since there&#39;s currently no way to disable this requirement (even for pure testing scenarios), your authorization server must use an SSL certificate.</p><p>Luckily, using a trusted SSL certificate doesn&#39;t necessarily mean that the certificate has to be provided by a well-known authority: a self-issued certificate will work as long as it&#39;s added to the <code>Trusted Root Certification Authorities</code> <strong>user (or machine) store</strong>:</p><ol><li><p>You&#39;ll need to generate a self-signed certificate if you don&#39;t have one yet (note: IIS Express generates one for you, <a href="http://www.hanselman.com/blog/WorkingWithSSLAtDevelopmentTimeIsEasierWithIISExpress.aspx" target="_blank" rel="external">but you can replace it by your own one</a>). This procedure is well documented and many tools or <a href="http://www.selfsignedcertificate.com/" target="_blank" rel="external">websites</a> can help you with this task (you can even use <a href="http://blogs.msdn.com/b/asiatech/archive/2014/11/03/quickly-generate-install-and-export-self-signed-certificate-in-powershell-on-windows-8-1-2012r2.aspx" target="_blank" rel="external">Powershell for that</a>!). Just make sure to use <code>localhost</code> as the subject of the certificate when generating it and you should be okay.</p></li><li><p>When using your own certificate, you&#39;ll need to import it in your certificates store. Don&#39;t worry, it&#39;s rather easy to do and <a href="http://blogs.technet.com/b/sbs/archive/2008/05/08/installing-a-self-signed-certificate-as-a-trusted-root-ca-in-windows-vista.aspx" target="_blank" rel="external">a detailed walkthrough can be found on Technet</a>.</p></li><li><p>You&#39;ll have to configure your web server to use your self-signed certificate. With IIS Express, it should be as simple as checking the <code>Use SSL</code>checkbox in your ASP.NET project properties.</p></li></ol><h2 id="Remove-loopback-isolation"><a href="#Remove-loopback-isolation" class="headerlink" title="Remove loopback isolation"></a>Remove loopback isolation</h2><p>For security and reliability reasons, UWP applications are not allowed to send requests to the loopback interface. While Visual Studio automatically creates exemptions for debugged apps, this feature won&#39;t be helpful in this case, as the authentication broker always executes in a separate process.</p><p>If you see this (cryptic) error message in your Windows event logs, then you&#39;re likely facing this issue:</p><blockquote><p>AuthHost encountered a navigation error at URL: [...] with StatusCode: 0x800C0005.</p></blockquote><p>One option to fix it is to use the <a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/ConfigureFiddlerForWin8" target="_blank" rel="external">loopack exemption utility</a> developed by Eric Lawrence. It&#39;s natively included in Fiddler 4 but can also be downloaded as a standalone software. To allow the authentication broker to communicate with the loopback interface, exempt the applications starting with <code>microsoft.windows.authhost</code> and save your changes:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/loopback-exemption-utility.png" alt="loopback-exemption-utility.png"><p>If everything was properly configured, you should now see the login/consent page returned by your server:</p><img src="/2016/08/22/using-a-local-oauth2-openid-connect-server-with-webauthenticationbroker/wab-consent-screen.png" alt="wab-consent-screen.png">]]></content>
    
    <summary type="html">
    
      In this post, discover how to use WebAuthenticationBroker with your own local OAuth2 server.
    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
      <category term="windows 10" scheme="https://kevinchalet.com/tags/windows-10/"/>
    
      <category term="uwp" scheme="https://kevinchalet.com/tags/uwp/"/>
    
      <category term="web authentication broker" scheme="https://kevinchalet.com/tags/web-authentication-broker/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: conclusion</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/</id>
    <published>2016-07-13T17:00:00.000Z</published>
    <updated>2016-07-13T17:51:32.602Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the last part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>While this quite long blog posts series about ASOS ends here, there are still many aspects to cover. As promised in my introduction post, I&#39;ll dedicate a future post to the client-side part. An in-depth post about token revocation and the differences between JWT and opaque tokens is also planned.</p><p>If you have questions about ASOS or OAuth2/OpenID Connect, don&#39;t hesitate to <a href="https://gitter.im/aspnet-contrib/AspNet.Security.OpenIdConnect.Server" target="_blank" rel="external">join us on Gitter.im</a>.</p><p>If you need personal assistance, are looking for a contractor or have remarks about this blog posts series, please ping me at <code>contact [at] kevinchalet.com</code>.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/drop-the-mic.gif" alt="drop-the-mic.gif">]]></content>
    
    <summary type="html">
    
      Learn how you can create your own OpenID Connect server using ASOS in 7 steps.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: testing your authorization server with Postman</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/</id>
    <published>2016-07-13T16:45:00.000Z</published>
    <updated>2017-05-12T16:21:49.089Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the eighth part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><div class="note tip"><p>The sample used in this post can be found <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Samples/tree/master/samples/Postman" target="_blank" rel="external">in the <code>AspNet.Security.OpenIdConnect.Samples</code> repository</a>, that also hosts the Cordova, MVC and SignalR samples for ASOS.</p><p>For clarity, it implements both the authorization code flow and the password flow, but doesn&#39;t use any membership stack (the user credentials are hardcoded in the authorization provider class and a fake identity is always used to create tokens).</p></div><p>To test REST services, one of the easiest options is indisputably to use <a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a>. If you&#39;re not already familiar with Postman, I encourage you to read <a href="https://www.getpostman.com/docs/" target="_blank" rel="external">the documentation</a>.</p><hr><h2 id="Retrieving-an-access-token-using-the-resource-owner-password-credentials-grant"><a href="#Retrieving-an-access-token-using-the-resource-owner-password-credentials-grant" class="headerlink" title="Retrieving an access token using the resource owner password credentials grant"></a>Retrieving an access token using the resource owner password credentials grant</h2><p>Using the password flow with Postman is quite straightforward:</p><ul><li>Select <code>POST</code> as the HTTP method.</li><li>Fill the <code>Request URL</code> input with the <strong>absolute address of the token endpoint</strong>.</li><li>Click on the <code>Body</code> tab and choose the <code>x-www-form-urlencoded</code> encoding.</li><li>Add the OAuth2 parameters required by the specification, as shown on this screenshot:</li></ul><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/password-grant-token-request.png" alt="password-grant-token-request.png"><a id="more"></a><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:6500</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;password=P%40ssw0rd&amp;username=Bob&amp;scope=openid+offline_access</span></div></pre></td></tr></table></figure><p>If your request is valid, an access token, an identity token and a refresh token should be returned:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/password-grant-token-response.png" alt="password-grant-token-response.png"><p>While the access token and the refresh token are encrypted and opaque for the client, the identity token can be easily deserialized using a tool like <a href="https://jwt.io/" target="_blank" rel="external"><code>jwt.io</code></a>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/jwt-io-identity-token.png" alt="jwt-io-identity-token.png"><hr><h2 id="Making-an-API-request-using-the-access-token-issued-by-ASOS"><a href="#Making-an-API-request-using-the-access-token-issued-by-ASOS" class="headerlink" title="Making an API request using the access token issued by ASOS"></a>Making an API request using the access token issued by ASOS</h2><p>To attach an access token to an API request, click on the <code>Headers</code> tab and add a new <code>Authorization</code> header. Make sure to prefix the header value with the <code>Bearer</code> scheme (plus a space separating the scheme and the access token).</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-request.png" alt="api-request.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/api/message</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: localhost:6500</div><div class="line"><span class="attribute">Authorization</span>: Bearer CfDJ8CreAGYABzhAplxF9ZB11h_KUDCvbaypmh1sSTXrF4vxzxUwINdmwkmXBuDASGNZ6_buqhTKjWcVexE0KweZzwuHAMG_lo4ZGuSo3max4uG95m302E0xH6KZSecfZYBa_1jUUbknCS46jEH0pwuJzG4hCnLTdzH3x8Q32OzpnXB1pPhJts1Xz4XNUdmNYuP0m8Pi2n37eqjbmZjCYnLdaQYQNNEGTU6FkvWyuvDo401Tt5fvpCWE0DIu_99Cotu5eYzDQPnS3AAD96PfKYt24DRacUW9x3NPxMToR7b3aUN7-lZm_mccU-uxapTuIwzl5SuXSYeFJmgkbRU8ub4W2M1n3o0n2DToKiOO1n0t9EEFdk6Q9ky6B2MdIilAibNcx0o3fz2xnIirGYP831lxWAf0plr502t5fNqNTQEINd4kqWFRXVfpBZ6ZZVvzcJPV8B9HNKdpQiJGqmqqWj_NK7IedZcGY1dH6LAo_JDuiTet3jlLQlY_5MvZ0z-QYg1JARRuW8qFhgE_G0x8nwLUWRdphtp1OYNDYbYhS2gn_uuRJcG9cGsOOXoYlnYdtJI1NZHL-fXDXIw6J4RvXsv2hE_pzYZl26XhMACVa5lTx4v0D49uwlKFp0OB3OCI_Wbxq2zAnemdo7nnZcsdkgiUGHhMC6c_6EN71mJG-GYqU9Nl</div></pre></td></tr></table></figure><p>If the access token is still valid, you should see this exact output message:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-response.png" alt="api-response.png"><hr><h2 id="Retrieving-an-access-token-using-the-authorization-code-flow"><a href="#Retrieving-an-access-token-using-the-authorization-code-flow" class="headerlink" title="Retrieving an access token using the authorization code flow"></a>Retrieving an access token using the authorization code flow</h2><p>Using the authorization code flow is generally more complicated, but Postman offers a very simple and convenient way to retrieve an access token without having to write a single request.</p><p>To start a new authorization flow, click on the <code>Authorization</code> tab, select <code>OAuth 2.0</code> and press <code>Get new access token</code>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow.png" alt="authorization-code-flow.png"><p>When the OAuth 2.0 configuration popup appears, select <code>Authorization code</code> in the dropdown list and populate the required fields by specifying the <code>authorization endpoint</code>, the <code>token endpoint</code>, the <code>client identifier</code>, the <code>callback URL</code> and optionally, a <code>scope</code> and a <code>token name</code>.</p><div class="note info"><p>When running the sample from a location that is not accessible from Internet, make sure to check the <code>Request access token locally</code> checkbox.</p></div><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow-popup.png" alt="authorization-code-flow-popup.png"><p>If the request parameters are valid, you should be prompted by the authorization consent form returned by <code>AuthorizationController</code>:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-consent.png" alt="authorization-consent.png"><p>After granting the authorization, Postman will send a token request and retrieve a new access token it will add under the <code>Existing tokens</code> list:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/authorization-code-flow-response.png" alt="authorization-code-flow-response.png"><p>Select <code>Header</code> in the dropdown list and press <code>Use token</code> to tell Postman to attach the access token to the API request, like you manually did in the previous step. If the token is still valid, clicking on <code>Send</code> will return a successful message:</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/api-response.png" alt="api-response.png"><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to test your authorization server and how to query your token-protected API endpoints using Postman.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: adding custom claims and granting scopes</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/</id>
    <published>2016-07-13T16:30:00.000Z</published>
    <updated>2016-07-13T16:52:48.327Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the seventh part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><hr><h3 id="Attaching-a-destination-to-custom-claims-using-AddClaim-or-SetDestinations"><a href="#Attaching-a-destination-to-custom-claims-using-AddClaim-or-SetDestinations" class="headerlink" title="Attaching a destination to custom claims using AddClaim or SetDestinations"></a>Attaching a destination to custom claims using <code>AddClaim</code> or <code>SetDestinations</code></h3><p>Unlike <code>OAuthAuthorizationServerMiddleware</code>, ASOS doesn&#39;t assume that access tokens are always consumed by your own resource servers and <strong>refuses to serialize claims that don&#39;t explicitly specify a <em>destination</em> to avoid leaking confidential data to unauthorized parties</strong>.</p><div class="note tip"><p>Two destinations are currently supported by ASOS: <code>access_token</code> and <code>id_token</code>. There&#39;s no equivalent for authorization codes or refresh tokens as they are always encrypted and only readable by the authorization server itself.</p></div><p>Concretely, this means that <strong>all your claims won&#39;t be returned to the client application</strong>, unless you explicitly call the <code>AddClaim</code> overload taking one or more destinations or use <code>SetDestinations</code> to attach the appropriate destination(s) to your claims.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">    </div><div class="line"><span class="comment">// When access_token and id_token are specified,</span></div><div class="line"><span class="comment">// the claim will be serialized in both tokens.</span></div><div class="line">identity.AddClaim(<span class="string">"username"</span>, <span class="string">"Pinpoint"</span>,</div><div class="line">    OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">    OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line"><span class="comment">// If only access_token is specified, the language</span></div><div class="line"><span class="comment">// claim won't be added in the identity token.</span></div><div class="line"><span class="keyword">var</span> claim = <span class="keyword">new</span> Claim(<span class="string">"language"</span>, <span class="string">"fr-FR"</span>);</div><div class="line">claim.SetDestinations(OpenIdConnectConstants.Destinations.AccessToken);</div><div class="line"></div><div class="line">identity.AddClaim(claim);</div></pre></td></tr></table></figure><a id="more"></a><hr><h3 id="Specifying-a-list-of-resources-using-ticket-SetResources"><a href="#Specifying-a-list-of-resources-using-ticket-SetResources" class="headerlink" title="Specifying a list of resources using ticket.SetResources()"></a>Specifying a list of resources using <code>ticket.SetResources()</code></h3><p>By default, the access tokens issued by ASOS are not constrained to a specific audience and can be used with virtually any API accepting the tokens issued by your authorization server.</p><p>When creating an authentication ticket, you can specify a list of resource servers (i.e APIs) the client application is allowed to access using <code>ticket.SetResources()</code>, which will limit the audiences of the access tokens serialized by ASOS.</p><div class="note tip"><p>Specifying a list of resources can be particularly useful when using JWT tokens, as many implementations (like the JWT bearer middleware developed by Microsoft) are designed to reject access tokens that don&#39;t have an explicit <code>aud</code> (audience) claim, <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3" target="_blank" rel="external">though it&#39;s not a mandatory claim according to the JWT specification</a>.</p></div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a new authentication ticket holding the user identity.</span></div><div class="line"><span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">    <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">    <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line"><span class="comment">// Set the resource servers the access token should be issued for.</span></div><div class="line"><span class="comment">// Multiple values can be specified, but they can't contain space characters.</span></div><div class="line">ticket.SetResources(<span class="string">"resource_server"</span>, <span class="string">"http://localhost:12345/"</span>);</div></pre></td></tr></table></figure><hr><h3 id="Specifying-a-list-of-scopes-using-ticket-SetScopes"><a href="#Specifying-a-list-of-scopes-using-ticket-SetScopes" class="headerlink" title="Specifying a list of scopes using ticket.SetScopes()"></a>Specifying a list of scopes using <code>ticket.SetScopes()</code></h3><p>Starting with ASOS beta5, request scopes are no longer automatically attached to the authentication ticket: it&#39;s now up to you to list the scopes you want to grant.</p><div class="note tip"><p>If you don&#39;t explicitly grant the <code>offline_access</code> scope, no refresh token will be returned to the client application. Similarly, if you don&#39;t include <code>openid</code> as a granted scope, the caller won&#39;t get back an identity token.</p></div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create a new authentication ticket holding the user identity.</span></div><div class="line"><span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">    <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">    <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">    OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line"><span class="comment">// Set the list of scopes granted to the client application.</span></div><div class="line">ticket.SetScopes(</div><div class="line">    <span class="comment">/* openid: */</span> OpenIdConnectConstants.Scopes.OpenId,</div><div class="line">    <span class="comment">/* email: */</span> OpenIdConnectConstants.Scopes.Email,</div><div class="line">    <span class="comment">/* profile: */</span> OpenIdConnectConstants.Scopes.Profile,</div><div class="line">    <span class="comment">/* offline_access: */</span> OpenIdConnectConstants.Scopes.OfflineAccess);</div></pre></td></tr></table></figure><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover why attaching a destination to your claims is necessary to allow ASOS to serialize them in the access/identity tokens returned to the client application and how you can easily grant one or multiple scopes.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: implementing the authorization code and implicit flows</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/</id>
    <published>2016-07-13T16:15:00.000Z</published>
    <updated>2017-05-12T16:23:13.890Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the sixth part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>To support interactive flows like the authorization code or the implicit flows, the <code>ValidateAuthorizationRequest</code> event must be implemented to validate <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest" target="_blank" rel="external">the authorization request</a> sent by the client application.</p><hr><h2 id="Implementing-ValidateAuthorizationRequest-to-validate-response-type-client-id-and-redirect-uri"><a href="#Implementing-ValidateAuthorizationRequest-to-validate-response-type-client-id-and-redirect-uri" class="headerlink" title="Implementing ValidateAuthorizationRequest to validate response_type, client_id and redirect_uri"></a>Implementing <code>ValidateAuthorizationRequest</code> to validate <code>response_type</code>, <code>client_id</code> and <code>redirect_uri</code></h2><p>To support interactive flows, you must implement <code>ValidateAuthorizationRequest</code> to validate the <code>client_id</code> and the <code>redirect_uri</code> parameters provided by the client application to ensure they correspond to a registered client.</p><p>Ideally, the <code>response_type</code> parameter should also be validated to ensure that a <code>client_id</code> corresponding to a confidential application cannot be used with the implicit/hybrid flow to prevent <a href="http://homakov.blogspot.com/2012/08/saferweb-oauth2a-or-lets-just-fix-it.html" target="_blank" rel="external">downgrade attacks</a>.</p><div class="note tip"><p>In pure OAuth2, <code>redirect_uri</code> was not mandatory but is now required by the OpenID Connect specification. To support legacy clients, ASOS doesn&#39;t reject authorization requests missing the <code>redirect_uri</code> parameter if the <code>openid</code> scope is not present, but in this case, it&#39;s up to you to call <code>context.Validate(...)</code> with the <code>redirect_uri</code> the user agent should be redirected to. If you don&#39;t need to support such clients, <strong>consider rejecting the authorization requests that don&#39;t specify a <code>redirect_uri</code></strong>.</p></div><div class="note warn"><p>While the <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest" target="_blank" rel="external">OpenID Connect specification explicitly states</a> that <strong>the <code>redirect_uri</code> MUST exactly match one of the callback URLs associated with the client application</strong>, you&#39;re actually free to implement a relaxed comparison policy to support advanced scenarios (e.g domain-only/subdomain comparison or wildcard support): <strong>use this ability with extreme caution to avoid introducing an <a href="http://cwe.mitre.org/data/definitions/601.html" target="_blank" rel="external">open redirect vulnerability</a></strong>.</p></div><p>Nothing surprising: the exact implementation of <code>ValidateAuthorizationRequest</code> will depend on the flows you want to support (e.g authorization code/implicit/hybrid) and on how you store your application details (e.g hardcoded or in a database).</p><a id="more"></a><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ValidateAuthorizationRequest</span>(<span class="params">ValidateAuthorizationRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> database = context.HttpContext.RequestServices.GetRequiredService&lt;ApplicationContext&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// Note: the OpenID Connect server middleware supports the authorization code,</span></div><div class="line">    <span class="comment">// implicit/hybrid and custom flows but this authorization provider only accepts</span></div><div class="line">    <span class="comment">// response_type=code authorization requests. You may consider relaxing it to support</span></div><div class="line">    <span class="comment">// the implicit or hybrid flows. In this case, consider adding checks rejecting</span></div><div class="line">    <span class="comment">// implicit/hybrid authorization requests when the client is a confidential application.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsAuthorizationCodeFlow())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedResponseType,</div><div class="line">            description: <span class="string">"Only the authorization code flow is supported by this server."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note: redirect_uri is not required for pure OAuth2 requests</span></div><div class="line">    <span class="comment">// but this provider uses a stricter policy making it mandatory,</span></div><div class="line">    <span class="comment">// as required by the OpenID Connect core specification.</span></div><div class="line">    <span class="comment">// See http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.RedirectUri))</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidRequest,</div><div class="line">            description: <span class="string">"The required redirect_uri parameter was missing."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Retrieve the application details corresponding to the requested client_id.</span></div><div class="line">    <span class="keyword">var</span> application = <span class="keyword">await</span> (<span class="keyword">from</span> entity <span class="keyword">in</span> database.Applications</div><div class="line">                             <span class="keyword">where</span> entity.ApplicationID == context.ClientId</div><div class="line">                             <span class="keyword">select</span> entity).SingleOrDefaultAsync(context.HttpContext.RequestAborted);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (application == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            description: <span class="string">"Application not found in the database: "</span> +</div><div class="line">                         <span class="string">"ensure that your client_id is correct."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note: the comparison doesn't need to be time-constant as the</span></div><div class="line">    <span class="comment">// callback URL stored in the database is not a secret value.</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.Equals(context.RedirectUri, application.RedirectUri, StringComparison.Ordinal))</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            description: <span class="string">"Invalid redirect_uri."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    context.Validate();</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Implementing-ValidateTokenRequest-to-validate-the-grant-type-and-the-client-application-credentials"><a href="#Implementing-ValidateTokenRequest-to-validate-the-grant-type-and-the-client-application-credentials" class="headerlink" title="Implementing ValidateTokenRequest to validate the grant type and the client application credentials"></a>Implementing <code>ValidateTokenRequest</code> to validate the grant type and the client application credentials</h2><p>Similarly to the resource owner password credentials grant, <strong>the <code>ValidateTokenRequest</code> event must be implemented</strong> when using the authorization code flow, as it relies on the token endpoint to get a new access token.</p><p>Since the same concerns apply here (including grant type and client authentication validation), don&#39;t hesitate to (re)read the <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="previous post">previous post</a> if you&#39;re unsure how you&#39;re supposed to implement the <code>ValidateTokenRequest</code> event.</p><p>For instance, here&#39;s what you&#39;ll typically do for a mobile application, for which client authentication cannot be enforced:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Reject the token requests that don't use</span></div><div class="line">    <span class="comment">// grant_type=authorization_code or grant_type=refresh_token.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsAuthorizationCodeGrantType() &amp;&amp;</div><div class="line">        !context.Request.IsRefreshTokenGrantType())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">            description: <span class="string">"Only the authorization code and refresh token "</span> +</div><div class="line">                         <span class="string">"grants are accepted by this authorization server"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Since there's only one application and since it's a public client</span></div><div class="line">    <span class="comment">// (i.e a client that cannot keep its credentials private), call Skip()</span></div><div class="line">    <span class="comment">// to inform the server the request should be accepted without </span></div><div class="line">    <span class="comment">// enforcing client authentication.</span></div><div class="line">    context.Skip();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Implementing-your-own-authorization-consent-pages"><a href="#Implementing-your-own-authorization-consent-pages" class="headerlink" title="Implementing your own authorization/consent pages"></a>Implementing your own authorization/consent pages</h2><p>As mentioned in the introduction post, <strong>ASOS doesn&#39;t come with a consent page and it&#39;s up to the implementer to provide one if necessary</strong>.</p><p>This can be done using the framework of your choice: <a href="https://github.com/aspnet/Mvc" target="_blank" rel="external">ASP.NET Core MVC</a>, <a href="https://github.com/NancyFx/Nancy" target="_blank" rel="external">Nancy</a> or any other OWIN-compatible framework. Since MVC is by far the most popular framework, I&#39;ll only demonstrate how you can implement your own consent form using MVC controllers, but you can also find a sample using the OWIN/Katana version of ASOS with Nancy in the <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/blob/master/samples/Nancy/Nancy.Server/Modules/AuthorizationModule.cs" target="_blank" rel="external">GitHub repository</a>.</p><div class="note warn"><p>This is probably <strong>the most critical step when creating your own identity server</strong> as the consent page is an important attack vector: <strong>to prevent clickjacking/cursorjacking and cross-site request forgery attacks, you MUST implement appropriate countermeasures</strong> (e.g framekillers scripts, X-Frame-Options, Content-Security-Policy and antiforgery tokens).</p><p>In MVC, cross-site request forgery and clickjacking attacks are usually mitigated using the <code>[ValidateAntiforgeryToken]</code> attribute, that uses the whole new <a href="https://github.com/aspnet/Antiforgery" target="_blank" rel="external">Antiforgery</a> stack under the hood.</p></div><h3 id="Creating-an-Authorize-action-to-display-the-consent-form"><a href="#Creating-an-Authorize-action-to-display-the-consent-form" class="headerlink" title="Creating an Authorize action to display the consent form"></a>Creating an <code>Authorize</code> action to display the consent form</h3><p>The <code>Authorize</code> action represents <strong>the initial step of the authorization process</strong>: it&#39;s the first page the user will be redirected to by the client application and where he/she will be invited to accept or reject the authorization request.</p><div class="note tip"><p>In most cases, you&#39;ll likely want to ensure the user is logged in and registered before displaying a consent form, but merging the login form and the consent form is also possible: you&#39;re only limited by your imagination.</p><p>Of course, <strong>you&#39;re responsible of providing the required infrastructure needed to log your users in</strong>, which can be easily implemented using ASP.NET Core Identity and the <code>AccountController</code> that comes with the default Visual Studio templates and supports both local and external authentication.</p></div><p>Here&#39;s a simple example using an <code>Authorize</code> action and 2 Razor views:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[Authorize, HttpGet(<span class="string">"~/connect/authorize"</span>)]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Authorize</span>(<span class="params">CancellationToken cancellationToken</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Extract the authorization request from the ASP.NET context.</span></div><div class="line">    <span class="keyword">var</span> request = HttpContext.GetOpenIdConnectRequest();</div><div class="line"></div><div class="line">    <span class="comment">// Note: ASOS implicitly ensures that an application corresponds to the client_id</span></div><div class="line">    <span class="comment">// specified in the authorization request by calling ValidateAuthorizationRequest.</span></div><div class="line">    <span class="comment">// In theory, this null check shouldn't be needed, but a race condition could occur</span></div><div class="line">    <span class="comment">// if you manually removed the application from the database after the initial check.</span></div><div class="line">    <span class="keyword">var</span> application = <span class="keyword">await</span> (<span class="keyword">from</span> entity <span class="keyword">in</span> database.Applications</div><div class="line">                             <span class="keyword">where</span> entity.ApplicationID == request.ClientId</div><div class="line">                             <span class="keyword">select</span> entity).SingleOrDefaultAsync(cancellationToken);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (application == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> View(<span class="string">"Error"</span>, <span class="keyword">new</span> ErrorViewModel</div><div class="line">        &#123;</div><div class="line">            Error = OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            ErrorDescription = <span class="string">"Details concerning the calling client "</span> +</div><div class="line">                               <span class="string">"application cannot be found in the database"</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> View(<span class="keyword">new</span> AuthorizeViewModel</div><div class="line">    &#123;</div><div class="line">        ApplicationName = application.DisplayName,</div><div class="line">        Parameters = request.GetParameters(),</div><div class="line">        Scope = request.Scope</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorizeViewModel</span></div><div class="line">&#123;</div><div class="line">    [Display(Name = <span class="string">"Application"</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ApplicationName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [BindNever]</div><div class="line">    <span class="keyword">public</span> IDictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt; Parameters &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [Display(Name = <span class="string">"Scope"</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Scope &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorViewModel</span></div><div class="line">&#123;</div><div class="line">    [Display(Name = <span class="string">"Error"</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Error &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line"></div><div class="line">    [Display(Name = <span class="string">"Description"</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> ErrorDescription &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>Authorize.cshtml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@model AuthorizeViewModel</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Authorization<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead text-left"</span>&gt;</span>Do you want to grant <span class="tag">&lt;<span class="name">strong</span>&gt;</span>@Model.ApplicationName<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> access to your data? (scopes requested: @Model.Scope)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        @Html.AntiForgeryToken()</div><div class="line"></div><div class="line">        @foreach (var parameter in Model.Parameters)</div><div class="line">        &#123;</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"@parameter.Key"</span> <span class="attr">value</span>=<span class="string">"@parameter.Value"</span> /&gt;</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">formaction</span>=<span class="string">"@Url.Action("</span><span class="attr">Accept</span>")" <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success"</span> <span class="attr">name</span>=<span class="string">"Authorize"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Yes"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">formaction</span>=<span class="string">"@Url.Action("</span><span class="attr">Deny</span>")" <span class="attr">class</span>=<span class="string">"btn btn-lg btn-danger"</span> <span class="attr">name</span>=<span class="string">"Deny"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"No"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight html"><figcaption><span>Error.cshtml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@model ErrorViewModel</div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ooooops, something went really bad! :(<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead text-left"</span>&gt;</span></div><div class="line">        @if (!string.IsNullOrEmpty(Model.Error))</div><div class="line">        &#123;</div><div class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>@Model.Error<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @if (!string.IsNullOrEmpty(Model.ErrorDescription))</div><div class="line">        &#123;</div><div class="line">            <span class="tag">&lt;<span class="name">small</span>&gt;</span>@Model.ErrorDescription<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="Creating-an-Accept-action-to-let-the-user-validate-the-consent-form"><a href="#Creating-an-Accept-action-to-let-the-user-validate-the-consent-form" class="headerlink" title="Creating an Accept action to let the user validate the consent form"></a>Creating an <code>Accept</code> action to let the user validate the consent form</h3><p>When the user approves the authorization request, the only thing you have to have to do is <strong>create a <code>ClaimsIdentity</code> containing the user claims</strong> and call <code>ControllerBase.SignIn</code> to inform the OpenID Connect server middleware that a successful authorization response should be returned to the client application.</p><p>This step is very similar to how you implemented <code>HandleTokenRequest</code> in the previous post:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">[Authorize, HttpPost(<span class="string">"~/connect/authorize/accept"</span>), ValidateAntiForgeryToken]</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Accept</span>(<span class="params">CancellationToken cancellationToken</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> request = HttpContext.GetOpenIdConnectRequest();</div><div class="line"></div><div class="line">    <span class="comment">// Create a new ClaimsIdentity containing the claims that</span></div><div class="line">    <span class="comment">// will be used to create an id_token, a token or a code.</span></div><div class="line">    <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">    <span class="comment">// Copy the unique identifier associated with the logged-in user to the new identity.</span></div><div class="line">    <span class="comment">// Note: the subject is always included in both identity and access tokens,</span></div><div class="line">    <span class="comment">// even if an explicit destination is not explicitly specified.</span></div><div class="line">    identity.AddClaim(OpenIdConnectConstants.Claims.Subject,</div><div class="line">        User.GetClaim(OpenIdConnectConstants.Claims.Subject));</div><div class="line"></div><div class="line">    <span class="keyword">var</span> application = <span class="keyword">await</span> (<span class="keyword">from</span> entity <span class="keyword">in</span> database.Applications</div><div class="line">                             <span class="keyword">where</span> entity.ApplicationID == request.ClientId</div><div class="line">                             <span class="keyword">select</span> entity).SingleOrDefaultAsync(cancellationToken);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (application == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> View(<span class="string">"Error"</span>, <span class="keyword">new</span> ErrorViewModel</div><div class="line">        &#123;</div><div class="line">            Error = OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            ErrorDescription = <span class="string">"Details concerning the calling client "</span> +</div><div class="line">                               <span class="string">"application cannot be found in the database"</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Create a new authentication ticket holding the user identity.</span></div><div class="line">    <span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">        <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">        <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">        OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">    <span class="comment">// Set the list of scopes granted to the client application.</span></div><div class="line">    <span class="comment">// Note: this sample always grants the "openid", "email" and "profile" scopes</span></div><div class="line">    <span class="comment">// when they are requested by the client application: a real world application</span></div><div class="line">    <span class="comment">// would probably display a form allowing to select the scopes to grant.</span></div><div class="line">    ticket.SetScopes(</div><div class="line">        <span class="comment">/* openid: */</span> OpenIdConnectConstants.Scopes.OpenId,</div><div class="line">        <span class="comment">/* email: */</span> OpenIdConnectConstants.Scopes.Email,</div><div class="line">        <span class="comment">/* profile: */</span> OpenIdConnectConstants.Scopes.Profile);</div><div class="line"></div><div class="line">    <span class="comment">// Set the resource servers the access token should be issued for.</span></div><div class="line">    ticket.SetResources(<span class="string">"resource_server"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Returning a SignInResult will ask ASOS to serialize the specified identity</span></div><div class="line">    <span class="comment">// to build appropriate tokens. You should always make sure the identities</span></div><div class="line">    <span class="comment">// you return contain the OpenIdConnectConstants.Claims.Subject claim. In this sample,</span></div><div class="line">    <span class="comment">// the identity always contains the name identifier returned by the external provider.</span></div><div class="line">    <span class="keyword">return</span> SignIn(ticket.Principal, ticket.Properties, ticket.AuthenticationScheme);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Creating-a-Deny-action-to-allow-rejecting-the-authorization-request"><a href="#Creating-a-Deny-action-to-allow-rejecting-the-authorization-request" class="headerlink" title="Creating a Deny action to allow rejecting the authorization request"></a>Creating a <code>Deny</code> action to allow rejecting the authorization request</h3><p>Rejecting an authorization request couldn&#39;t be simpler with ASOS: call <code>Forbid(OpenIdConnectServerDefaults.AuthenticationScheme)</code> to return a <code>ForbidResult</code> and ASOS will immediately redirect the user agent to the client application.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[Authorize]</div><div class="line">[HttpPost(<span class="string">"~/connect/authorize/deny"</span>)]</div><div class="line">[ValidateAntiForgeryToken]</div><div class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">Deny</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Notify ASOS that the authorization grant has been denied by the resource owner.</span></div><div class="line">    <span class="comment">// The user agent will be redirected to the client application as part of this call.</span></div><div class="line">    <span class="keyword">return</span> Forbid(OpenIdConnectServerDefaults.AuthenticationScheme);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Implementing-MatchEndpoint-to-dynamically-determine-the-request-type"><a href="#Implementing-MatchEndpoint-to-dynamically-determine-the-request-type" class="headerlink" title="Implementing MatchEndpoint to dynamically determine the request type"></a>Implementing <code>MatchEndpoint</code> to dynamically determine the request type</h2><p>By default, <strong>ASOS only handles the HTTP requests whose path exactly matches one of the pre-defined endpoints</strong> registered in the OpenID Connect server options.</p><p>You can override the default endpoint selection routine by implementing the <code>MatchEndpoint</code> event, which can be particularly useful to extract authorization requests from subpaths like <code>/connect/authorize/accept</code> and <code>/connect/authorize/deny</code>, that would be ignored otherwise.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">MatchEndpoint</span>(<span class="params">MatchEndpointContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Note: by default, the OIDC server middleware only handles authorization requests made to</span></div><div class="line">    <span class="comment">// AuthorizationEndpointPath. This handler uses a more relaxed policy that allows extracting</span></div><div class="line">    <span class="comment">// authorization requests received at /connect/authorize/accept and /connect/authorize/deny.</span></div><div class="line">    <span class="keyword">if</span> (context.Options.AuthorizationEndpointPath.HasValue &amp;&amp;</div><div class="line">        context.Request.Path.StartsWithSegments(context.Options.AuthorizationEndpointPath))</div><div class="line">    &#123;</div><div class="line">        context.MatchesAuthorizationEndpoint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, learn how you can implement the authorization code and implicit flows using ASOS and ASP.NET Core MVC.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: implementing the resource owner password credentials grant</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/</id>
    <published>2016-07-13T16:00:00.000Z</published>
    <updated>2017-05-12T16:15:50.602Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the fifth part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>Implementing the resource owner password credentials grant (abbreviated <code>ROPC</code> for brevity) is quite easy with ASOS as the only thing you have to do is to provide your own implementation of <code>ValidateTokenRequest</code> and <code>HandleTokenRequest</code>.</p><p>But to properly implement these events, you first need to determine what&#39;s the best client authentication policy for your application.</p><hr><h2 id="Implementing-ValidateTokenRequest-to-validate-the-grant-type-and-the-client-application-credentials"><a href="#Implementing-ValidateTokenRequest-to-validate-the-grant-type-and-the-client-application-credentials" class="headerlink" title="Implementing ValidateTokenRequest to validate the grant type and the client application credentials"></a>Implementing <code>ValidateTokenRequest</code> to validate the grant type and the client application credentials</h2><p>When implementing flows using backchannel communication (i.e resource owner password credentials grant, client credentials grant, authorization code flow or refresh token grant), the <code>ValidateTokenRequest</code> event must be overridden to validate the token request.</p><p>So, what are you supposed to validate in this event? Mainly two things:</p><ul><li><strong>The grant type</strong>: in most cases, you&#39;ll likely want to restrict the grants a client application is allowed to use (e.g resource owner password credentials only): <code>ValidateTokenRequest</code> is the best place for that.</li></ul><div class="note info"><p>It should be noted that ASOS doesn&#39;t validate the <code>grant_type</code> value, <a href="https://tools.ietf.org/html/rfc6749#section-4.5" target="_blank" rel="external">that can even contain a custom value for extension grants</a>: if you only want to support standard grants, it&#39;s up to you to reject the token request by calling <code>context.Reject()</code>.</p><p><code>IsAuthorizationCodeGrantType()</code>, <code>IsRefreshTokenGrantType()</code>, <code>IsPasswordGrantType()</code> and <code>IsClientCredentialsGrantType()</code> can be used for this exact purpose.</p></div><ul><li><strong>The client credentials</strong> (<code>client_id</code>/<code>client_secret</code>): the OAuth2 specification explicitly states <strong>that confidential applications</strong> (i.e applications that are able to keep their credentials secret, like server-side apps) <strong>must authenticate when using the token endpoint</strong>. This security measure is extremely important as it&#39;s the only way to prevent malicious applications from retrieving an access token on behalf of a legitimate confidential application.</li></ul><div class="note info"><p>Contrary to popular belief, client authentication is never mandatory when using the token endpoint (except for the client credentials grant), which means that <strong>public applications like JS or mobile apps are allowed to use the resource owner password grant without having to send their credentials</strong>.</p><p>In practice, it&#39;s up to you to decide whether your token endpoint should accept unauthenticated requests or not, depending on the type of client you&#39;ll use.</p></div><a id="more"></a><p>No big surprise here: while a few rules apply to most implementations (e.g brute force countermeasures), <strong>the exact implementation of this event will mainly depend on your specific requirements</strong>:</p><ul><li><p>Do you need to support multiple grant types, or just the resource owner password credentials grant?</p></li><li><p>Do you need to support public clients? If you plan to use ROPC with JS or mobile applications, you won&#39;t be able to make client authentication mandatory, since these applications cannot safely store their credentials. Conversely, if you only target public apps, rolling your own client authentication policy is likely to be pointless.</p></li></ul><div class="note tip"><p>When supporting both public and confidential clients, the recommended approach is to skip client authentication when <code>client_id</code> is missing and validate it when present, <strong>to make sure counterfeit applications cannot impersonate confidential applications</strong>.</p></div><ul><li>Do you have multiple clients? If you have more than one client application, you&#39;ll probably want to store the application details in a database instead of hardcoding them in the provider class.</li></ul><hr><h3 id="Implementing-a-policy-skipping-client-authentication-for-JS-mobile-apps-only-scenarios"><a href="#Implementing-a-policy-skipping-client-authentication-for-JS-mobile-apps-only-scenarios" class="headerlink" title="Implementing a policy skipping client authentication (for JS/mobile apps-only scenarios)"></a>Implementing a policy skipping client authentication (for JS/mobile apps-only scenarios)</h3><p>Using the resource owner password credentials grant with SPA apps is a very popular scenario. Since these apps can&#39;t store their credentials in a safe place, client authentication cannot be enforced.</p><p>Here&#39;s how you could implement <code>ValidateTokenRequest</code> to avoid making client authentication mandatory:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Reject the token requests that don't use grant_type=password or grant_type=refresh_token.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsPasswordGrantType() &amp;&amp; !context.Request.IsRefreshTokenGrantType())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">            description: <span class="string">"Only the resource owner password credentials and refresh token "</span> +</div><div class="line">                         <span class="string">"grants are accepted by this authorization server"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Since there's only one application and since it's a public client</span></div><div class="line">    <span class="comment">// (i.e a client that cannot keep its credentials private), call Skip()</span></div><div class="line">    <span class="comment">// to inform the server the request should be accepted without </span></div><div class="line">    <span class="comment">// enforcing client authentication.</span></div><div class="line">    context.Skip();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note info"><p>Though additional checks can be added (e.g <code>Origin</code> header validation), <strong>you have no way</strong> to ensure that the caller sending the token request is really a trusted application when skipping client authentication: keep in mind that <strong>access tokens may be issued to unauthorized parties impersonating legitimate applications</strong>.</p><p>When client authentication is not enforced, the resource owner password credentials grant offers the same security level as the implicit flow and shares a similar threat model.</p></div><hr><h3 id="Implementing-a-policy-requiring-client-authentication-for-server-side-apps-only-scenarios"><a href="#Implementing-a-policy-requiring-client-authentication-for-server-side-apps-only-scenarios" class="headerlink" title="Implementing a policy requiring client authentication (for server-side apps-only scenarios)"></a>Implementing a policy requiring client authentication (for server-side apps-only scenarios)</h3><p>This scenario is the exact opposite of the previous one: when targeting confidential applications, you MUST enforce client authentication to prevent client impersonation by unauthorized parties and the token request must be rejected if the client credentials are missing or invalid.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Reject the token request that don't use grant_type=password or grant_type=refresh_token.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsPasswordGrantType() &amp;&amp; !context.Request.IsRefreshTokenGrantType())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">            description: <span class="string">"Only resource owner password credentials and refresh token "</span> +</div><div class="line">                         <span class="string">"are accepted by this authorization server"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Reject the token request if client_id or client_secret is missing.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.ClientId) || <span class="keyword">string</span>.IsNullOrEmpty(context.ClientSecret))</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidRequest,</div><div class="line">            description: <span class="string">"Missing credentials: ensure that your credentials were correctly "</span> +</div><div class="line">                         <span class="string">"flowed in the request body or in the authorization header"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider applying</span></div><div class="line">    <span class="comment">// a key derivation function like PBKDF2 to slow down the secret validation process.</span></div><div class="line">    <span class="comment">// You SHOULD also consider using a time-constant comparer to prevent timing attacks.</span></div><div class="line">    <span class="comment">// For that, you can use the CryptoHelper library developed by @henkmollema:</span></div><div class="line">    <span class="comment">// https://github.com/henkmollema/CryptoHelper. If you don't need .NET Core support,</span></div><div class="line">    <span class="comment">// SecurityDriven.NET/inferno is a rock-solid alternative: http://securitydriven.net/inferno/</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.Equals(context.ClientId, <span class="string">"client_id"</span>, StringComparison.Ordinal) &amp;&amp;</div><div class="line">        <span class="keyword">string</span>.Equals(context.ClientSecret, <span class="string">"client_secret"</span>, StringComparison.Ordinal))</div><div class="line">    &#123;</div><div class="line">        context.Validate();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note: if Validate() is not explicitly called,</span></div><div class="line">    <span class="comment">// the request is automatically rejected.</span></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Implementing-an-hybrid-policy-supporting-both-public-and-confidential-applications"><a href="#Implementing-an-hybrid-policy-supporting-both-public-and-confidential-applications" class="headerlink" title="Implementing an hybrid policy supporting both public and confidential applications"></a>Implementing an hybrid policy supporting both public and confidential applications</h3><p>In a few cases, you&#39;ll want to support both public clients (e.g mobile apps) and confidential applications (e.g MVC clients). For that, you&#39;ll need to implement an hybrid policy, supporting both types of clients:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> database = context.HttpContext.RequestServices.GetRequiredService&lt;ApplicationContext&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// Reject the token request that don't use grant_type=password or grant_type=refresh_token.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsPasswordGrantType() &amp;&amp; !context.Request.IsRefreshTokenGrantType())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">            description: <span class="string">"Only resource owner password credentials and refresh token "</span> +</div><div class="line">                         <span class="string">"are accepted by this authorization server"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Skip client authentication if the client identifier is missing.</span></div><div class="line">    <span class="comment">// Note: ASOS will automatically ensure that the calling application</span></div><div class="line">    <span class="comment">// cannot use an authorization code or a refresh token if it's not</span></div><div class="line">    <span class="comment">// the intended audience, even if client authentication was skipped.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.ClientId))</div><div class="line">    &#123;</div><div class="line">        context.Skip();</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Retrieve the application details corresponding to the requested client_id.</span></div><div class="line">    <span class="keyword">var</span> application = <span class="keyword">await</span> (<span class="keyword">from</span> entity <span class="keyword">in</span> database.Applications</div><div class="line">                             <span class="keyword">where</span> entity.ApplicationID == context.ClientId</div><div class="line">                             <span class="keyword">select</span> entity).SingleOrDefaultAsync(context.HttpContext.RequestAborted);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (application == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            description: <span class="string">"Application not found in the database: ensure that your client_id is correct."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (application.Type == ApplicationType.Public)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Reject tokens requests containing a client_secret</span></div><div class="line">        <span class="comment">// if the client application is not confidential.</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(context.ClientSecret))</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidRequest,</div><div class="line">                description: <span class="string">"Public clients are not allowed to send a client_secret."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// If client authentication cannot be enforced, call context.Skip() to inform</span></div><div class="line">        <span class="comment">// the OpenID Connect server middleware that the caller cannot be fully trusted.</span></div><div class="line">        context.Skip();</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Confidential applications MUST authenticate</span></div><div class="line">    <span class="comment">// to protect them from impersonation attacks.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.ClientSecret))</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            description: <span class="string">"Missing credentials: ensure that you specified a client_secret."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Note: to mitigate brute force attacks, you SHOULD strongly consider applying</span></div><div class="line">    <span class="comment">// a key derivation function like PBKDF2 to slow down the secret validation process.</span></div><div class="line">    <span class="comment">// You SHOULD also consider using a time-constant comparer to prevent timing attacks.</span></div><div class="line">    <span class="comment">// For that, you can use the CryptoHelper library developed by @henkmollema:</span></div><div class="line">    <span class="comment">// https://github.com/henkmollema/CryptoHelper. If you don't need .NET Core support,</span></div><div class="line">    <span class="comment">// SecurityDriven.NET/inferno is a rock-solid alternative: http://securitydriven.net/inferno/</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.Equals(context.ClientSecret, application.Secret, StringComparison.Ordinal))</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.InvalidClient,</div><div class="line">            description: <span class="string">"Invalid credentials: ensure that you specified a correct client_secret."</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    context.Validate();</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="Implementing-HandleTokenRequest-to-issue-an-authentication-ticket-containing-the-user-claims"><a href="#Implementing-HandleTokenRequest-to-issue-an-authentication-ticket-containing-the-user-claims" class="headerlink" title="Implementing HandleTokenRequest to issue an authentication ticket containing the user claims"></a>Implementing <code>HandleTokenRequest</code> to issue an authentication ticket containing the user claims</h2><p><code>HandleTokenRequest</code> is <strong>the event responsible of processing the token request and preparing the authentication ticket</strong> used to serialize the access token.</p><div class="note info"><p>It&#39;s important to note that <code>HandleTokenRequest</code> is invoked for every token request. User implementations should only process token requests that use a supported <code>grant_type</code> (e.g <code>password</code>) and let ASOS automatically handle or reject the other grants (e.g <code>authorization_code</code> or <code>refresh_token</code>).</p></div><p>Like <code>ValidateTokenRequest</code>, the exact implementation of <code>HandleTokenRequest</code> will mainly depend on your application, and specially on the membership stack you&#39;re using. That said, a few generic rules apply to all implementations:</p><ul><li><strong>Brute force countermeasures MUST be implemented</strong>, <a href="https://tools.ietf.org/html/rfc6749#section-4.3.2" target="_blank" rel="external">as required by the OAuth2 specification</a>. This is usally done by using key derivation (ideally with a large number of iterations, to slow down the authentication process) and by implementing account lockout.</li><li><strong>The token request MUST be rejected if the user account is configured to require two-factor authentication</strong> as the resource owner password credentials grant cannot be used in this case (at least, not in a standard way).</li><li><strong>Implementations SHOULD avoid revealing whether the username is valid or not</strong>, for <a href="https://www.troyhunt.com/everything-you-ever-wanted-to-know/" target="_blank" rel="external">privacy reasons</a>.</li></ul><p>Here&#39;s an example of how you can leverage <a href="https://github.com/aspnet/Identity" target="_blank" rel="external">ASP.NET Core Identity</a> (previously known as ASP.NET Identity 3) to implement <code>HandleTokenRequest</code>:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">HandleTokenRequest</span>(<span class="params">HandleTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Resolve ASP.NET Core Identity's user manager from the DI container.</span></div><div class="line">    <span class="keyword">var</span> manager = context.HttpContext.RequestServices.GetRequiredService&lt;UserManager&lt;ApplicationUser&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// Only handle grant_type=password requests and let ASOS</span></div><div class="line">    <span class="comment">// process grant_type=refresh_token requests automatically.</span></div><div class="line">    <span class="keyword">if</span> (context.Request.IsPasswordGrantType())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> user = <span class="keyword">await</span> manager.FindByNameAsync(context.Request.Username);</div><div class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                description: <span class="string">"Invalid credentials."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Ensure the user is allowed to sign in.</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">await</span> manager.CanSignInAsync(user))</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                description: <span class="string">"The specified user is not allowed to sign in."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Reject the token request if two-factor authentication has been enabled by the user.</span></div><div class="line">        <span class="keyword">if</span> (manager.SupportsUserTwoFactor &amp;&amp; <span class="keyword">await</span> manager.GetTwoFactorEnabledAsync(user))</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                description: <span class="string">"Two-factor authentication is required for this account."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Ensure the user is not already locked out.</span></div><div class="line">        <span class="keyword">if</span> (manager.SupportsUserLockout &amp;&amp; <span class="keyword">await</span> manager.IsLockedOutAsync(user))</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                description: <span class="string">"Invalid credentials."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Ensure the password is valid.</span></div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">await</span> manager.CheckPasswordAsync(user, context.Request.Password))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (manager.SupportsUserLockout)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">await</span> manager.AccessFailedAsync(user);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidGrant,</div><div class="line">                description: <span class="string">"Invalid credentials."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (manager.SupportsUserLockout)</div><div class="line">        &#123; </div><div class="line">            <span class="keyword">await</span> manager.ResetAccessFailedCountAsync(user);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(context.Options.AuthenticationScheme);</div><div class="line"></div><div class="line">        <span class="comment">// Note: the subject claim is always included in both identity and</span></div><div class="line">        <span class="comment">// access tokens, even if an explicit destination is not specified.</span></div><div class="line">        identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="keyword">await</span> manager.GetUserId(user));</div><div class="line"></div><div class="line">        <span class="comment">// When adding custom claims, you MUST specify one or more destinations.</span></div><div class="line">        <span class="comment">// Read "part 7" for more information about custom claims and scopes.</span></div><div class="line">        identity.AddClaim(<span class="string">"username"</span>, <span class="keyword">await</span> manager.GetUserNameAsync(user),</div><div class="line">            OpenIdConnectConstants.Destinations.AccessToken,</div><div class="line">            OpenIdConnectConstants.Destinations.IdentityToken);</div><div class="line"></div><div class="line">        <span class="comment">// Create a new authentication ticket holding the user identity.</span></div><div class="line">        <span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">            <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">            <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">            context.Options.AuthenticationScheme);</div><div class="line"></div><div class="line">        <span class="comment">// Set the list of scopes granted to the client application.</span></div><div class="line">        ticket.SetScopes(</div><div class="line">            <span class="comment">/* openid: */</span> OpenIdConnectConstants.Scopes.OpenId,</div><div class="line">            <span class="comment">/* email: */</span> OpenIdConnectConstants.Scopes.Email,</div><div class="line">            <span class="comment">/* profile: */</span> OpenIdConnectConstants.Scopes.Profile);</div><div class="line"></div><div class="line">        <span class="comment">// Set the resource servers the access token should be issued for.</span></div><div class="line">        ticket.SetResources(<span class="string">"resource_server"</span>);</div><div class="line"></div><div class="line">        context.Validate(ticket);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, learn how you can implement the resource owner password credentials grant using ASOS.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: creating your own authorization provider</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/</id>
    <published>2016-07-13T15:45:00.000Z</published>
    <updated>2017-05-12T17:50:15.186Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the fourth part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p><strong>ASOS leverages the same events model as the rest of the ASP.NET Core security stack</strong>: often hard to understand for beginners, this pattern (inherited from OWIN/Katana) proved to be extremely powerful by offering full flexibility on the request processing.</p><p>To help make things clearer before trying to implement a concrete flow, here&#39;s a quick overview of how it works with ASOS:</p><hr><h2 id="OpenIdConnectServerProvider-and-the-events-model"><a href="#OpenIdConnectServerProvider-and-the-events-model" class="headerlink" title="OpenIdConnectServerProvider and the events model"></a><code>OpenIdConnectServerProvider</code> and the events model</h2><p><code>OpenIdConnectServerProvider</code> is ASOS&#39; main extensibility hook: its methods (named events or notifications) are invoked by <code>OpenIdConnectServerHandler</code> for every OpenID Connect request to give you a chance to control how the request is handled. Depending on the flows you want to support, you&#39;ll need to implement different events.</p><p><strong>You have 2 options to create your own provider</strong>:</p><ul><li>Directly instantiante an <code>OpenIdConnectServerProvider</code> and use inline delegates. This approach is perfect when implementing a simple server that mainly relies on hardcoded values.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> OpenIdConnectServerProvider</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Implement OnValidateAuthorizationRequest to</span></div><div class="line">        <span class="comment">// support interactive flows (code/implicit/hybrid).</span></div><div class="line">        OnValidateAuthorizationRequest = <span class="keyword">async</span> context =&gt; &#123; ... &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// Implement OnValidateTokenRequest to support flows using the token endpoint</span></div><div class="line">        <span class="comment">// (code/refresh token/password/client credentials/custom grant).</span></div><div class="line">        OnValidateTokenRequest = <span class="keyword">async</span> context =&gt; &#123; ... &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>You can also directly set the events properties without having to manually instantiate a <code>OpenIdConnectServerProvider</code>, as ASOS always registers a default <code>OpenIdConnectServerProvider</code> instance for you:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// Implement OnValidateAuthorizationRequest to</span></div><div class="line">    <span class="comment">// support interactive flows (code/implicit/hybrid).</span></div><div class="line">    options.Provider.OnValidateAuthorizationRequest = <span class="keyword">async</span> context =&gt; &#123; ... &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Implement OnValidateTokenRequest to support flows using the token endpoint</span></div><div class="line">    <span class="comment">// (code/refresh token/password/client credentials/custom grant).</span></div><div class="line">    options.Provider.OnValidateTokenRequest = <span class="keyword">async</span> context =&gt; &#123; ... &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ul><li>Create your own subclass of <code>OpenIdConnectServerProvider</code> and override the virtual methods you want to implement. This is clearly the best approach when implementing a more complex authorization server.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">AuthorizationProvider</span> : <span class="title">OpenIdConnectServerProvider</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Implement OnValidateAuthorizationRequest to support interactive flows (code/implicit/hybrid).</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ValidateAuthorizationRequest</span>(<span class="params">ValidateAuthorizationRequestContext context</span>) </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Implement OnValidateTokenRequest to support flows using the token endpoint</span></div><div class="line">    <span class="comment">// (code/refresh token/password/client credentials/custom grant).</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>) </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.UseOpenIdConnectServer(options =&gt;</div><div class="line">&#123;</div><div class="line">    options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><div class="note info"><p>It&#39;s important to note that the authorization provider is always a singleton: <strong>don&#39;t try to inject scoped dependencies in its constructor</strong>. To resolve scoped dependencies (e.g an Entity Framework <code>DbContext</code>), use the <code>context.HttpContext.RequestServices</code> property to access the scoped container.</p><p>You can read <a href="https://github.com/aspnet/Options/issues/11" target="_blank" rel="external">this thread</a> for more information about this limitation/design choice, which is not specific to ASOS and impacts all the security middleware sharing the same events model. It might be <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/275" target="_blank" rel="external">fixed in a future version</a>, though.</p></div><a id="more"></a><hr><h2 id="Working-with-the-different-categories-of-events"><a href="#Working-with-the-different-categories-of-events" class="headerlink" title="Working with the different categories of events"></a>Working with the different categories of events</h2><p>ASOS has 5 different categories of events:</p><ul><li>The events called to <strong>extract or restore an OpenID Connect request from an HTTP request</strong> (e.g <code>ExtractAuthorizationRequest</code>).</li><li>The events responsible of <strong>validating requests</strong> (e.g <code>ValidateAuthorizationRequest</code>).</li><li>The events <strong>handling requests</strong> (e.g <code>HandleAuthorizationRequest</code>).</li><li>The events that can be used to <strong>alter or replace the response</strong> before it is returned to the caller (e.g <code>ApplyAuthorizationResponse</code>).</li><li>The events in charge of <strong>serializing and deserializing tokens</strong> (e.g <code>SerializeAccessToken</code>).</li></ul><hr><h3 id="Request-extraction-events"><a href="#Request-extraction-events" class="headerlink" title="Request extraction events"></a>Request extraction events</h3><p>Immediately after validating the HTTP method and extracting the request parameters from the query string or from the request form (depending on the endpoint type), ASOS invokes one of the <code>Extract*Request</code> events to give you a chance to manually replace, restore or alter the request before it is validated.</p><p>For instance, <code>ExtractAuthorizationRequest</code> can be used to restore an OpenID Connect authorization request from the user session, which can be useful if you need to save POST or large GET authorization requests before redirecting the user to an external provider:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ExtractAuthorizationRequest</span>(<span class="params">ExtractAuthorizationRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// If a request_id parameter can be found in the authorization request,</span></div><div class="line">    <span class="comment">// restore the complete authorization request stored in the user session.</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(context.Request.RequestId))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> payload = context.HttpContext.Session.Get(context.Request.RequestId);</div><div class="line">        <span class="keyword">if</span> (payload == <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            context.Reject(</div><div class="line">                error: OpenIdConnectConstants.Errors.InvalidRequest,</div><div class="line">                description: <span class="string">"Invalid request: timeout expired."</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Restore the authorization request parameters from the serialized payload.</span></div><div class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> BsonReader(<span class="keyword">new</span> MemoryStream(payload)))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> parameter <span class="keyword">in</span> JObject.Load(reader))</div><div class="line">            &#123;</div><div class="line">                <span class="comment">// Avoid overriding the current request parameters.</span></div><div class="line">                <span class="keyword">if</span> (context.Request.HasParameter(parameter.Key))</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                context.Request.SetParameter(parameter.Key, parameter.Value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Another concrete use case is when you have to support non-standard clients that don&#39;t send the parameters required by the OAuth2/OIDC specifications, as <code>ExtractAuthorizationRequest</code> can be used to remove, replace or even add a missing parameter before ASOS starts validating the request:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExtractAuthorizationRequest</span>(<span class="params">ExtractAuthorizationRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> database = context.HttpContext.RequestServices.GetRequiredService&lt;ApplicationContext&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// If the mandatory response_type parameter is missing, infer it from</span></div><div class="line">    <span class="comment">// the client application type corresponding to the client_id parameter.</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">string</span>.IsNullOrEmpty(context.Request.ClientId) &amp;&amp;</div><div class="line">         <span class="keyword">string</span>.IsNullOrEmpty(context.Request.ResponseType))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Retrieve the application details corresponding to the requested client_id.</span></div><div class="line">        <span class="keyword">var</span> application = <span class="keyword">await</span> (<span class="keyword">from</span> entity <span class="keyword">in</span> database.Applications</div><div class="line">                                 <span class="keyword">where</span> entity.ApplicationID == context.Request.ClientId</div><div class="line">                                 <span class="keyword">select</span> entity).SingleOrDefaultAsync();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (application != <span class="literal">null</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// If the application is a JS app, use the implicit flow. Else, use the code flow.</span></div><div class="line">            context.Request.ResponseType = application.Type == ApplicationType.JavaScript ?</div><div class="line">                OpenIdConnectConstants.ResponseTypes.Token :</div><div class="line">                OpenIdConnectConstants.ResponseTypes.Code;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Request-validation-events"><a href="#Request-validation-events" class="headerlink" title="Request validation events"></a>Request validation events</h3><p>Implementing validation events is <em>generally</em> required to allow ASOS to process OpenID Connect requests. It&#39;s particularly true with <code>ValidateAuthorizationRequest</code> and <code>ValidateTokenRequest</code>, that must be implemented to support interactive and non-interactive flows.</p><p>To allow full flexibility, <strong>ASOS always gives you 2 or 3 options</strong>, depending on the exact event you&#39;re implementing:</p><ul><li><strong>Validate the request</strong>: it&#39;s typically what you&#39;ll want to do after checking that the request was fully valid (e.g the client application was allowed to use the requested grant type and its client credentials were valid).</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.Validate();</div></pre></td></tr></table></figure><div class="note warn"><p>When implementing <code>ValidateTokenRequest</code>, <strong><code>context.Validate()</code> shouldn&#39;t be called for public applications like JS, mobile or desktop apps</strong>. If you want to make client authentication optional, <strong>consider using <code>context.Skip()</code> instead</strong>, as explained below.</p></div><ul><li><strong>Reject the request</strong>: when the request doesn&#39;t meet your specific requirements (e.g the client credentials are missing or invalid), you can reject it with an error code and a description explaining why the request was rejected.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">context.Reject(</div><div class="line">    error: OpenIdConnectConstants.Errors.UnauthorizedClient,</div><div class="line">    description: <span class="string">"This client application is not allowed to use the implicit flow."</span>);</div></pre></td></tr></table></figure><ul><li><strong>Skip validation</strong>: under certain circumstances, ASOS allows you to skip request validation. Calling <code>context.Skip()</code> informs ASOS that the request was not fully validated (e.g because the client credentials were missing) but should be accepted nevertheless.</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.Skip();</div></pre></td></tr></table></figure><p>At the time of writing, only <code>ValidateIntrospectionRequest</code>, <code>ValidateRevocationRequest</code> and <code>ValidateTokenRequest</code> allow using <code>context.Skip()</code>, to make client authentication optional.</p><div class="note warn"><p>Though particularly useful when using the resource owner password credentials grant with JS applications, <strong>that&#39;s something you should avoid</strong> when dealing with <strong>confidential applications using the authorization code flow</strong>, as it drastically reduces the overall security level.</p></div><p>Here&#39;s an example of how <code>ValidateTokenRequest</code> can be implemented to reject specific grant types while allowing all your client applications to use the token endpoint without having to authenticate:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ValidateTokenRequest</span>(<span class="params">ValidateTokenRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Reject the token request that don't use grant_type=password or grant_type=refresh_token.</span></div><div class="line">    <span class="keyword">if</span> (!context.Request.IsPasswordGrantType() &amp;&amp; !context.Request.IsRefreshTokenGrantType())</div><div class="line">    &#123;</div><div class="line">        context.Reject(</div><div class="line">            error: OpenIdConnectConstants.Errors.UnsupportedGrantType,</div><div class="line">            description: <span class="string">"Only resource owner password credentials and refresh token "</span> +</div><div class="line">                         <span class="string">"are accepted by this authorization server"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Since there's only one application and since it's a public client</span></div><div class="line">    <span class="comment">// (i.e a client that cannot keep its credentials private), call Skip()</span></div><div class="line">    <span class="comment">// to inform the server the request should be accepted without </span></div><div class="line">    <span class="comment">// enforcing client authentication.</span></div><div class="line">    context.Skip();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note tip"><p>More samples can be found in the <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="next part">next part</a>, that explains how to implement the <code>ValidateTokenRequest</code> event to support the resource owner password credentials grant with different scenarios.</p></div><hr><h3 id="Request-handling-events"><a href="#Request-handling-events" class="headerlink" title="Request handling events"></a>Request handling events</h3><p>Implementing these events is generally not required, but can be useful to control how ASOS handles a request. Similarly to what the security middleware built in ASP.NET Core offer, you have 3 options to control the request processing:</p><ul><li><strong>Let ASOS determine how the request will be processed</strong>: in most cases, you&#39;ll simply want to add your own logic determining what will be returned to the caller and let ASOS handle the rest of the request. For instance, you may want to implement the <code>HandleUserinfoRequest</code> event to update, augment, replace or remove the default claims returned by the userinfo endpoint:</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">HandleUserinfoRequest</span>(<span class="params">HandleUserinfoRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// You can retrieve the claims stored in the access token extracted</span></div><div class="line">    <span class="comment">// from the userinfo request by accessing the authentication ticket.</span></div><div class="line">    <span class="keyword">var</span> principal = context.Ticket.Principal;</div><div class="line"></div><div class="line">    <span class="comment">// Set family_name, given_name, birth_date using custom claims:</span></div><div class="line">    context.FamilyName = principal.FindClaim(<span class="string">"custom:last_name"</span>)?.Value;</div><div class="line">    context.GivenName = principal.FindClaim(<span class="string">"custom:first_name"</span>)?.Value;</div><div class="line">    context.BirthDate = principal.FindClaim(<span class="string">"custom:birth_date"</span>)?.Value;</div><div class="line"></div><div class="line">    <span class="comment">// Only expose "custom-claim" if "custom-scope" was granted by the resource owner.</span></div><div class="line">    <span class="keyword">if</span> (context.Ticket.HasScope(<span class="string">"custom-scope"</span>))</div><div class="line">    &#123;</div><div class="line">        context.Claims[<span class="string">"custom-claim"</span>] = <span class="string">"claim-value"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><strong>Handle the request manually</strong>: by calling <code>context.HandleRequest()</code>, you can inform ASOS that its default logic should not be executed and that the request should terminate immediately after invoking your event handler. In doing so, you take full control over the response: you can return a custom status code, render a HTML page or even send back a JSON payload by directly writing to the HTTP response stream.</li></ul><p>Here&#39;s an example implementing <code>HandleAuthorizationRequest</code> to immediately return a token to the client application without displaying a consent page or relying on ASP.NET Core MVC to render it (if the user is not already logged in, <code>ChallengeAsync</code> is immediately called to redirect him/her to Google&#39;s authorization endpoint):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">HandleAuthorizationRequest</span>(<span class="params">HandleAuthorizationRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Retrieve the principal extracted from the local cookie. If user is not already logged in, a null value is returned.</span></div><div class="line">    <span class="keyword">var</span> principal = <span class="keyword">await</span> context.HttpContext.Authentication.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme);</div><div class="line">    <span class="keyword">if</span> (principal == <span class="literal">null</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Redirect the user to the Google authorization/authentication page.</span></div><div class="line">        <span class="keyword">await</span> context.HttpContext.Authentication.ChallengeAsync(GoogleDefaults.AuthenticationScheme);</div><div class="line"></div><div class="line">        <span class="comment">// Mark the response as handled to skip the default request processing.</span></div><div class="line">        context.HandleResponse();</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> identity = <span class="keyword">new</span> ClaimsIdentity(context.Options.AuthenticationScheme);</div><div class="line">    identity.AddClaim(OpenIdConnectConstants.Claims.Subject, <span class="string">"3B181511-9C18-4EEB-A80E-9E48BB0E0872"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Create a new authentication ticket holding the user identity.</span></div><div class="line">    <span class="keyword">var</span> ticket = <span class="keyword">new</span> AuthenticationTicket(</div><div class="line">        <span class="keyword">new</span> ClaimsPrincipal(identity),</div><div class="line">        <span class="keyword">new</span> AuthenticationProperties(),</div><div class="line">        context.Options.AuthenticationScheme);</div><div class="line"></div><div class="line">    <span class="comment">// Call SignInAsync to create and return a new authorization response containing the serialized code/tokens.</span></div><div class="line">    <span class="comment">// The user will be automatically redirected back to the client application with the authorization code/access token.</span></div><div class="line">    <span class="keyword">await</span> context.HttpContext.Authentication.SignInAsync(ticket.AuthenticationScheme, ticket.Principal, ticket.Properties);</div><div class="line"></div><div class="line">    <span class="comment">// Mark the response as handled to skip the default request processing.</span></div><div class="line">    context.HandleResponse();</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><strong>Skip the default logic and delegate the request handling to the next middleware in the pipeline:</strong> when calling <code>context.SkipToNextMiddleware()</code>, ASOS is informed that the default request processing should not be applied.</li></ul><p>Unlike <code>context.HandleResponse()</code>, <code>context.SkipToNextMiddleware()</code> doesn&#39;t immediately stop the request processing. Instead, the next middleware in the pipeline (i.e all the middleware registered after <code>app.UseOpenIdConnectServer()</code>) are invoked to give them a chance to handle the request.</p><p>A common use case is when you want to handle the userinfo request in your own API controller instead of handling it at the middleware level:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">HandleUserinfoRequest</span>(<span class="params">HandleUserinfoRequestContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Note: by default, the OpenID Connect server middleware automatically handles</span></div><div class="line">    <span class="comment">// userinfo requests and directly writes the JSON response to the response stream.</span></div><div class="line">    <span class="comment">// Calling context.SkipToNextMiddleware() bypasses the default request processing</span></div><div class="line">    <span class="comment">// and delegates it to a custom ASP.NET Core MVC controller (UserinfoController).</span></div><div class="line">    context.SkipToNextMiddleware();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserinfoController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Specify ActiveAuthenticationSchemes = "Bearer" to ensure the principal extracted from</span></div><div class="line">    <span class="comment">// the access token sent by the client application is correctly attached to the HTTP context.</span></div><div class="line">    [Authorize(ActiveAuthenticationSchemes = OAuthValidationDefaults.AuthenticationScheme)]</div><div class="line">    [HttpGet(<span class="string">"~/connect/userinfo"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Json(<span class="keyword">new</span></div><div class="line">        &#123;</div><div class="line">            sub = User.GetClaim(OpenIdConnectConstants.Claims.Subject),</div><div class="line">            name = User.GetClaim(OpenIdConnectConstants.Claims.Name)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Response-events"><a href="#Response-events" class="headerlink" title="Response events"></a>Response events</h3><p>Similarly to how the request handling events work, the <code>Apply*Response</code> events give you a chance to control how the OpenID Connect responses are serialized and applied just before they are returned to the caller: you can call <code>context.HandleResponse()</code> to inform ASOS that the response should be processed using your own logic or <code>context.SkipToNextMiddleware()</code> to bypass the default response logic and to invoke the next middleware.</p><p>Here&#39;s an implementation of <code>ApplyTokenResponse</code> that adds a custom parameter to the token response before returning it:</p><div class="note info"><p>Note that this practice is usually discouraged when using it as a way to flow user attributes. Instead, <a href="http://stackoverflow.com/a/36581160/542757" target="_blank" rel="external">consider storing them as claims in the identity token</a>.</p></div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task <span class="title">ApplyTokenResponse</span>(<span class="params">ApplyTokenResponseContext context</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Only add the custom parameter if the response indicates a successful response.</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(context.Error))</div><div class="line">    &#123;</div><div class="line">        context.Response[<span class="string">"custom-parameter"</span>] = <span class="string">"value"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> Task.FromResult(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover the events model used by ASOS and the rest of the ASP.NET Core security stack and how you can leverage it to control how your authorization server handles requests.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: registering the middleware in the ASP.NET Core pipeline</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/</id>
    <published>2016-07-13T15:30:00.000Z</published>
    <updated>2017-05-12T16:18:47.490Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the third part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>In the previous post (<a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a>), we saw the differences between the various OAuth2/OpenID Connect flows. In this one, we&#39;ll see how to reference the ASOS package and how to register it in the ASP.NET Core pipeline.</p><hr><h3 id="Referencing-the-OpenID-Connect-server-middleware-package"><a href="#Referencing-the-OpenID-Connect-server-middleware-package" class="headerlink" title="Referencing the OpenID Connect server middleware package"></a>Referencing the OpenID Connect server middleware package</h3><div class="note info"><p><strong>This post was updated to reflect the latest changes introduced in the 1.0.0 RTM version of ASOS</strong>.</p></div><p>To reference ASOS, simply add <code>&quot;AspNet.Security.OpenIdConnect.Server&quot;: &quot;1.0.0&quot;</code> under the <code>dependencies</code> node of your <code>.csproj</code> file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OpenIdConnect.Server"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><hr><h3 id="Referencing-the-OAuth2-validation-middleware"><a href="#Referencing-the-OAuth2-validation-middleware" class="headerlink" title="Referencing the OAuth2 validation middleware"></a>Referencing the OAuth2 validation middleware</h3><p>You&#39;ll also need to add the validation middleware, <strong>in charge of verifying/decrypting the tokens produced by ASOS</strong> and protecting your API endpoints:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk.Web"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"AspNet.Security.OAuth.Validation"</span> <span class="attr">Version</span>=<span class="string">"1.0.0"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></div></pre></td></tr></table></figure><p>The <a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Extensions/tree/master/src/AspNet.Security.OAuth.Validation" target="_blank" rel="external">validation middleware</a> is similar to the JWT bearer middleware developed by the ASP.NET team but was specifically designed to use the encrypted tokens issued by ASOS and to <strong>offer a much easier experience</strong> (it doesn&#39;t require any explicit configuration by default).</p><div class="note tip"><p>Starting with ASOS beta5, <a href="https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server/issues/185" target="_blank" rel="external">JWT is no longer the default format for access tokens</a>, but is still supported natively. To use JWT tokens instead of opaque/encrypted tokens, follow the steps below:</p><ul><li>Remove the reference to <code>AspNet.Security.OAuth.Validation</code> in <code>project.json</code>.</li><li>Remove the validation middleware registration (<code>app.UseOAuthValidation()</code>),</li><li>Reference the <code>Microsoft.AspNetCore.Authentication.JwtBearer</code> package.</li><li>Register the JWT middleware using <code>app.UseJwtBearerAuthentication()</code>.</li><li>Assign <code>options.AccessTokenHandler = new JwtSecurityTokenHandler()</code> to override the default format.</li></ul></div><a id="more"></a><hr><h3 id="Registering-the-services-required-by-the-OpenID-Connect-server-middleware"><a href="#Registering-the-services-required-by-the-OpenID-Connect-server-middleware" class="headerlink" title="Registering the services required by the OpenID Connect server middleware"></a>Registering the services required by the OpenID Connect server middleware</h3><p>For ASOS to work properly, <strong>you need to register the authentication services</strong> in the DI container:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></div><div class="line">    &#123;</div><div class="line">        services.AddAuthentication();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Register-the-OpenID-Connect-server-and-the-validation-middleware-in-the-ASP-NET-Core-pipeline"><a href="#Register-the-OpenID-Connect-server-and-the-validation-middleware-in-the-ASP-NET-Core-pipeline" class="headerlink" title="Register the OpenID Connect server and the validation middleware in the ASP.NET Core pipeline"></a>Register the OpenID Connect server and the validation middleware in the ASP.NET Core pipeline</h3><div class="note warn"><p>Make sure to <strong>always put the validation middleware at the top of your pipeline</strong>: if the validation middleware is not at the right place, requests won&#39;t be correctly authenticated when reaching the next middleware (e.g MVC).</p><p>The same remark applies to the OpenID Connect server middleware, that must be inserted before ASP.NET Core MVC to handle authorization and logout requests correctly.</p></div><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Calling app.UseOAuthValidation() will register the middleware</span></div><div class="line">        <span class="comment">// in charge of validating the bearer tokens issued by ASOS.</span></div><div class="line">        app.UseOAuthValidation();</div><div class="line"></div><div class="line">        <span class="comment">// Alternatively, you can also register the JWT middleware</span></div><div class="line">        <span class="comment">// if you don't want to use opaque tokens (the default format).</span></div><div class="line">        <span class="comment">// In this case, comment or remove the previous line.</span></div><div class="line">        <span class="comment">// app.UseJwtBearerAuthentication(new JwtBearerOptions</span></div><div class="line">        <span class="comment">// &#123;</span></div><div class="line">        <span class="comment">//     Audience = "http://localhost:58292/",</span></div><div class="line">        <span class="comment">//     Authority = "http://localhost:58292/",</span></div><div class="line">        <span class="comment">//     RequireHttpsMetadata = false,</span></div><div class="line">        <span class="comment">// &#125;);</span></div><div class="line"></div><div class="line">        app.UseOpenIdConnectServer(options =&gt;</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// Create your own authorization provider by subclassing</span></div><div class="line">            <span class="comment">// the OpenIdConnectServerProvider base class.</span></div><div class="line">            options.Provider = <span class="keyword">new</span> AuthorizationProvider();</div><div class="line"></div><div class="line">            <span class="comment">// Enable the authorization and token endpoints.</span></div><div class="line">            options.AuthorizationEndpointPath = <span class="string">"/connect/authorize"</span>;</div><div class="line">            options.TokenEndpointPath = <span class="string">"/connect/token"</span>;</div><div class="line"></div><div class="line">            <span class="comment">// During development, you can set AllowInsecureHttp</span></div><div class="line">            <span class="comment">// to true to disable the HTTPS requirement.</span></div><div class="line">            options.AllowInsecureHttp = <span class="literal">true</span>;</div><div class="line">            </div><div class="line">            <span class="comment">// Note: uncomment this line to issue JWT tokens.</span></div><div class="line">            <span class="comment">// options.AccessTokenHandler = new JwtSecurityTokenHandler();</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover how to reference and register ASOS and the OAuth2 token validation middleware in your ASP.NET Core application.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Creating your own OpenID Connect server with ASOS: choosing the right flow(s)</title>
    <link href="https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/"/>
    <id>https://kevinchalet.com/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/</id>
    <published>2016-07-13T15:15:00.000Z</published>
    <updated>2016-07-13T16:52:50.509Z</updated>
    
    <content type="html"><![CDATA[<div class="note tip"><p>This post is the second part of a series of blog posts entitled <strong>Creating your own OpenID Connect server with ASOS</strong>:</p><ol><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-introduction/" title="Introduction">Introduction</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/" title="Choosing the right flow(s)">Choosing the right flow(s)</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-creating-your-own-authorization-provider/" title="Creating your own authorization provider">Creating your own authorization provider</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-resource-owner-password-credentials-grant/" title="Implementing the resource owner password credentials grant">Implementing the resource owner password credentials grant</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-implementing-the-authorization-code-and-implicit-flows/" title="Implementing the authorization code and implicit flows">Implementing the authorization code and implicit flows</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-adding-custom-claims-and-granting-scopes/" title="Adding custom claims and granting scopes">Adding custom claims and granting scopes</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-testing-your-authorization-server-with-postman/" title="Testing your authorization server with Postman">Testing your authorization server with Postman</a></li><li><a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-conclusion/" title="Conclusion">Conclusion</a></li></ol></div><p>ASOS offers built-in support for all the standard flows defined by the <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="external">OAuth2</a> and <a href="https://openid.net/specs/openid-connect-core-1_0.html" target="_blank" rel="external">OpenID Connect</a> core specifications: <a href="http://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth" target="_blank" rel="external">the authorization code flow</a>, <a href="http://openid.net/specs/openid-connect-core-1_0.html#ImplicitFlowAuth" target="_blank" rel="external">the implicit flow</a>, <a href="http://openid.net/specs/openid-connect-core-1_0.html#HybridFlowAuth" target="_blank" rel="external">the hybrid flow</a> (which is basically a mix between the first two flows), <a href="https://tools.ietf.org/html/rfc6749#section-4.3" target="_blank" rel="external">the resource owner password credentials grant</a> and <a href="https://tools.ietf.org/html/rfc6749#section-4.4" target="_blank" rel="external">the client credentials grant</a>.</p><p>Though not specific to ASOS, choosing the best flow(s) for your application is an <strong>important prerequisite</strong> when implementing your own authorization server ; so here&#39;s a quick overview of the different OAuth2/OpenID Connect flows:</p><hr><h2 id="Non-interactive-flows"><a href="#Non-interactive-flows" class="headerlink" title="Non-interactive flows"></a>Non-interactive flows</h2><h3 id="Resource-owner-password-credentials-flow"><a href="#Resource-owner-password-credentials-flow" class="headerlink" title="Resource owner password credentials flow"></a>Resource owner password credentials flow</h3><p>Directly inspired by <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" target="_blank" rel="external">basic authentication</a>, the resource owner password credentials grant (abbreviated <em>ROPC</em>) is probably <strong>the simplest OAuth2 flow</strong>: the client application asks the user his username/password, sends a token request to the authorization server with the user credentials (and depending on the client authentication policy defined by the authorization server, its own client credentials) and gets back an access token it can use to retrieve the user&#39;s resources.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/resource-owner-password-flow.png" alt="resource-owner-password-flow.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: server.example.com</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=password&amp;username=johndoe&amp;password=A3ddj3w</span></div></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"></div><div class="line"><span class="undefined">&#123;</span></div><div class="line">  "access_token":"2YotnFZFEjr1zCsicMWpAA",</div><div class="line">  "token_type":"bearer",</div><div class="line">  "expires_in":3600</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Though <strong>not recommended by the OAuth2 specification</strong> as it&#39;s the only flow where <strong>the user password is directly exposed to the client application</strong> (which breaks the principle of least privilege), the resource owner password credentials grant is one of the most popular flows.</p><p>It is is particularly appreciated by SPA writers as it&#39;s trivial to implement in vanilla JavaScript, doesn&#39;t involve any redirection or consent form and, unlike interactive flows, doesn&#39;t require implementing token validation or cross-site request forgery (XSRF) countermeasures to prevent session fixation attacks.</p><div class="note tip"><p>If you don&#39;t feel comfortable with the other flows (and the security measures they require on the client-side), using ROPC might be a good option: <strong>paradoxically, a client application using ROPC will be far less vulnerable than a client using interactive flows without implementing the appropriate security checks.</strong></p></div><div class="note warn"><p><a href="https://tools.ietf.org/html/rfc6749#section-4.3" target="_blank" rel="external">As recommended by the OAuth2 specification</a>, <strong>you SHOULD NEVER use it with third-party applications</strong>. If you want to support applications you don&#39;t <strong>fully trust</strong>, consider using an interactive flow instead (e.g authorization code or implicit flow).</p></div><a id="more"></a><hr><h3 id="Client-credentials-grant"><a href="#Client-credentials-grant" class="headerlink" title="Client credentials grant"></a>Client credentials grant</h3><p>The client credentials grant is almost identical to the resource owner password credentials grant, except it&#39;s been specifically designed for <strong>client-to-server scenarios</strong> (no user is involved in this flow): the client application sends a token request containing its credentials and gets back an access token it can use to query its own resources.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/client-credentials-flow.png" alt="client-credentials-flow.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: server.example.com</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=client_credentials&amp;client_id=s6BhdRkqt3&amp;client_secret=gX1fBat3bV</span></div></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"></div><div class="line"><span class="undefined">&#123;</span></div><div class="line">  "access_token":"2YotnFZFEjr1zCsicMWpAA",</div><div class="line">  "token_type":"bearer",</div><div class="line">  "expires_in":3600</div><div class="line">&#125;</div></pre></td></tr></table></figure><div class="note tip"><p>Unlike the resource owner password credentials grant, <strong>client authentication is not optional</strong> when using the client credentials grant and <strong>ASOS will always reject unauthenticated token requests</strong>, <a href="https://tools.ietf.org/html/rfc6749#section-4.4.2" target="_blank" rel="external">as required by the OAuth2 specification</a>.</p><p>This means that <strong>you CAN&#39;T use the client credentials grant with public applications</strong> like JS, mobile or desktop applications, as they are not able to keep their credentials secret.</p></div><hr><h2 id="Interactive-flows"><a href="#Interactive-flows" class="headerlink" title="Interactive flows"></a>Interactive flows</h2><h3 id="Authorization-code-flow"><a href="#Authorization-code-flow" class="headerlink" title="Authorization code flow"></a>Authorization code flow</h3><p>The authorization code flow is probably the most complicated flow as it involves both <strong>user-agent redirections and backchannel communication</strong>. In return, using this flow with server-side applications has a great advantage: the <code>access_token</code> cannot be intercepted by the user agent.</p><p>There are basically 2 steps in the authorization code flow: the authorization request/response and the token request/response.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/authorization-code-flow.png" alt="authorization-code-flow.png"><ul><li><strong>Step 1: the authorization request</strong></li></ul><p>In this flow, the client application always initiates the authentication process by generating an authorization request including the mandatory <code>response_type=code</code> parameter, its <code>client_id</code>, its <code>redirect_uri</code> and optionally, a <code>scope</code> and a <code>state</code> parameter <a href="http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest" target="_blank" rel="external">that allows flowing custom data and helps mitigate XSRF attacks</a>.</p><div class="note tip"><p>In most cases, the client application will simply return a 302 response with a <code>Location</code> header to redirect the user agent to the authorization endpoint, but depending on the OpenID Connect client you&#39;re using, POST requests might also be supported to allow you to send large authorization requests. This feature <a href="https://github.com/aspnet/Security/pull/392" target="_blank" rel="external">is usually implemented using an auto-post HTML form</a>.</p></div><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">302</span> Found</div><div class="line"><span class="attribute">Location</span>: https://server.example.com/authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=af0ifjsldkj&amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb</div></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/connect/authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;state=af0ifjsldkj&amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: server.example.com</div></pre></td></tr></table></figure><p>The way the identity provider handles the authorization request is implementation-specific but in most cases, a consent form is displayed to ask the user if he or she agrees to share his/her personal data with the client application.</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/consent-form.png" alt="consent-form.png"><p>When the consent is given, the user agent is redirected back to the client application with <strong>a unique and short-lived token</strong> named <em>authorization code</em> that the client will be able to exchange with an access token by sending a token request.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">302</span> Found</div><div class="line"><span class="attribute">Location</span>: https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&amp;state=af0ifjsldkj</div></pre></td></tr></table></figure><div class="note warn"><p>To prevent XSRF/session fixation attacks, <strong>the client application MUST ensure that the <code>state</code> parameter returned by the identity provider corresponds to the original <code>state</code></strong> and stop processing the authorization response if the two values don&#39;t match. <a href="https://tools.ietf.org/html/rfc6749#section-10.12" target="_blank" rel="external">This is usually done by generating a non-guessable string and a corresponding correlation cookie</a>.</p></div><ul><li><strong>Step 2: the token request</strong></li></ul><p>When the client application gets back an authorization code, it must immediately reedem it for an access token by sending a <code>grant_type=authorization_code</code> token request.</p><div class="note tip"><p>To help the identity provider <a href="https://tools.ietf.org/html/rfc6819#section-4.4.1.7" target="_blank" rel="external">mitigate counterfeit clients attacks</a>, the original <code>redirect_uri</code> must also be sent.</p><p>If the client application is a confidential application (i.e an application that has been assigned client credentials), authentication is required.</p></div><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">/connect/token</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: server.example.com</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</div><div class="line"></div><div class="line"><span class="undefined">grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA&amp;redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb&amp;client_id=s6BhdRkqt3&amp;client_secret=gX1fBat3bV&amp;scope=openid</span></div></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">200</span> OK</div><div class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</div><div class="line"><span class="attribute">Cache-Control</span>: no-store</div><div class="line"><span class="attribute">Pragma</span>: no-cache</div><div class="line"></div><div class="line"><span class="undefined">&#123;</span></div><div class="line">  "access_token":"2YotnFZFEjr1zCsicMWpAA",</div><div class="line">  "token_type":"bearer",</div><div class="line">  "expires_in":3600</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="Implicit-flow"><a href="#Implicit-flow" class="headerlink" title="Implicit flow"></a>Implicit flow</h3><p>The implicit flow is similar to the authorization code flow, <strong>except there&#39;s no token request/response step</strong>: the access token is directly returned to the client application as part of the authorization response in the URI fragment (or in the request form when using <code>response_mode=form_post</code>).</p><img src="/2016/07/13/creating-your-own-openid-connect-server-with-asos-choosing-the-right-flows/implicit-flow.png" alt="implicit-flow.png"><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GET</span> <span class="string">/connect/authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb&amp;scope=openid&amp;state=af0ifjsldkj&amp;nonce=n-0S6_WzA2Mj</span> HTTP/1.1</div><div class="line"><span class="attribute">Host</span>: server.example.com</div></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 <span class="number">302</span> Found</div><div class="line"><span class="attribute">Location</span>: https://client.example.org/cb#access_token=SlAV32hkKG&amp;token_type=bearer&amp;expires_in=3600&amp;state=af0ifjsldkj</div></pre></td></tr></table></figure><div class="note info"><p>This flow is inherently less secure than the authorization code flow, but is easier to implement and has been specifically designed for JS applications. Using it with confidential applications is <strong>not recommended</strong> and authorization servers <strong>SHOULD STRONGLY</strong> consider rejecting implicit flow requests when the <code>client_id</code> corresponds to a confidential application to prevent downgrade attacks and token leakage.</p></div><div class="note warn"><p>To prevent XSRF/session fixation attacks, <strong>the client application MUST ensure that the <code>state</code> parameter returned by the identity provider corresponds to the original <code>state</code></strong> and stop processing the authorization response if the two values don&#39;t match. <a href="https://tools.ietf.org/html/rfc6749#section-10.12" target="_blank" rel="external">This is usually done by generating a non-guessable string and a corresponding value stored in the local storage</a>.</p><p>When using the implicit flow, <strong>the client application MUST also ensure that the access token was not issued to another application to prevent <a href="http://stackoverflow.com/a/17439317/542757" target="_blank" rel="external">confused deputy attacks</a>.</strong> With OpenID Connect, this can be done by using <code>response_type=id_token token</code> and checking the <code>aud</code> claim of the JWT identity token, that must correspond or contain the <code>client_id</code> of the client application.</p></div><p>Still unsure what&#39;s the best flow for your app? Here&#39;s a quick table to help you:</p><table><thead><tr><th>Flow/grant</th><th>Requires user interaction?</th><th>For server-side apps?</th><th>For public apps (JS/mobile)?</th><th>For third-party apps?</th></tr></thead><tbody><tr><td>Resource owner password credentials</td><td>No</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Client credentials</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>Authorization code</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Implicit</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><hr><p>Next part: <a href="/2016/07/13/creating-your-own-openid-connect-server-with-asos-registering-the-middleware-in-the-asp-net-core-pipeline/" title="Registering the middleware in the ASP.NET Core pipeline">Registering the middleware in the ASP.NET Core pipeline</a>.</p>]]></content>
    
    <summary type="html">
    
      In this post, discover the differences between the standard authorization code, implicit, resource owner password credentials and client credentials flows offered by OAuth2 and OpenID Connect.

    
    </summary>
    
      <category term="Development" scheme="https://kevinchalet.com/categories/development/"/>
    
    
      <category term="asp.net core" scheme="https://kevinchalet.com/tags/asp-net-core/"/>
    
      <category term="aspnet-contrib" scheme="https://kevinchalet.com/tags/aspnet-contrib/"/>
    
      <category term="authentication" scheme="https://kevinchalet.com/tags/authentication/"/>
    
      <category term="jwt" scheme="https://kevinchalet.com/tags/jwt/"/>
    
      <category term="oauth" scheme="https://kevinchalet.com/tags/oauth/"/>
    
      <category term="openid connect" scheme="https://kevinchalet.com/tags/openid-connect/"/>
    
  </entry>
  
</feed>
